{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0","program":"/home/utkarsh_arch/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","safe_arch","--edition=2018","/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=94b647a8d28631f4","-C","extra-filename=-94b647a8d28631f4","--out-dir","/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps","-L","dependency=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps","--extern","bytemuck=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/libbytemuck-99e7665d392d975e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/utkarsh_arch/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/libsafe_arch-94b647a8d28631f4.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[4313320000628576337,0]},"crate_root":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src","external_crates":[{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","num":4,"id":{"name":"bytemuck","disambiguator":[3824981217086855319,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","num":5,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}}],"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":0,"byte_end":13656,"line_start":1,"line_end":331,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":0,"byte_end":13656,"line_start":1,"line_end":331,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":92}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":60,"byte_end":99,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":141,"byte_end":204,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":205,"byte_end":208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":209,"byte_end":280,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":281,"byte_end":355,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":356,"byte_end":435,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":436,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":517,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":554,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":558,"byte_end":637,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":638,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":717,"byte_end":797,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":798,"byte_end":867,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":868,"byte_end":884,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":885,"byte_end":888,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":889,"byte_end":969,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":970,"byte_end":1050,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1051,"byte_end":1083,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1084,"byte_end":1156,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1157,"byte_end":1237,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1238,"byte_end":1278,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1279,"byte_end":1354,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1355,"byte_end":1428,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1429,"byte_end":1461,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1462,"byte_end":1539,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1540,"byte_end":1617,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1618,"byte_end":1693,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1694,"byte_end":1713,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1714,"byte_end":1787,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1788,"byte_end":1865,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1866,"byte_end":1945,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1946,"byte_end":2018,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2019,"byte_end":2058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2059,"byte_end":2062,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2063,"byte_end":2088,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2089,"byte_end":2164,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2165,"byte_end":2239,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2240,"byte_end":2318,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2319,"byte_end":2366,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2367,"byte_end":2370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2371,"byte_end":2433,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2434,"byte_end":2483,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2484,"byte_end":2487,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2488,"byte_end":2510,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2511,"byte_end":2551,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2552,"byte_end":2619,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2620,"byte_end":2650,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2651,"byte_end":2724,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2725,"byte_end":2761,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2762,"byte_end":2765,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2766,"byte_end":2805,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2806,"byte_end":2809,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2810,"byte_end":2883,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2884,"byte_end":2959,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2960,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3041,"byte_end":3121,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3122,"byte_end":3200,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3201,"byte_end":3276,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3277,"byte_end":3351,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3352,"byte_end":3377,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3378,"byte_end":3381,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3382,"byte_end":3462,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3463,"byte_end":3540,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3541,"byte_end":3618,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3619,"byte_end":3630,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3631,"byte_end":3634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3635,"byte_end":3715,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3716,"byte_end":3793,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3794,"byte_end":3833,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3834,"byte_end":3837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3838,"byte_end":3914,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3915,"byte_end":3990,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3991,"byte_end":4067,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4068,"byte_end":4146,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4147,"byte_end":4227,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4228,"byte_end":4307,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4308,"byte_end":4373,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4374,"byte_end":4377,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4378,"byte_end":4454,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4455,"byte_end":4519,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4520,"byte_end":4523,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4524,"byte_end":4604,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4605,"byte_end":4685,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4686,"byte_end":4761,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4762,"byte_end":4842,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4843,"byte_end":4918,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4919,"byte_end":4995,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4996,"byte_end":5075,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5076,"byte_end":5150,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5151,"byte_end":5231,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5232,"byte_end":5235,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5236,"byte_end":5255,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5256,"byte_end":5347,"line_start":98,"line_end":98,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5348,"byte_end":5371,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5372,"byte_end":5440,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5441,"byte_end":5516,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5517,"byte_end":5520,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5521,"byte_end":5555,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5556,"byte_end":5559,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5560,"byte_end":5599,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5600,"byte_end":5663,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5664,"byte_end":5717,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5718,"byte_end":5771,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5772,"byte_end":5830,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5831,"byte_end":5834,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5835,"byte_end":5904,"line_start":111,"line_end":111,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5905,"byte_end":5983,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5984,"byte_end":6064,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6065,"byte_end":6145,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6146,"byte_end":6222,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6223,"byte_end":6244,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6245,"byte_end":6325,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6326,"byte_end":6404,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6405,"byte_end":6463,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6464,"byte_end":6467,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6468,"byte_end":6546,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6547,"byte_end":6620,"line_start":122,"line_end":122,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6621,"byte_end":6693,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6694,"byte_end":6771,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6772,"byte_end":6820,"line_start":125,"line_end":125,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":13989,"byte_end":14042,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14043,"byte_end":14046,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14047,"byte_end":14126,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14127,"byte_end":14200,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14201,"byte_end":14269,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14270,"byte_end":14286,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14287,"byte_end":14318,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14319,"byte_end":14322,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14323,"byte_end":14335,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14336,"byte_end":14414,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14415,"byte_end":14481,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14482,"byte_end":14550,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14551,"byte_end":14627,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14628,"byte_end":14671,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14672,"byte_end":14745,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14746,"byte_end":14826,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14827,"byte_end":14901,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14902,"byte_end":14977,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14978,"byte_end":15055,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15056,"byte_end":15059,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15060,"byte_end":15077,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15078,"byte_end":15155,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15156,"byte_end":15230,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15231,"byte_end":15310,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15311,"byte_end":15367,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15368,"byte_end":15371,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15372,"byte_end":15442,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15443,"byte_end":15522,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15523,"byte_end":15603,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15604,"byte_end":15667,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15668,"byte_end":15671,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15672,"byte_end":15746,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15747,"byte_end":15827,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15828,"byte_end":15902,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15903,"byte_end":15981,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15982,"byte_end":16044,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16045,"byte_end":16109,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16110,"byte_end":16113,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16114,"byte_end":16139,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16140,"byte_end":16216,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16217,"byte_end":16220,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16221,"byte_end":16260,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16261,"byte_end":16341,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16342,"byte_end":16422,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16423,"byte_end":16459,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16460,"byte_end":16501,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16502,"byte_end":16576,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16577,"byte_end":16654,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16655,"byte_end":16734,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16735,"byte_end":16794,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16795,"byte_end":16840,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16841,"byte_end":16912,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16913,"byte_end":16969,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16970,"byte_end":17002,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17003,"byte_end":17082,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17083,"byte_end":17162,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17163,"byte_end":17220,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17221,"byte_end":17292,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17293,"byte_end":17360,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17361,"byte_end":17419,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17420,"byte_end":17498,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17499,"byte_end":17578,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17579,"byte_end":17659,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17660,"byte_end":17738,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17739,"byte_end":17784,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17785,"byte_end":17865,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17866,"byte_end":17942,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17943,"byte_end":17955,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17956,"byte_end":18032,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18033,"byte_end":18111,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18112,"byte_end":18192,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18193,"byte_end":18212,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18213,"byte_end":18235,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18236,"byte_end":18313,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18314,"byte_end":18386,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18387,"byte_end":18467,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18468,"byte_end":18534,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18535,"byte_end":18612,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18613,"byte_end":18661,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18662,"byte_end":18740,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18741,"byte_end":18817,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18818,"byte_end":18897,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18898,"byte_end":18977,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18978,"byte_end":19039,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19040,"byte_end":19111,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19112,"byte_end":19149,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19150,"byte_end":19229,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19230,"byte_end":19310,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19311,"byte_end":19343,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19344,"byte_end":19408,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19409,"byte_end":19474,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19475,"byte_end":19544,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19545,"byte_end":19622,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19623,"byte_end":19694,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19695,"byte_end":19772,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19773,"byte_end":19852,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19853,"byte_end":19927,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19928,"byte_end":19940,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19941,"byte_end":20018,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20019,"byte_end":20098,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20099,"byte_end":20130,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20131,"byte_end":20206,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20207,"byte_end":20277,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20278,"byte_end":20358,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20359,"byte_end":20438,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20439,"byte_end":20515,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20516,"byte_end":20589,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20590,"byte_end":20670,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20671,"byte_end":20747,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20748,"byte_end":20826,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20827,"byte_end":20890,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20891,"byte_end":20967,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20968,"byte_end":21045,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21046,"byte_end":21125,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21126,"byte_end":21188,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21189,"byte_end":21265,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21266,"byte_end":21282,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21283,"byte_end":21362,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21363,"byte_end":21398,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21399,"byte_end":21473,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21474,"byte_end":21527,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21528,"byte_end":21605,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21606,"byte_end":21686,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21687,"byte_end":21765,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21766,"byte_end":21831,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21832,"byte_end":21912,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21913,"byte_end":21991,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21992,"byte_end":22047,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22048,"byte_end":22128,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22129,"byte_end":22185,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22186,"byte_end":22266,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22267,"byte_end":22342,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22343,"byte_end":22420,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22421,"byte_end":22498,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22499,"byte_end":22577,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22578,"byte_end":22645,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22646,"byte_end":22666,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22667,"byte_end":22747,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22748,"byte_end":22819,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22820,"byte_end":22899,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22900,"byte_end":22928,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22929,"byte_end":22955,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22956,"byte_end":23012,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23013,"byte_end":23090,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23091,"byte_end":23169,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23170,"byte_end":23229,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23230,"byte_end":23252,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23253,"byte_end":23332,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23333,"byte_end":23413,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23414,"byte_end":23492,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23493,"byte_end":23511,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23512,"byte_end":23576,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23577,"byte_end":23654,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23655,"byte_end":23729,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23730,"byte_end":23769,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23770,"byte_end":23849,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23850,"byte_end":23930,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23931,"byte_end":23974,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23975,"byte_end":24054,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24055,"byte_end":24135,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24136,"byte_end":24213,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24214,"byte_end":24293,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24294,"byte_end":24317,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24318,"byte_end":24398,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24399,"byte_end":24445,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":95},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416560,"byte_end":9416564,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m128","qualname":"::x86_x64::m128_::m128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of four `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of four `f32` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416237,"byte_end":9416297,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416298,"byte_end":9416301,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 4]`. The main difference is that","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416302,"byte_end":9416380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416381,"byte_end":9416454,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416455,"byte_end":9416496,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416497,"byte_end":9416517,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416518,"byte_end":9416548,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":97},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416565,"byte_end":9416575,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m128_::m128::0","value":"core::arch::x86_64::__m128","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416992,"byte_end":9417000,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128` to an array.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416823,"byte_end":9416861,"line_start":26,"line_end":26,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416864,"byte_end":9416867,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416870,"byte_end":9416948,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416951,"byte_end":9416962,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416965,"byte_end":9416982,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417227,"byte_end":9417237,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417044,"byte_end":9417080,"line_start":35,"line_end":35,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417083,"byte_end":9417086,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m128::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417089,"byte_end":9417166,"line_start":37,"line_end":37,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417169,"byte_end":9417183,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417186,"byte_end":9417197,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417200,"byte_end":9417217,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417471,"byte_end":9417478,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417287,"byte_end":9417350,"line_start":47,"line_end":47,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417353,"byte_end":9417356,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all four lanes at once.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417359,"byte_end":9417427,"line_start":49,"line_end":49,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417430,"byte_end":9417441,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417444,"byte_end":9417461,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417736,"byte_end":9417745,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417548,"byte_end":9417611,"line_start":56,"line_end":56,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417614,"byte_end":9417617,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all four lanes at once.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417620,"byte_end":9417692,"line_start":58,"line_end":58,"column_start":3,"column_end":75}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417695,"byte_end":9417706,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417709,"byte_end":9417726,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":141},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422291,"byte_end":9422296,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m128d","qualname":"::x86_x64::m128d_::m128d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of two `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of two `f64` values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9421968,"byte_end":9422028,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422029,"byte_end":9422032,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 2]`. The main difference is that","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422033,"byte_end":9422111,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422112,"byte_end":9422185,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422186,"byte_end":9422227,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422228,"byte_end":9422248,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422249,"byte_end":9422279,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":143},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422297,"byte_end":9422308,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128d_::m128d::0","value":"core::arch::x86_64::__m128d","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422731,"byte_end":9422739,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128d` to an array.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422561,"byte_end":9422600,"line_start":26,"line_end":26,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422603,"byte_end":9422606,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422609,"byte_end":9422687,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422690,"byte_end":9422701,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422704,"byte_end":9422721,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422968,"byte_end":9422978,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128d`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422783,"byte_end":9422820,"line_start":35,"line_end":35,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422823,"byte_end":9422826,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m128d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422829,"byte_end":9422907,"line_start":37,"line_end":37,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422910,"byte_end":9422924,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422927,"byte_end":9422938,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422941,"byte_end":9422958,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423209,"byte_end":9423216,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423028,"byte_end":9423092,"line_start":47,"line_end":47,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423095,"byte_end":9423098,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423101,"byte_end":9423165,"line_start":49,"line_end":49,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423168,"byte_end":9423179,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423182,"byte_end":9423199,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423471,"byte_end":9423480,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423286,"byte_end":9423350,"line_start":56,"line_end":56,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423353,"byte_end":9423356,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423359,"byte_end":9423427,"line_start":58,"line_end":58,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423430,"byte_end":9423441,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423444,"byte_end":9423461,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":187},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428984,"byte_end":9428989,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m128i","qualname":"::x86_x64::m128i_::m128i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of integer data.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428504,"byte_end":9428560,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428561,"byte_end":9428564,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428565,"byte_end":9428638,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428639,"byte_end":9428717,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428718,"byte_end":9428736,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428737,"byte_end":9428817,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428818,"byte_end":9428895,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428896,"byte_end":9428920,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428921,"byte_end":9428941,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428942,"byte_end":9428972,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":189},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9428990,"byte_end":9429001,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128i_::m128i::0","value":"core::arch::x86_64::__m128i","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":289},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437188,"byte_end":9437192,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m256","qualname":"::x86_x64::m256_::m256","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of eight `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of eight `f32` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9436864,"byte_end":9436925,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9436926,"byte_end":9436929,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 8]`. The main difference is that","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9436930,"byte_end":9437008,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437009,"byte_end":9437082,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437083,"byte_end":9437124,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437125,"byte_end":9437145,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437146,"byte_end":9437176,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":291},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437193,"byte_end":9437203,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m256_::m256::0","value":"core::arch::x86_64::__m256","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437620,"byte_end":9437628,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256` to an array.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437451,"byte_end":9437489,"line_start":26,"line_end":26,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437492,"byte_end":9437495,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437498,"byte_end":9437576,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437579,"byte_end":9437590,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437593,"byte_end":9437610,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437855,"byte_end":9437865,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437672,"byte_end":9437708,"line_start":35,"line_end":35,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437711,"byte_end":9437714,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m256::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437717,"byte_end":9437794,"line_start":37,"line_end":37,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437797,"byte_end":9437811,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437814,"byte_end":9437825,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437828,"byte_end":9437845,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438094,"byte_end":9438101,"line_start":50,"line_end":50,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437909,"byte_end":9437972,"line_start":45,"line_end":45,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437975,"byte_end":9437978,"line_start":46,"line_end":46,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all eight lanes at once.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437981,"byte_end":9438050,"line_start":47,"line_end":47,"column_start":3,"column_end":72}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438053,"byte_end":9438064,"line_start":48,"line_end":48,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438067,"byte_end":9438084,"line_start":49,"line_end":49,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438360,"byte_end":9438369,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438171,"byte_end":9438234,"line_start":54,"line_end":54,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438237,"byte_end":9438240,"line_start":55,"line_end":55,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all eight lanes at once.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438243,"byte_end":9438316,"line_start":56,"line_end":56,"column_start":3,"column_end":76}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438319,"byte_end":9438330,"line_start":57,"line_end":57,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438333,"byte_end":9438350,"line_start":58,"line_end":58,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":335},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444156,"byte_end":9444161,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m256d","qualname":"::x86_x64::m256d_::m256d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of four `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of four `f64` values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9443832,"byte_end":9443893,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9443894,"byte_end":9443897,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 4]`. The main difference is that","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9443898,"byte_end":9443976,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9443977,"byte_end":9444050,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444051,"byte_end":9444092,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444093,"byte_end":9444113,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444114,"byte_end":9444144,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":337},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444162,"byte_end":9444173,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256d_::m256d::0","value":"core::arch::x86_64::__m256d","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444596,"byte_end":9444604,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256d` to an array.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444426,"byte_end":9444465,"line_start":26,"line_end":26,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444468,"byte_end":9444471,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444474,"byte_end":9444552,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444555,"byte_end":9444566,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444569,"byte_end":9444586,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444833,"byte_end":9444843,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256d`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444648,"byte_end":9444685,"line_start":35,"line_end":35,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444688,"byte_end":9444691,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m256d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444694,"byte_end":9444772,"line_start":37,"line_end":37,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444775,"byte_end":9444789,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444792,"byte_end":9444803,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444806,"byte_end":9444823,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445074,"byte_end":9445081,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444893,"byte_end":9444957,"line_start":47,"line_end":47,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444960,"byte_end":9444963,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444966,"byte_end":9445030,"line_start":49,"line_end":49,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445033,"byte_end":9445044,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445047,"byte_end":9445064,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445336,"byte_end":9445345,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445151,"byte_end":9445215,"line_start":56,"line_end":56,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445218,"byte_end":9445221,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445224,"byte_end":9445292,"line_start":58,"line_end":58,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445295,"byte_end":9445306,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445309,"byte_end":9445326,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":381},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450849,"byte_end":9450854,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m256i","qualname":"::x86_x64::m256i_::m256i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of integer data.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450369,"byte_end":9450425,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450426,"byte_end":9450429,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450430,"byte_end":9450503,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450504,"byte_end":9450582,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450583,"byte_end":9450601,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450602,"byte_end":9450682,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450683,"byte_end":9450760,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450761,"byte_end":9450785,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450786,"byte_end":9450806,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450807,"byte_end":9450837,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":383},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450855,"byte_end":9450866,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256i_::m256i::0","value":"core::arch::x86_64::__m256i","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459006,"byte_end":9459014,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"add_m128","qualname":"::x86_x64::sse::add_m128","value":"pub fn add_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128(a, b).to_array();\n assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9458666,"byte_end":9458687,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9458688,"byte_end":9458695,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9458696,"byte_end":9458719,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9458720,"byte_end":9458771,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9458772,"byte_end":9458823,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9458824,"byte_end":9458862,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9458863,"byte_end":9458905,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9458906,"byte_end":9458913,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9458914,"byte_end":9458925,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9458926,"byte_end":9458943,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459449,"byte_end":9459459,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"add_m128_s","qualname":"::x86_x64::sse::add_m128_s","value":"pub fn add_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a + b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128_s(a, b).to_array();\n assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a + b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459086,"byte_end":9459130,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459131,"byte_end":9459138,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459139,"byte_end":9459162,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459163,"byte_end":9459214,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459215,"byte_end":9459266,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459267,"byte_end":9459307,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459308,"byte_end":9459348,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459349,"byte_end":9459356,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459357,"byte_end":9459368,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459369,"byte_end":9459386,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459871,"byte_end":9459882,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"bitand_m128","qualname":"::x86_x64::sse::bitand_m128","value":"pub fn bitand_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitand_m128(a, b).to_array();\n assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459531,"byte_end":9459551,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459552,"byte_end":9459559,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459560,"byte_end":9459583,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459584,"byte_end":9459635,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459636,"byte_end":9459687,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ let c = bitand_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459688,"byte_end":9459729,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459730,"byte_end":9459770,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459771,"byte_end":9459778,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459779,"byte_end":9459790,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459791,"byte_end":9459808,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460300,"byte_end":9460314,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"bitandnot_m128","qualname":"::x86_x64::sse::bitandnot_m128","value":"pub fn bitandnot_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitandnot_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459954,"byte_end":9459977,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459978,"byte_end":9459985,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9459986,"byte_end":9460009,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460010,"byte_end":9460061,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460062,"byte_end":9460113,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let c = bitandnot_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460114,"byte_end":9460158,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460159,"byte_end":9460199,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460200,"byte_end":9460207,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460208,"byte_end":9460219,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460220,"byte_end":9460237,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460762,"byte_end":9460778,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"cmp_eq_mask_m128","qualname":"::x86_x64::sse::cmp_eq_mask_m128","value":"pub fn cmp_eq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460389,"byte_end":9460411,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460412,"byte_end":9460415,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460416,"byte_end":9460432,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460433,"byte_end":9460440,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460441,"byte_end":9460464,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460465,"byte_end":9460516,"line_start":70,"line_end":70,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460517,"byte_end":9460568,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460569,"byte_end":9460614,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, u32::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460615,"byte_end":9460661,"line_start":73,"line_end":73,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460662,"byte_end":9460669,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460670,"byte_end":9460681,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460682,"byte_end":9460699,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461257,"byte_end":9461275,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"cmp_eq_mask_m128_s","qualname":"::x86_x64::sse::cmp_eq_mask_m128_s","value":"pub fn cmp_eq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460852,"byte_end":9460897,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460898,"byte_end":9460901,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460902,"byte_end":9460918,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460919,"byte_end":9460926,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460927,"byte_end":9460950,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9460951,"byte_end":9461002,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461003,"byte_end":9461054,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461055,"byte_end":9461102,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461103,"byte_end":9461156,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461157,"byte_end":9461164,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461165,"byte_end":9461176,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461177,"byte_end":9461194,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461729,"byte_end":9461745,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"cmp_ge_mask_m128","qualname":"::x86_x64::sse::cmp_ge_mask_m128","value":"pub fn cmp_ge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461349,"byte_end":9461371,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461372,"byte_end":9461375,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461376,"byte_end":9461392,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461393,"byte_end":9461400,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461401,"byte_end":9461424,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461425,"byte_end":9461476,"line_start":104,"line_end":104,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461477,"byte_end":9461528,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461529,"byte_end":9461574,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461575,"byte_end":9461628,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461629,"byte_end":9461636,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461637,"byte_end":9461648,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461649,"byte_end":9461666,"line_start":110,"line_end":110,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462252,"byte_end":9462270,"line_start":129,"line_end":129,"column_start":8,"column_end":26},"name":"cmp_ge_mask_m128_s","qualname":"::x86_x64::sse::cmp_ge_mask_m128_s","value":"pub fn cmp_ge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461819,"byte_end":9461864,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461865,"byte_end":9461868,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461869,"byte_end":9461885,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461886,"byte_end":9461893,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461894,"byte_end":9461917,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461918,"byte_end":9461969,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9461970,"byte_end":9462021,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462022,"byte_end":9462069,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462070,"byte_end":9462151,"line_start":124,"line_end":124,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462152,"byte_end":9462159,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462160,"byte_end":9462171,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462172,"byte_end":9462189,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462716,"byte_end":9462732,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"cmp_gt_mask_m128","qualname":"::x86_x64::sse::cmp_gt_mask_m128","value":"pub fn cmp_gt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462344,"byte_end":9462365,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462366,"byte_end":9462369,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462370,"byte_end":9462386,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462387,"byte_end":9462394,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462395,"byte_end":9462418,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462419,"byte_end":9462470,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462471,"byte_end":9462522,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462523,"byte_end":9462568,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462569,"byte_end":9462615,"line_start":141,"line_end":141,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462616,"byte_end":9462623,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462624,"byte_end":9462635,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462636,"byte_end":9462653,"line_start":144,"line_end":144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463238,"byte_end":9463256,"line_start":163,"line_end":163,"column_start":8,"column_end":26},"name":"cmp_gt_mask_m128_s","qualname":"::x86_x64::sse::cmp_gt_mask_m128_s","value":"pub fn cmp_gt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462806,"byte_end":9462850,"line_start":150,"line_end":150,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462851,"byte_end":9462854,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462855,"byte_end":9462871,"line_start":152,"line_end":152,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462872,"byte_end":9462879,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462880,"byte_end":9462903,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462904,"byte_end":9462955,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9462956,"byte_end":9463007,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463008,"byte_end":9463055,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463056,"byte_end":9463137,"line_start":158,"line_end":158,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463138,"byte_end":9463145,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463146,"byte_end":9463157,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463158,"byte_end":9463175,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463703,"byte_end":9463719,"line_start":180,"line_end":180,"column_start":8,"column_end":24},"name":"cmp_le_mask_m128","qualname":"::x86_x64::sse::cmp_le_mask_m128","value":"pub fn cmp_le_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463330,"byte_end":9463352,"line_start":167,"line_end":167,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463353,"byte_end":9463356,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463357,"byte_end":9463373,"line_start":169,"line_end":169,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463374,"byte_end":9463381,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463382,"byte_end":9463405,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463406,"byte_end":9463457,"line_start":172,"line_end":172,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463458,"byte_end":9463509,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463510,"byte_end":9463555,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463556,"byte_end":9463602,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463603,"byte_end":9463610,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463611,"byte_end":9463622,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463623,"byte_end":9463640,"line_start":178,"line_end":178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464226,"byte_end":9464244,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"cmp_le_mask_m128_s","qualname":"::x86_x64::sse::cmp_le_mask_m128_s","value":"pub fn cmp_le_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463793,"byte_end":9463838,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463839,"byte_end":9463842,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463843,"byte_end":9463859,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463860,"byte_end":9463867,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463868,"byte_end":9463891,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463892,"byte_end":9463943,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463944,"byte_end":9463995,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9463996,"byte_end":9464043,"line_start":191,"line_end":191,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464044,"byte_end":9464125,"line_start":192,"line_end":192,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464126,"byte_end":9464133,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464134,"byte_end":9464145,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464146,"byte_end":9464163,"line_start":195,"line_end":195,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464683,"byte_end":9464699,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"cmp_lt_mask_m128","qualname":"::x86_x64::sse::cmp_lt_mask_m128","value":"pub fn cmp_lt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464318,"byte_end":9464339,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464340,"byte_end":9464343,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464344,"byte_end":9464360,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464361,"byte_end":9464368,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464369,"byte_end":9464392,"line_start":205,"line_end":205,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464393,"byte_end":9464444,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464445,"byte_end":9464496,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464497,"byte_end":9464542,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464543,"byte_end":9464582,"line_start":209,"line_end":209,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464583,"byte_end":9464590,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464591,"byte_end":9464602,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464603,"byte_end":9464620,"line_start":212,"line_end":212,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465205,"byte_end":9465223,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"cmp_lt_mask_m128_s","qualname":"::x86_x64::sse::cmp_lt_mask_m128_s","value":"pub fn cmp_lt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464773,"byte_end":9464817,"line_start":218,"line_end":218,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464818,"byte_end":9464821,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464822,"byte_end":9464838,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464839,"byte_end":9464846,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464847,"byte_end":9464870,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464871,"byte_end":9464922,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464923,"byte_end":9464974,"line_start":224,"line_end":224,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9464975,"byte_end":9465022,"line_start":225,"line_end":225,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465023,"byte_end":9465104,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465105,"byte_end":9465112,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465113,"byte_end":9465124,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465125,"byte_end":9465142,"line_start":229,"line_end":229,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465671,"byte_end":9465688,"line_start":248,"line_end":248,"column_start":8,"column_end":25},"name":"cmp_neq_mask_m128","qualname":"::x86_x64::sse::cmp_neq_mask_m128","value":"pub fn cmp_neq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465297,"byte_end":9465319,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465320,"byte_end":9465323,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465324,"byte_end":9465340,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465341,"byte_end":9465348,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465349,"byte_end":9465372,"line_start":239,"line_end":239,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465373,"byte_end":9465424,"line_start":240,"line_end":240,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465425,"byte_end":9465476,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465477,"byte_end":9465523,"line_start":242,"line_end":242,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465524,"byte_end":9465570,"line_start":243,"line_end":243,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465571,"byte_end":9465578,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465579,"byte_end":9465590,"line_start":245,"line_end":245,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465591,"byte_end":9465608,"line_start":246,"line_end":246,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466162,"byte_end":9466181,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"cmp_neq_mask_m128_s","qualname":"::x86_x64::sse::cmp_neq_mask_m128_s","value":"pub fn cmp_neq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465763,"byte_end":9465808,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465809,"byte_end":9465812,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465813,"byte_end":9465829,"line_start":254,"line_end":254,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465830,"byte_end":9465837,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465838,"byte_end":9465861,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465862,"byte_end":9465913,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465914,"byte_end":9465965,"line_start":258,"line_end":258,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9465966,"byte_end":9466014,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466015,"byte_end":9466061,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466062,"byte_end":9466069,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466070,"byte_end":9466081,"line_start":262,"line_end":262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466082,"byte_end":9466099,"line_start":263,"line_end":263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466626,"byte_end":9466643,"line_start":282,"line_end":282,"column_start":8,"column_end":25},"name":"cmp_nge_mask_m128","qualname":"::x86_x64::sse::cmp_nge_mask_m128","value":"pub fn cmp_nge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466256,"byte_end":9466281,"line_start":269,"line_end":269,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466282,"byte_end":9466285,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466286,"byte_end":9466302,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466303,"byte_end":9466310,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466311,"byte_end":9466334,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466335,"byte_end":9466386,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466387,"byte_end":9466438,"line_start":275,"line_end":275,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466439,"byte_end":9466485,"line_start":276,"line_end":276,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466486,"byte_end":9466525,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466526,"byte_end":9466533,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466534,"byte_end":9466545,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466546,"byte_end":9466563,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467148,"byte_end":9467167,"line_start":299,"line_end":299,"column_start":8,"column_end":27},"name":"cmp_nge_mask_m128_s","qualname":"::x86_x64::sse::cmp_nge_mask_m128_s","value":"pub fn cmp_nge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466718,"byte_end":9466766,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466767,"byte_end":9466770,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466771,"byte_end":9466787,"line_start":288,"line_end":288,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466788,"byte_end":9466795,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466796,"byte_end":9466819,"line_start":290,"line_end":290,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466820,"byte_end":9466871,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466872,"byte_end":9466923,"line_start":292,"line_end":292,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466924,"byte_end":9466972,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9466973,"byte_end":9467047,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467048,"byte_end":9467055,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467056,"byte_end":9467067,"line_start":296,"line_end":296,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467068,"byte_end":9467085,"line_start":297,"line_end":297,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467618,"byte_end":9467635,"line_start":316,"line_end":316,"column_start":8,"column_end":25},"name":"cmp_ngt_mask_m128","qualname":"::x86_x64::sse::cmp_ngt_mask_m128","value":"pub fn cmp_ngt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467242,"byte_end":9467266,"line_start":303,"line_end":303,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467267,"byte_end":9467270,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467271,"byte_end":9467287,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467288,"byte_end":9467295,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467296,"byte_end":9467319,"line_start":307,"line_end":307,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467320,"byte_end":9467371,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467372,"byte_end":9467423,"line_start":309,"line_end":309,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467424,"byte_end":9467470,"line_start":310,"line_end":310,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467471,"byte_end":9467517,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467518,"byte_end":9467525,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467526,"byte_end":9467537,"line_start":313,"line_end":313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467538,"byte_end":9467555,"line_start":314,"line_end":314,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468139,"byte_end":9468158,"line_start":333,"line_end":333,"column_start":8,"column_end":27},"name":"cmp_ngt_mask_m128_s","qualname":"::x86_x64::sse::cmp_ngt_mask_m128_s","value":"pub fn cmp_ngt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467710,"byte_end":9467757,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467758,"byte_end":9467761,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467762,"byte_end":9467778,"line_start":322,"line_end":322,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467779,"byte_end":9467786,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467787,"byte_end":9467810,"line_start":324,"line_end":324,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467811,"byte_end":9467862,"line_start":325,"line_end":325,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467863,"byte_end":9467914,"line_start":326,"line_end":326,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467915,"byte_end":9467963,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9467964,"byte_end":9468038,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468039,"byte_end":9468046,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468047,"byte_end":9468058,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468059,"byte_end":9468076,"line_start":331,"line_end":331,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468610,"byte_end":9468627,"line_start":350,"line_end":350,"column_start":8,"column_end":25},"name":"cmp_nle_mask_m128","qualname":"::x86_x64::sse::cmp_nle_mask_m128","value":"pub fn cmp_nle_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468233,"byte_end":9468258,"line_start":337,"line_end":337,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468259,"byte_end":9468262,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468263,"byte_end":9468279,"line_start":339,"line_end":339,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468280,"byte_end":9468287,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468288,"byte_end":9468311,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468312,"byte_end":9468363,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468364,"byte_end":9468415,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468416,"byte_end":9468462,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468463,"byte_end":9468509,"line_start":345,"line_end":345,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468510,"byte_end":9468517,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468518,"byte_end":9468529,"line_start":347,"line_end":347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468530,"byte_end":9468547,"line_start":348,"line_end":348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469132,"byte_end":9469151,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"cmp_nle_mask_m128_s","qualname":"::x86_x64::sse::cmp_nle_mask_m128_s","value":"pub fn cmp_nle_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468702,"byte_end":9468750,"line_start":354,"line_end":354,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468751,"byte_end":9468754,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468755,"byte_end":9468771,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468772,"byte_end":9468779,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468780,"byte_end":9468803,"line_start":358,"line_end":358,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468804,"byte_end":9468855,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468856,"byte_end":9468907,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468908,"byte_end":9468956,"line_start":361,"line_end":361,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9468957,"byte_end":9469031,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469032,"byte_end":9469039,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469040,"byte_end":9469051,"line_start":364,"line_end":364,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469052,"byte_end":9469069,"line_start":365,"line_end":365,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469609,"byte_end":9469626,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"cmp_nlt_mask_m128","qualname":"::x86_x64::sse::cmp_nlt_mask_m128","value":"pub fn cmp_nlt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469226,"byte_end":9469250,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469251,"byte_end":9469254,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469255,"byte_end":9469271,"line_start":373,"line_end":373,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469272,"byte_end":9469279,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469280,"byte_end":9469303,"line_start":375,"line_end":375,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469304,"byte_end":9469355,"line_start":376,"line_end":376,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469356,"byte_end":9469407,"line_start":377,"line_end":377,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469408,"byte_end":9469454,"line_start":378,"line_end":378,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469455,"byte_end":9469508,"line_start":379,"line_end":379,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469509,"byte_end":9469516,"line_start":380,"line_end":380,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469517,"byte_end":9469528,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469529,"byte_end":9469546,"line_start":382,"line_end":382,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470130,"byte_end":9470149,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"cmp_nlt_mask_m128_s","qualname":"::x86_x64::sse::cmp_nlt_mask_m128_s","value":"pub fn cmp_nlt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469701,"byte_end":9469748,"line_start":388,"line_end":388,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469749,"byte_end":9469752,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469753,"byte_end":9469769,"line_start":390,"line_end":390,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469770,"byte_end":9469777,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469778,"byte_end":9469801,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469802,"byte_end":9469853,"line_start":393,"line_end":393,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469854,"byte_end":9469905,"line_start":394,"line_end":394,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469906,"byte_end":9469954,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9469955,"byte_end":9470029,"line_start":396,"line_end":396,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470030,"byte_end":9470037,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470038,"byte_end":9470049,"line_start":398,"line_end":398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470050,"byte_end":9470067,"line_start":399,"line_end":399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470638,"byte_end":9470659,"line_start":418,"line_end":418,"column_start":8,"column_end":29},"name":"cmp_ordered_mask_m128","qualname":"::x86_x64::sse::cmp_ordered_mask_m128","value":"pub fn cmp_ordered_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470224,"byte_end":9470269,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470270,"byte_end":9470273,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470274,"byte_end":9470290,"line_start":407,"line_end":407,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470291,"byte_end":9470298,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470299,"byte_end":9470322,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470323,"byte_end":9470384,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470385,"byte_end":9470446,"line_start":411,"line_end":411,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_ordered_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470447,"byte_end":9470497,"line_start":412,"line_end":412,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470498,"byte_end":9470537,"line_start":413,"line_end":413,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470538,"byte_end":9470545,"line_start":414,"line_end":414,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470546,"byte_end":9470557,"line_start":415,"line_end":415,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470558,"byte_end":9470575,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471210,"byte_end":9471233,"line_start":435,"line_end":435,"column_start":8,"column_end":31},"name":"cmp_ordered_mask_m128_s","qualname":"::x86_x64::sse::cmp_ordered_mask_m128_s","value":"pub fn cmp_ordered_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470734,"byte_end":9470802,"line_start":422,"line_end":422,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470803,"byte_end":9470806,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470807,"byte_end":9470823,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470824,"byte_end":9470831,"line_start":425,"line_end":425,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470832,"byte_end":9470855,"line_start":426,"line_end":426,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470856,"byte_end":9470907,"line_start":427,"line_end":427,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470908,"byte_end":9470974,"line_start":428,"line_end":428,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_ordered_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9470975,"byte_end":9471027,"line_start":429,"line_end":429,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471028,"byte_end":9471109,"line_start":430,"line_end":430,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471110,"byte_end":9471117,"line_start":431,"line_end":431,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471118,"byte_end":9471129,"line_start":432,"line_end":432,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471130,"byte_end":9471147,"line_start":433,"line_end":433,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471728,"byte_end":9471747,"line_start":452,"line_end":452,"column_start":8,"column_end":27},"name":"cmp_unord_mask_m128","qualname":"::x86_x64::sse::cmp_unord_mask_m128","value":"pub fn cmp_unord_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471308,"byte_end":9471347,"line_start":439,"line_end":439,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471348,"byte_end":9471351,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471352,"byte_end":9471368,"line_start":441,"line_end":441,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471369,"byte_end":9471376,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471377,"byte_end":9471400,"line_start":443,"line_end":443,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471401,"byte_end":9471462,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471463,"byte_end":9471524,"line_start":445,"line_end":445,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_unord_mask_m128(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471525,"byte_end":9471573,"line_start":446,"line_end":446,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471574,"byte_end":9471627,"line_start":447,"line_end":447,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471628,"byte_end":9471635,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471636,"byte_end":9471647,"line_start":449,"line_end":449,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471648,"byte_end":9471665,"line_start":450,"line_end":450,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472285,"byte_end":9472306,"line_start":469,"line_end":469,"column_start":8,"column_end":29},"name":"cmp_unord_mask_m128_s","qualname":"::x86_x64::sse::cmp_unord_mask_m128_s","value":"pub fn cmp_unord_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471824,"byte_end":9471886,"line_start":456,"line_end":456,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471887,"byte_end":9471890,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471891,"byte_end":9471907,"line_start":458,"line_end":458,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471908,"byte_end":9471915,"line_start":459,"line_end":459,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471916,"byte_end":9471939,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471940,"byte_end":9471991,"line_start":461,"line_end":461,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9471992,"byte_end":9472058,"line_start":462,"line_end":462,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_unord_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472059,"byte_end":9472109,"line_start":463,"line_end":463,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472110,"byte_end":9472184,"line_start":464,"line_end":464,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472185,"byte_end":9472192,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472193,"byte_end":9472204,"line_start":466,"line_end":466,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472205,"byte_end":9472222,"line_start":467,"line_end":467,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472712,"byte_end":9472729,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_i32_m128_s","qualname":"::x86_x64::sse::cmp_eq_i32_m128_s","value":"pub fn cmp_eq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane equality.","sig":null,"attributes":[{"value":"/ Low lane equality.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472383,"byte_end":9472405,"line_start":473,"line_end":473,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472406,"byte_end":9472409,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472410,"byte_end":9472427,"line_start":475,"line_end":475,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472428,"byte_end":9472435,"line_start":476,"line_end":476,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472436,"byte_end":9472459,"line_start":477,"line_end":477,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472460,"byte_end":9472511,"line_start":478,"line_end":478,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472512,"byte_end":9472563,"line_start":479,"line_end":479,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472564,"byte_end":9472611,"line_start":480,"line_end":480,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472612,"byte_end":9472619,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472620,"byte_end":9472631,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472632,"byte_end":9472649,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473142,"byte_end":9473159,"line_start":501,"line_end":501,"column_start":8,"column_end":25},"name":"cmp_ge_i32_m128_s","qualname":"::x86_x64::sse::cmp_ge_i32_m128_s","value":"pub fn cmp_ge_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane greater than or equal to.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472797,"byte_end":9472835,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472836,"byte_end":9472839,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472840,"byte_end":9472857,"line_start":491,"line_end":491,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472858,"byte_end":9472865,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472866,"byte_end":9472889,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472890,"byte_end":9472941,"line_start":494,"line_end":494,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472942,"byte_end":9472993,"line_start":495,"line_end":495,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9472994,"byte_end":9473041,"line_start":496,"line_end":496,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473042,"byte_end":9473049,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473050,"byte_end":9473061,"line_start":498,"line_end":498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473062,"byte_end":9473079,"line_start":499,"line_end":499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473560,"byte_end":9473577,"line_start":517,"line_end":517,"column_start":8,"column_end":25},"name":"cmp_gt_i32_m128_s","qualname":"::x86_x64::sse::cmp_gt_i32_m128_s","value":"pub fn cmp_gt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than.","sig":null,"attributes":[{"value":"/ Low lane greater than.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473227,"byte_end":9473253,"line_start":505,"line_end":505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473254,"byte_end":9473257,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473258,"byte_end":9473275,"line_start":507,"line_end":507,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473276,"byte_end":9473283,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473284,"byte_end":9473307,"line_start":509,"line_end":509,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473308,"byte_end":9473359,"line_start":510,"line_end":510,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473360,"byte_end":9473411,"line_start":511,"line_end":511,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_gt_i32_m128_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473412,"byte_end":9473459,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473460,"byte_end":9473467,"line_start":513,"line_end":513,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473468,"byte_end":9473479,"line_start":514,"line_end":514,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473480,"byte_end":9473497,"line_start":515,"line_end":515,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473987,"byte_end":9474004,"line_start":533,"line_end":533,"column_start":8,"column_end":25},"name":"cmp_le_i32_m128_s","qualname":"::x86_x64::sse::cmp_le_i32_m128_s","value":"pub fn cmp_le_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane less than or equal to.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473645,"byte_end":9473680,"line_start":521,"line_end":521,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473681,"byte_end":9473684,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473685,"byte_end":9473702,"line_start":523,"line_end":523,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473703,"byte_end":9473710,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473711,"byte_end":9473734,"line_start":525,"line_end":525,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473735,"byte_end":9473786,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473787,"byte_end":9473838,"line_start":527,"line_end":527,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473839,"byte_end":9473886,"line_start":528,"line_end":528,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473887,"byte_end":9473894,"line_start":529,"line_end":529,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473895,"byte_end":9473906,"line_start":530,"line_end":530,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9473907,"byte_end":9473924,"line_start":531,"line_end":531,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474402,"byte_end":9474419,"line_start":549,"line_end":549,"column_start":8,"column_end":25},"name":"cmp_lt_i32_m128_s","qualname":"::x86_x64::sse::cmp_lt_i32_m128_s","value":"pub fn cmp_lt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than.","sig":null,"attributes":[{"value":"/ Low lane less than.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474072,"byte_end":9474095,"line_start":537,"line_end":537,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474096,"byte_end":9474099,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474100,"byte_end":9474117,"line_start":539,"line_end":539,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474118,"byte_end":9474125,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474126,"byte_end":9474149,"line_start":541,"line_end":541,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474150,"byte_end":9474201,"line_start":542,"line_end":542,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474202,"byte_end":9474253,"line_start":543,"line_end":543,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474254,"byte_end":9474301,"line_start":544,"line_end":544,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474302,"byte_end":9474309,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474310,"byte_end":9474321,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474322,"byte_end":9474339,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":522},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474821,"byte_end":9474839,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"cmp_neq_i32_m128_s","qualname":"::x86_x64::sse::cmp_neq_i32_m128_s","value":"pub fn cmp_neq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane not equal to.","sig":null,"attributes":[{"value":"/ Low lane not equal to.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474487,"byte_end":9474513,"line_start":553,"line_end":553,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474514,"byte_end":9474517,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474518,"byte_end":9474535,"line_start":555,"line_end":555,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474536,"byte_end":9474543,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474544,"byte_end":9474567,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474568,"byte_end":9474619,"line_start":558,"line_end":558,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474620,"byte_end":9474671,"line_start":559,"line_end":559,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(0_i32, cmp_neq_i32_m128_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474672,"byte_end":9474720,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474721,"byte_end":9474728,"line_start":561,"line_end":561,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474729,"byte_end":9474740,"line_start":562,"line_end":562,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474741,"byte_end":9474758,"line_start":563,"line_end":563,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9475340,"byte_end":9475366,"line_start":581,"line_end":581,"column_start":8,"column_end":34},"name":"convert_i32_replace_m128_s","qualname":"::x86_x64::sse::convert_i32_replace_m128_s","value":"pub fn convert_i32_replace_m128_s(m128, i32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f32` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = convert_i32_replace_m128_s(a, 5_i32).to_array();\n assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_ss`]\n * **Assembly:** `cvtsi2ss xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f32` and replace the low lane of the input.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474908,"byte_end":9474973,"line_start":569,"line_end":569,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474974,"byte_end":9474981,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9474982,"byte_end":9475005,"line_start":571,"line_end":571,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9475006,"byte_end":9475057,"line_start":572,"line_end":572,"column_start":1,"column_end":52}},{"value":"/ let b = convert_i32_replace_m128_s(a, 5_i32).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9475058,"byte_end":9475118,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9475119,"byte_end":9475159,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9475160,"byte_end":9475167,"line_start":575,"line_end":575,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_ss`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9475168,"byte_end":9475207,"line_start":576,"line_end":576,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2ss xmm, r32`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9475208,"byte_end":9475247,"line_start":577,"line_end":577,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9475248,"byte_end":9475259,"line_start":578,"line_end":578,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9475260,"byte_end":9475277,"line_start":579,"line_end":579,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476277,"byte_end":9476296,"line_start":611,"line_end":611,"column_start":8,"column_end":27},"name":"get_f32_from_m128_s","qualname":"::x86_x64::sse::get_f32_from_m128_s","value":"pub fn get_f32_from_m128_s(m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the low lane as an individual `f32` value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_f32, get_f32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Gets the low lane as an individual `f32` value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9475994,"byte_end":9476045,"line_start":602,"line_end":602,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476046,"byte_end":9476053,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476054,"byte_end":9476077,"line_start":604,"line_end":604,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476078,"byte_end":9476129,"line_start":605,"line_end":605,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_f32, get_f32_from_m128_s(a));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476130,"byte_end":9476176,"line_start":606,"line_end":606,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476177,"byte_end":9476184,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476185,"byte_end":9476196,"line_start":608,"line_end":608,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476197,"byte_end":9476214,"line_start":609,"line_end":609,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476653,"byte_end":9476672,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"get_i32_from_m128_s","qualname":"::x86_x64::sse::get_i32_from_m128_s","value":"pub fn get_i32_from_m128_s(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the low lane to `i32` and extracts as an individual value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_i32, get_i32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Converts the low lane to `i32` and extracts as an individual value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476350,"byte_end":9476421,"line_start":615,"line_end":615,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476422,"byte_end":9476429,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476430,"byte_end":9476453,"line_start":617,"line_end":617,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476454,"byte_end":9476505,"line_start":618,"line_end":618,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, get_i32_from_m128_s(a));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476506,"byte_end":9476552,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476553,"byte_end":9476560,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476561,"byte_end":9476572,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9476573,"byte_end":9476590,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477472,"byte_end":9477480,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"div_m128","qualname":"::x86_x64::sse::div_m128","value":"pub fn div_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477129,"byte_end":9477150,"line_start":642,"line_end":642,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477151,"byte_end":9477158,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477159,"byte_end":9477182,"line_start":644,"line_end":644,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477183,"byte_end":9477238,"line_start":645,"line_end":645,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477239,"byte_end":9477291,"line_start":646,"line_end":646,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477292,"byte_end":9477330,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477331,"byte_end":9477371,"line_start":648,"line_end":648,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477372,"byte_end":9477379,"line_start":649,"line_end":649,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477380,"byte_end":9477391,"line_start":650,"line_end":650,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477392,"byte_end":9477409,"line_start":651,"line_end":651,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477923,"byte_end":9477933,"line_start":668,"line_end":668,"column_start":8,"column_end":18},"name":"div_m128_s","qualname":"::x86_x64::sse::div_m128_s","value":"pub fn div_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a / b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a / b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477552,"byte_end":9477596,"line_start":657,"line_end":657,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477597,"byte_end":9477604,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477605,"byte_end":9477628,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477629,"byte_end":9477684,"line_start":660,"line_end":660,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477685,"byte_end":9477737,"line_start":661,"line_end":661,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477738,"byte_end":9477778,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477779,"byte_end":9477822,"line_start":663,"line_end":663,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477823,"byte_end":9477830,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477831,"byte_end":9477842,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9477843,"byte_end":9477860,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478303,"byte_end":9478312,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"load_m128","qualname":"::x86_x64::sse::load_m128","value":"pub fn load_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_m128(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478005,"byte_end":9478045,"line_start":672,"line_end":672,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478046,"byte_end":9478053,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478054,"byte_end":9478077,"line_start":674,"line_end":674,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478078,"byte_end":9478133,"line_start":675,"line_end":675,"column_start":1,"column_end":56}},{"value":"/ let b = load_m128(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478134,"byte_end":9478160,"line_start":676,"line_end":676,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478161,"byte_end":9478202,"line_start":677,"line_end":677,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478203,"byte_end":9478210,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478211,"byte_end":9478222,"line_start":679,"line_end":679,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478223,"byte_end":9478240,"line_start":680,"line_end":680,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478769,"byte_end":9478788,"line_start":697,"line_end":697,"column_start":8,"column_end":27},"name":"load_f32_splat_m128","qualname":"::x86_x64::sse::load_f32_splat_m128","value":"pub fn load_f32_splat_m128(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_splat_m128(&a);\n assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into all lanes of a register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478399,"byte_end":9478458,"line_start":686,"line_end":686,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478459,"byte_end":9478466,"line_start":687,"line_end":687,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478467,"byte_end":9478490,"line_start":688,"line_end":688,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478491,"byte_end":9478507,"line_start":689,"line_end":689,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_splat_m128(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478508,"byte_end":9478544,"line_start":690,"line_end":690,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478545,"byte_end":9478623,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478624,"byte_end":9478631,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478632,"byte_end":9478643,"line_start":693,"line_end":693,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478644,"byte_end":9478661,"line_start":694,"line_end":694,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478662,"byte_end":9478706,"line_start":695,"line_end":695,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479277,"byte_end":9479292,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"load_f32_m128_s","qualname":"::x86_x64::sse::load_f32_m128_s","value":"pub fn load_f32_m128_s(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_m128_s(&a);\n assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into the low lane of the register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478906,"byte_end":9478970,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478971,"byte_end":9478978,"line_start":703,"line_end":703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9478979,"byte_end":9479002,"line_start":704,"line_end":704,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479003,"byte_end":9479019,"line_start":705,"line_end":705,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_m128_s(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479020,"byte_end":9479052,"line_start":706,"line_end":706,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479053,"byte_end":9479131,"line_start":707,"line_end":707,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479132,"byte_end":9479139,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479140,"byte_end":9479151,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479152,"byte_end":9479169,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479170,"byte_end":9479214,"line_start":711,"line_end":711,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479716,"byte_end":9479733,"line_start":727,"line_end":727,"column_start":8,"column_end":25},"name":"load_reverse_m128","qualname":"::x86_x64::sse::load_reverse_m128","value":"pub fn load_reverse_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_reverse_m128(&a);\n assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479349,"byte_end":9479409,"line_start":717,"line_end":717,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479410,"byte_end":9479417,"line_start":718,"line_end":718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479418,"byte_end":9479441,"line_start":719,"line_end":719,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479442,"byte_end":9479497,"line_start":720,"line_end":720,"column_start":1,"column_end":56}},{"value":"/ let b = load_reverse_m128(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479498,"byte_end":9479532,"line_start":721,"line_end":721,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479533,"byte_end":9479615,"line_start":722,"line_end":722,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479616,"byte_end":9479623,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479624,"byte_end":9479635,"line_start":724,"line_end":724,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479636,"byte_end":9479653,"line_start":725,"line_end":725,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":532},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480306,"byte_end":9480325,"line_start":745,"line_end":745,"column_start":8,"column_end":27},"name":"load_unaligned_m128","qualname":"::x86_x64::sse::load_unaligned_m128","value":"pub fn load_unaligned_m128(&[f32; ]) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479821,"byte_end":9479861,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479862,"byte_end":9479865,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479866,"byte_end":9479944,"line_start":733,"line_end":733,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9479945,"byte_end":9480025,"line_start":734,"line_end":734,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480026,"byte_end":9480038,"line_start":735,"line_end":735,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480039,"byte_end":9480046,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480047,"byte_end":9480070,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0, 13.0, 14.0];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480071,"byte_end":9480108,"line_start":738,"line_end":738,"column_start":1,"column_end":38}},{"value":"/ let b = load_unaligned_m128(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480109,"byte_end":9480145,"line_start":739,"line_end":739,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480146,"byte_end":9480205,"line_start":740,"line_end":740,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480206,"byte_end":9480213,"line_start":741,"line_end":741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480214,"byte_end":9480225,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480226,"byte_end":9480243,"line_start":743,"line_end":743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480765,"byte_end":9480773,"line_start":760,"line_end":760,"column_start":8,"column_end":16},"name":"max_m128","qualname":"::x86_x64::sse::max_m128","value":"pub fn max_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480421,"byte_end":9480446,"line_start":749,"line_end":749,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480447,"byte_end":9480454,"line_start":750,"line_end":750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480455,"byte_end":9480478,"line_start":751,"line_end":751,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480479,"byte_end":9480531,"line_start":752,"line_end":752,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480532,"byte_end":9480583,"line_start":753,"line_end":753,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480584,"byte_end":9480622,"line_start":754,"line_end":754,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480623,"byte_end":9480664,"line_start":755,"line_end":755,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480665,"byte_end":9480672,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480673,"byte_end":9480684,"line_start":757,"line_end":757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480685,"byte_end":9480702,"line_start":758,"line_end":758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481214,"byte_end":9481224,"line_start":775,"line_end":775,"column_start":8,"column_end":18},"name":"max_m128_s","qualname":"::x86_x64::sse::max_m128_s","value":"pub fn max_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480845,"byte_end":9480893,"line_start":764,"line_end":764,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480894,"byte_end":9480901,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480902,"byte_end":9480925,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480926,"byte_end":9480978,"line_start":767,"line_end":767,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9480979,"byte_end":9481030,"line_start":768,"line_end":768,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481031,"byte_end":9481071,"line_start":769,"line_end":769,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481072,"byte_end":9481113,"line_start":770,"line_end":770,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481114,"byte_end":9481121,"line_start":771,"line_end":771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481122,"byte_end":9481133,"line_start":772,"line_end":772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481134,"byte_end":9481151,"line_start":773,"line_end":773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481639,"byte_end":9481647,"line_start":790,"line_end":790,"column_start":8,"column_end":16},"name":"min_m128","qualname":"::x86_x64::sse::min_m128","value":"pub fn min_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = min_m128(a, b).to_array();\n assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481296,"byte_end":9481321,"line_start":779,"line_end":779,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481322,"byte_end":9481329,"line_start":780,"line_end":780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481330,"byte_end":9481353,"line_start":781,"line_end":781,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481354,"byte_end":9481406,"line_start":782,"line_end":782,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481407,"byte_end":9481458,"line_start":783,"line_end":783,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481459,"byte_end":9481497,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481498,"byte_end":9481538,"line_start":785,"line_end":785,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481539,"byte_end":9481546,"line_start":786,"line_end":786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481547,"byte_end":9481558,"line_start":787,"line_end":787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481559,"byte_end":9481576,"line_start":788,"line_end":788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482088,"byte_end":9482098,"line_start":805,"line_end":805,"column_start":8,"column_end":18},"name":"min_m128_s","qualname":"::x86_x64::sse::min_m128_s","value":"pub fn min_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);\n let c = min_m128_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481719,"byte_end":9481767,"line_start":794,"line_end":794,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481768,"byte_end":9481775,"line_start":795,"line_end":795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481776,"byte_end":9481799,"line_start":796,"line_end":796,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481800,"byte_end":9481852,"line_start":797,"line_end":797,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481853,"byte_end":9481904,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481905,"byte_end":9481945,"line_start":799,"line_end":799,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481946,"byte_end":9481987,"line_start":800,"line_end":800,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481988,"byte_end":9481995,"line_start":801,"line_end":801,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9481996,"byte_end":9482007,"line_start":802,"line_end":802,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482008,"byte_end":9482025,"line_start":803,"line_end":803,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482551,"byte_end":9482562,"line_start":820,"line_end":820,"column_start":8,"column_end":19},"name":"move_m128_s","qualname":"::x86_x64::sse::move_m128_s","value":"pub fn move_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lane of `b` to `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_m128_s(a, b).to_array();\n assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lane of `b` to `a`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482170,"byte_end":9482229,"line_start":809,"line_end":809,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482230,"byte_end":9482237,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482238,"byte_end":9482261,"line_start":811,"line_end":811,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482262,"byte_end":9482314,"line_start":812,"line_end":812,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482315,"byte_end":9482366,"line_start":813,"line_end":813,"column_start":1,"column_end":52}},{"value":"/ let c = move_m128_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482367,"byte_end":9482408,"line_start":814,"line_end":814,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482409,"byte_end":9482450,"line_start":815,"line_end":815,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482451,"byte_end":9482458,"line_start":816,"line_end":816,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482459,"byte_end":9482470,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482471,"byte_end":9482488,"line_start":818,"line_end":818,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483041,"byte_end":9483059,"line_start":835,"line_end":835,"column_start":8,"column_end":26},"name":"move_high_low_m128","qualname":"::x86_x64::sse::move_high_low_m128","value":"pub fn move_high_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_high_low_m128(a, b).to_array();\n assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482635,"byte_end":9482713,"line_start":824,"line_end":824,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482714,"byte_end":9482721,"line_start":825,"line_end":825,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482722,"byte_end":9482745,"line_start":826,"line_end":826,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482746,"byte_end":9482798,"line_start":827,"line_end":827,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482799,"byte_end":9482850,"line_start":828,"line_end":828,"column_start":1,"column_end":52}},{"value":"/ let c = move_high_low_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482851,"byte_end":9482899,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482900,"byte_end":9482940,"line_start":830,"line_end":830,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482941,"byte_end":9482948,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482949,"byte_end":9482960,"line_start":832,"line_end":832,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9482961,"byte_end":9482978,"line_start":833,"line_end":833,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483541,"byte_end":9483559,"line_start":850,"line_end":850,"column_start":8,"column_end":26},"name":"move_low_high_m128","qualname":"::x86_x64::sse::move_low_high_m128","value":"pub fn move_low_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_low_high_m128(a, b).to_array();\n assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483134,"byte_end":9483212,"line_start":839,"line_end":839,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483213,"byte_end":9483220,"line_start":840,"line_end":840,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483221,"byte_end":9483244,"line_start":841,"line_end":841,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483245,"byte_end":9483297,"line_start":842,"line_end":842,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483298,"byte_end":9483349,"line_start":843,"line_end":843,"column_start":1,"column_end":52}},{"value":"/ let c = move_low_high_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483350,"byte_end":9483398,"line_start":844,"line_end":844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483399,"byte_end":9483440,"line_start":845,"line_end":845,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483441,"byte_end":9483448,"line_start":846,"line_end":846,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483449,"byte_end":9483460,"line_start":847,"line_end":847,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483461,"byte_end":9483478,"line_start":848,"line_end":848,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483987,"byte_end":9484001,"line_start":866,"line_end":866,"column_start":8,"column_end":22},"name":"move_mask_m128","qualname":"::x86_x64::sse::move_mask_m128","value":"pub fn move_mask_m128(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483634,"byte_end":9483672,"line_start":854,"line_end":854,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483673,"byte_end":9483676,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483677,"byte_end":9483740,"line_start":856,"line_end":856,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483741,"byte_end":9483748,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483749,"byte_end":9483772,"line_start":858,"line_end":858,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([-1.0, 12.0, -3.0, -4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483773,"byte_end":9483828,"line_start":859,"line_end":859,"column_start":1,"column_end":56}},{"value":"/ let i = move_mask_m128(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483829,"byte_end":9483859,"line_start":860,"line_end":860,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(i, 0b1101);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483860,"byte_end":9483886,"line_start":861,"line_end":861,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483887,"byte_end":9483894,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483895,"byte_end":9483906,"line_start":863,"line_end":863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9483907,"byte_end":9483924,"line_start":864,"line_end":864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484398,"byte_end":9484406,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"mul_m128","qualname":"::x86_x64::sse::mul_m128","value":"pub fn mul_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484057,"byte_end":9484078,"line_start":870,"line_end":870,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484079,"byte_end":9484086,"line_start":871,"line_end":871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484087,"byte_end":9484110,"line_start":872,"line_end":872,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484111,"byte_end":9484162,"line_start":873,"line_end":873,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484163,"byte_end":9484214,"line_start":874,"line_end":874,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484215,"byte_end":9484253,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484254,"byte_end":9484297,"line_start":876,"line_end":876,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484298,"byte_end":9484305,"line_start":877,"line_end":877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484306,"byte_end":9484317,"line_start":878,"line_end":878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484318,"byte_end":9484335,"line_start":879,"line_end":879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484841,"byte_end":9484851,"line_start":896,"line_end":896,"column_start":8,"column_end":18},"name":"mul_m128_s","qualname":"::x86_x64::sse::mul_m128_s","value":"pub fn mul_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a * b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a * b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484478,"byte_end":9484522,"line_start":885,"line_end":885,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484523,"byte_end":9484530,"line_start":886,"line_end":886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484531,"byte_end":9484554,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484555,"byte_end":9484606,"line_start":888,"line_end":888,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484607,"byte_end":9484658,"line_start":889,"line_end":889,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484659,"byte_end":9484699,"line_start":890,"line_end":890,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484700,"byte_end":9484740,"line_start":891,"line_end":891,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484741,"byte_end":9484748,"line_start":892,"line_end":892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484749,"byte_end":9484760,"line_start":893,"line_end":893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484761,"byte_end":9484778,"line_start":894,"line_end":894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485262,"byte_end":9485272,"line_start":911,"line_end":911,"column_start":8,"column_end":18},"name":"bitor_m128","qualname":"::x86_x64::sse::bitor_m128","value":"pub fn bitor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitor_m128(a, b).to_array();\n assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484923,"byte_end":9484943,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484944,"byte_end":9484951,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484952,"byte_end":9484975,"line_start":902,"line_end":902,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9484976,"byte_end":9485027,"line_start":903,"line_end":903,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485028,"byte_end":9485079,"line_start":904,"line_end":904,"column_start":1,"column_end":52}},{"value":"/ let c = bitor_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485080,"byte_end":9485120,"line_start":905,"line_end":905,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485121,"byte_end":9485161,"line_start":906,"line_end":906,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485162,"byte_end":9485169,"line_start":907,"line_end":907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485170,"byte_end":9485181,"line_start":908,"line_end":908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485182,"byte_end":9485199,"line_start":909,"line_end":909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485729,"byte_end":9485744,"line_start":928,"line_end":928,"column_start":8,"column_end":23},"name":"reciprocal_m128","qualname":"::x86_x64::sse::reciprocal_m128","value":"pub fn reciprocal_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / a` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128(a).to_array();\n let expected = [1.0, 0.5, 0.25, 0.125];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / a` approximation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485343,"byte_end":9485380,"line_start":915,"line_end":915,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485381,"byte_end":9485388,"line_start":916,"line_end":916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485389,"byte_end":9485412,"line_start":917,"line_end":917,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485413,"byte_end":9485464,"line_start":918,"line_end":918,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128(a).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485465,"byte_end":9485507,"line_start":919,"line_end":919,"column_start":1,"column_end":43}},{"value":"/ let expected = [1.0, 0.5, 0.25, 0.125];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485508,"byte_end":9485551,"line_start":920,"line_end":920,"column_start":1,"column_end":44}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485552,"byte_end":9485571,"line_start":921,"line_end":921,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485572,"byte_end":9485622,"line_start":922,"line_end":922,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485623,"byte_end":9485628,"line_start":923,"line_end":923,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485629,"byte_end":9485636,"line_start":924,"line_end":924,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485637,"byte_end":9485648,"line_start":925,"line_end":925,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485649,"byte_end":9485666,"line_start":926,"line_end":926,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486210,"byte_end":9486227,"line_start":945,"line_end":945,"column_start":8,"column_end":25},"name":"reciprocal_m128_s","qualname":"::x86_x64::sse::reciprocal_m128_s","value":"pub fn reciprocal_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / a` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128_s(a).to_array();\n let expected = [1.0, 2.0, 4.0, 8.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / a` approximation, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485802,"byte_end":9485862,"line_start":932,"line_end":932,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485863,"byte_end":9485870,"line_start":933,"line_end":933,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485871,"byte_end":9485894,"line_start":934,"line_end":934,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485895,"byte_end":9485946,"line_start":935,"line_end":935,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128_s(a).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485947,"byte_end":9485991,"line_start":936,"line_end":936,"column_start":1,"column_end":45}},{"value":"/ let expected = [1.0, 2.0, 4.0, 8.0];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9485992,"byte_end":9486032,"line_start":937,"line_end":937,"column_start":1,"column_end":41}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486033,"byte_end":9486052,"line_start":938,"line_end":938,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486053,"byte_end":9486103,"line_start":939,"line_end":939,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486104,"byte_end":9486109,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486110,"byte_end":9486117,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486118,"byte_end":9486129,"line_start":942,"line_end":942,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486130,"byte_end":9486147,"line_start":943,"line_end":943,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486686,"byte_end":9486706,"line_start":962,"line_end":962,"column_start":8,"column_end":28},"name":"reciprocal_sqrt_m128","qualname":"::x86_x64::sse::reciprocal_sqrt_m128","value":"pub fn reciprocal_sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / sqrt(a)` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);\n let b = reciprocal_sqrt_m128(a).to_array();\n let expected = [0.25, 0.33333, 0.5, 0.2];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / sqrt(a)` approximation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486285,"byte_end":9486328,"line_start":949,"line_end":949,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486329,"byte_end":9486336,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486337,"byte_end":9486360,"line_start":951,"line_end":951,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486361,"byte_end":9486414,"line_start":952,"line_end":952,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128(a).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486415,"byte_end":9486462,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let expected = [0.25, 0.33333, 0.5, 0.2];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486463,"byte_end":9486508,"line_start":954,"line_end":954,"column_start":1,"column_end":46}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486509,"byte_end":9486528,"line_start":955,"line_end":955,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486529,"byte_end":9486579,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486580,"byte_end":9486585,"line_start":957,"line_end":957,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486586,"byte_end":9486593,"line_start":958,"line_end":958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486594,"byte_end":9486605,"line_start":959,"line_end":959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486606,"byte_end":9486623,"line_start":960,"line_end":960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487189,"byte_end":9487211,"line_start":979,"line_end":979,"column_start":8,"column_end":30},"name":"reciprocal_sqrt_m128_s","qualname":"::x86_x64::sse::reciprocal_sqrt_m128_s","value":"pub fn reciprocal_sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);\n let b = reciprocal_sqrt_m128_s(a).to_array();\n let expected = [0.25, 8.0, 9.0, 10.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486766,"byte_end":9486832,"line_start":966,"line_end":966,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486833,"byte_end":9486840,"line_start":967,"line_end":967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486841,"byte_end":9486864,"line_start":968,"line_end":968,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486865,"byte_end":9486918,"line_start":969,"line_end":969,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128_s(a).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486919,"byte_end":9486968,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ let expected = [0.25, 8.0, 9.0, 10.0];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9486969,"byte_end":9487011,"line_start":971,"line_end":971,"column_start":1,"column_end":43}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487012,"byte_end":9487031,"line_start":972,"line_end":972,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487032,"byte_end":9487082,"line_start":973,"line_end":973,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487083,"byte_end":9487088,"line_start":974,"line_end":974,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487089,"byte_end":9487096,"line_start":975,"line_end":975,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487097,"byte_end":9487108,"line_start":976,"line_end":976,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487109,"byte_end":9487126,"line_start":977,"line_end":977,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487603,"byte_end":9487611,"line_start":993,"line_end":993,"column_start":8,"column_end":16},"name":"set_m128","qualname":"::x86_x64::sse::set_m128","value":"pub fn set_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487271,"byte_end":9487332,"line_start":983,"line_end":983,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487333,"byte_end":9487340,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487341,"byte_end":9487364,"line_start":985,"line_end":985,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487365,"byte_end":9487417,"line_start":986,"line_end":986,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487418,"byte_end":9487480,"line_start":987,"line_end":987,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487481,"byte_end":9487502,"line_start":988,"line_end":988,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487503,"byte_end":9487510,"line_start":989,"line_end":989,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487511,"byte_end":9487522,"line_start":990,"line_end":990,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487523,"byte_end":9487540,"line_start":991,"line_end":991,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488040,"byte_end":9488050,"line_start":1007,"line_end":1007,"column_start":8,"column_end":18},"name":"set_m128_s","qualname":"::x86_x64::sse::set_m128_s","value":"pub fn set_m128_s(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128_s(1.0).to_array();\n let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487721,"byte_end":9487782,"line_start":997,"line_end":997,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487783,"byte_end":9487790,"line_start":998,"line_end":998,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487791,"byte_end":9487814,"line_start":999,"line_end":999,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128_s(1.0).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487815,"byte_end":9487854,"line_start":1000,"line_end":1000,"column_start":1,"column_end":40}},{"value":"/ let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487855,"byte_end":9487917,"line_start":1001,"line_end":1001,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487918,"byte_end":9487939,"line_start":1002,"line_end":1002,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487940,"byte_end":9487947,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487948,"byte_end":9487959,"line_start":1004,"line_end":1004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9487960,"byte_end":9487977,"line_start":1005,"line_end":1005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488405,"byte_end":9488419,"line_start":1021,"line_end":1021,"column_start":8,"column_end":22},"name":"set_splat_m128","qualname":"::x86_x64::sse::set_splat_m128","value":"pub fn set_splat_m128(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Splats the value to all lanes.\n ```\n # use safe_arch::*;\n let a = set_splat_m128(1.0).to_array();\n let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Splats the value to all lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488109,"byte_end":9488143,"line_start":1011,"line_end":1011,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488144,"byte_end":9488151,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488152,"byte_end":9488175,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = set_splat_m128(1.0).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488176,"byte_end":9488219,"line_start":1014,"line_end":1014,"column_start":1,"column_end":44}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488220,"byte_end":9488282,"line_start":1015,"line_end":1015,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488283,"byte_end":9488304,"line_start":1016,"line_end":1016,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488305,"byte_end":9488312,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488313,"byte_end":9488324,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488325,"byte_end":9488342,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488819,"byte_end":9488836,"line_start":1035,"line_end":1035,"column_start":8,"column_end":25},"name":"set_reversed_m128","qualname":"::x86_x64::sse::set_reversed_m128","value":"pub fn set_reversed_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the low lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488479,"byte_end":9488539,"line_start":1025,"line_end":1025,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488540,"byte_end":9488547,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488548,"byte_end":9488571,"line_start":1027,"line_end":1027,"column_start":1,"column_end":24}},{"value":"/ let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488572,"byte_end":9488633,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488634,"byte_end":9488696,"line_start":1029,"line_end":1029,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488697,"byte_end":9488718,"line_start":1030,"line_end":1030,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488719,"byte_end":9488726,"line_start":1031,"line_end":1031,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488727,"byte_end":9488738,"line_start":1032,"line_end":1032,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488739,"byte_end":9488756,"line_start":1033,"line_end":1033,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489178,"byte_end":9489189,"line_start":1048,"line_end":1048,"column_start":8,"column_end":19},"name":"zeroed_m128","qualname":"::x86_x64::sse::zeroed_m128","value":"pub fn zeroed_m128() -> m128","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128().to_array();\n assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488947,"byte_end":9488966,"line_start":1039,"line_end":1039,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488967,"byte_end":9488974,"line_start":1040,"line_end":1040,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488975,"byte_end":9488998,"line_start":1041,"line_end":1041,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128().to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9488999,"byte_end":9489036,"line_start":1042,"line_end":1042,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489037,"byte_end":9489077,"line_start":1043,"line_end":1043,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489078,"byte_end":9489085,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489086,"byte_end":9489097,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489098,"byte_end":9489115,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490483,"byte_end":9490507,"line_start":1081,"line_end":1081,"column_start":8,"column_end":32},"name":"shuffle_abi_f32_all_m128","qualname":"::x86_x64::sse::shuffle_abi_f32_all_m128","value":"pub fn shuffle_abi_f32_all_m128<const MASK: i32>(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `f32` lanes from `$a` and `$b` together using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `f32` lanes from `$a` and `$b` together using an immediate","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489241,"byte_end":9489315,"line_start":1052,"line_end":1052,"column_start":1,"column_end":75}},{"value":"/ control value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489316,"byte_end":9489334,"line_start":1053,"line_end":1053,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489335,"byte_end":9489338,"line_start":1054,"line_end":1054,"column_start":1,"column_end":4}},{"value":"/ The `a:` and `b:` prefixes on the index selection values are literal tokens","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489339,"byte_end":9489418,"line_start":1055,"line_end":1055,"column_start":1,"column_end":80}},{"value":"/ that you type. It helps keep clear what value comes from where. The first","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489419,"byte_end":9489496,"line_start":1056,"line_end":1056,"column_start":1,"column_end":78}},{"value":"/ two output lanes come from `$a`, the second two output lanes come from `$b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489497,"byte_end":9489577,"line_start":1057,"line_end":1057,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489578,"byte_end":9489581,"line_start":1058,"line_end":1058,"column_start":1,"column_end":4}},{"value":"/ You can pass the same value as both arguments, but if you want to swizzle","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489582,"byte_end":9489659,"line_start":1059,"line_end":1059,"column_start":1,"column_end":78}},{"value":"/ within only a single register and you have `avx` available consider using","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489660,"byte_end":9489737,"line_start":1060,"line_end":1060,"column_start":1,"column_end":78}},{"value":"/ [`shuffle_ai_f32_all_m128`] instead. You'll get much better performance.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489738,"byte_end":9489814,"line_start":1061,"line_end":1061,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489815,"byte_end":9489822,"line_start":1062,"line_end":1062,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489823,"byte_end":9489846,"line_start":1063,"line_end":1063,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489847,"byte_end":9489898,"line_start":1064,"line_end":1064,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489899,"byte_end":9489950,"line_start":1065,"line_end":1065,"column_start":1,"column_end":52}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489951,"byte_end":9489957,"line_start":1066,"line_end":1066,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0>(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9489958,"byte_end":9490017,"line_start":1067,"line_end":1067,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1.0, 1.0, 5.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490018,"byte_end":9490058,"line_start":1068,"line_end":1068,"column_start":1,"column_end":41}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490059,"byte_end":9490065,"line_start":1069,"line_end":1069,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0b11_10_01_00>(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490066,"byte_end":9490137,"line_start":1070,"line_end":1070,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [1.0, 2.0, 7.0, 8.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490138,"byte_end":9490178,"line_start":1071,"line_end":1071,"column_start":1,"column_end":41}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490179,"byte_end":9490185,"line_start":1072,"line_end":1072,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0b00_10_10_01>(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490186,"byte_end":9490257,"line_start":1073,"line_end":1073,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [2.0, 3.0, 7.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490258,"byte_end":9490298,"line_start":1074,"line_end":1074,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490299,"byte_end":9490306,"line_start":1075,"line_end":1075,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_ps`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490307,"byte_end":9490346,"line_start":1076,"line_end":1076,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `shufps xmm, xmm, imm8`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490347,"byte_end":9490390,"line_start":1077,"line_end":1077,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490391,"byte_end":9490402,"line_start":1078,"line_end":1078,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490403,"byte_end":9490420,"line_start":1079,"line_end":1079,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490894,"byte_end":9490903,"line_start":1095,"line_end":1095,"column_start":8,"column_end":17},"name":"sqrt_m128","qualname":"::x86_x64::sse::sqrt_m128","value":"pub fn sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);\n let b = sqrt_m128(a).to_array();\n assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490606,"byte_end":9490629,"line_start":1085,"line_end":1085,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490630,"byte_end":9490637,"line_start":1086,"line_end":1086,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490638,"byte_end":9490661,"line_start":1087,"line_end":1087,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490662,"byte_end":9490715,"line_start":1088,"line_end":1088,"column_start":1,"column_end":54}},{"value":"/ let b = sqrt_m128(a).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490716,"byte_end":9490752,"line_start":1089,"line_end":1089,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490753,"byte_end":9490793,"line_start":1090,"line_end":1090,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490794,"byte_end":9490801,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490802,"byte_end":9490813,"line_start":1092,"line_end":1092,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490814,"byte_end":9490831,"line_start":1093,"line_end":1093,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491273,"byte_end":9491284,"line_start":1109,"line_end":1109,"column_start":8,"column_end":19},"name":"sqrt_m128_s","qualname":"::x86_x64::sse::sqrt_m128_s","value":"pub fn sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(a)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);\n let b = sqrt_m128_s(a).to_array();\n assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(a)`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9490962,"byte_end":9491008,"line_start":1099,"line_end":1099,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491009,"byte_end":9491016,"line_start":1100,"line_end":1100,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491017,"byte_end":9491040,"line_start":1101,"line_end":1101,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491041,"byte_end":9491092,"line_start":1102,"line_end":1102,"column_start":1,"column_end":52}},{"value":"/ let b = sqrt_m128_s(a).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491093,"byte_end":9491131,"line_start":1103,"line_end":1103,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491132,"byte_end":9491172,"line_start":1104,"line_end":1104,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491173,"byte_end":9491180,"line_start":1105,"line_end":1105,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491181,"byte_end":9491192,"line_start":1106,"line_end":1106,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491193,"byte_end":9491210,"line_start":1107,"line_end":1107,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491693,"byte_end":9491703,"line_start":1124,"line_end":1124,"column_start":8,"column_end":18},"name":"store_m128","qualname":"::x86_x64::sse::store_m128","value":"pub fn store_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491343,"byte_end":9491387,"line_start":1113,"line_end":1113,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491388,"byte_end":9491395,"line_start":1114,"line_end":1114,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491396,"byte_end":9491419,"line_start":1115,"line_end":1115,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491420,"byte_end":9491475,"line_start":1116,"line_end":1116,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491476,"byte_end":9491506,"line_start":1117,"line_end":1117,"column_start":1,"column_end":31}},{"value":"/ store_m128(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491507,"byte_end":9491533,"line_start":1118,"line_end":1118,"column_start":1,"column_end":27}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491534,"byte_end":9491559,"line_start":1119,"line_end":1119,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491560,"byte_end":9491604,"line_start":1120,"line_end":1120,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491605,"byte_end":9491612,"line_start":1121,"line_end":1121,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491613,"byte_end":9491630,"line_start":1122,"line_end":1122,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492096,"byte_end":9492108,"line_start":1138,"line_end":1138,"column_start":8,"column_end":20},"name":"store_m128_s","qualname":"::x86_x64::sse::store_m128_s","value":"pub fn store_m128_s(&mut f32, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut f = 0.0;\n store_m128_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491791,"byte_end":9491844,"line_start":1128,"line_end":1128,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491845,"byte_end":9491852,"line_start":1129,"line_end":1129,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491853,"byte_end":9491876,"line_start":1130,"line_end":1130,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491877,"byte_end":9491932,"line_start":1131,"line_end":1131,"column_start":1,"column_end":56}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491933,"byte_end":9491953,"line_start":1132,"line_end":1132,"column_start":1,"column_end":21}},{"value":"/ store_m128_s(&mut f, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491954,"byte_end":9491982,"line_start":1133,"line_end":1133,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9491983,"byte_end":9492007,"line_start":1134,"line_end":1134,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492008,"byte_end":9492015,"line_start":1135,"line_end":1135,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492016,"byte_end":9492033,"line_start":1136,"line_end":1136,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492560,"byte_end":9492576,"line_start":1153,"line_end":1153,"column_start":8,"column_end":24},"name":"store_splat_m128","qualname":"::x86_x64::sse::store_splat_m128","value":"pub fn store_splat_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_splat_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492182,"byte_end":9492248,"line_start":1142,"line_end":1142,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492249,"byte_end":9492256,"line_start":1143,"line_end":1143,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492257,"byte_end":9492280,"line_start":1144,"line_end":1144,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492281,"byte_end":9492336,"line_start":1145,"line_end":1145,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492337,"byte_end":9492367,"line_start":1146,"line_end":1146,"column_start":1,"column_end":31}},{"value":"/ store_splat_m128(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492368,"byte_end":9492400,"line_start":1147,"line_end":1147,"column_start":1,"column_end":33}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492401,"byte_end":9492426,"line_start":1148,"line_end":1148,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492427,"byte_end":9492471,"line_start":1149,"line_end":1149,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492472,"byte_end":9492479,"line_start":1150,"line_end":1150,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492480,"byte_end":9492497,"line_start":1151,"line_end":1151,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493040,"byte_end":9493058,"line_start":1168,"line_end":1168,"column_start":8,"column_end":26},"name":"store_reverse_m128","qualname":"::x86_x64::sse::store_reverse_m128","value":"pub fn store_reverse_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given in reverse order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_reverse_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given in reverse order.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492665,"byte_end":9492726,"line_start":1157,"line_end":1157,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492727,"byte_end":9492734,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492735,"byte_end":9492758,"line_start":1159,"line_end":1159,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492759,"byte_end":9492814,"line_start":1160,"line_end":1160,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492815,"byte_end":9492845,"line_start":1161,"line_end":1161,"column_start":1,"column_end":31}},{"value":"/ store_reverse_m128(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492846,"byte_end":9492880,"line_start":1162,"line_end":1162,"column_start":1,"column_end":35}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492881,"byte_end":9492906,"line_start":1163,"line_end":1163,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492907,"byte_end":9492951,"line_start":1164,"line_end":1164,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492952,"byte_end":9492959,"line_start":1165,"line_end":1165,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9492960,"byte_end":9492977,"line_start":1166,"line_end":1166,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493653,"byte_end":9493673,"line_start":1186,"line_end":1186,"column_start":8,"column_end":28},"name":"store_unaligned_m128","qualname":"::x86_x64::sse::store_unaligned_m128","value":"pub fn store_unaligned_m128(&mut [f32; ], m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493147,"byte_end":9493191,"line_start":1172,"line_end":1172,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493192,"byte_end":9493195,"line_start":1173,"line_end":1173,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493196,"byte_end":9493274,"line_start":1174,"line_end":1174,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493275,"byte_end":9493355,"line_start":1175,"line_end":1175,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493356,"byte_end":9493368,"line_start":1176,"line_end":1176,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493369,"byte_end":9493376,"line_start":1177,"line_end":1177,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493377,"byte_end":9493400,"line_start":1178,"line_end":1178,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493401,"byte_end":9493456,"line_start":1179,"line_end":1179,"column_start":1,"column_end":56}},{"value":"/ let mut b = [0.0; 4];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493457,"byte_end":9493482,"line_start":1180,"line_end":1180,"column_start":1,"column_end":26}},{"value":"/ store_unaligned_m128(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493483,"byte_end":9493519,"line_start":1181,"line_end":1181,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493520,"byte_end":9493564,"line_start":1182,"line_end":1182,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493565,"byte_end":9493572,"line_start":1183,"line_end":1183,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493573,"byte_end":9493590,"line_start":1184,"line_end":1184,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494096,"byte_end":9494104,"line_start":1201,"line_end":1201,"column_start":8,"column_end":16},"name":"sub_m128","qualname":"::x86_x64::sse::sub_m128","value":"pub fn sub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128(a, b).to_array();\n assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493754,"byte_end":9493775,"line_start":1190,"line_end":1190,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493776,"byte_end":9493783,"line_start":1191,"line_end":1191,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493784,"byte_end":9493807,"line_start":1192,"line_end":1192,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493808,"byte_end":9493859,"line_start":1193,"line_end":1193,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493860,"byte_end":9493912,"line_start":1194,"line_end":1194,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493913,"byte_end":9493951,"line_start":1195,"line_end":1195,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493952,"byte_end":9493995,"line_start":1196,"line_end":1196,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9493996,"byte_end":9494003,"line_start":1197,"line_end":1197,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494004,"byte_end":9494015,"line_start":1198,"line_end":1198,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494016,"byte_end":9494033,"line_start":1199,"line_end":1199,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494541,"byte_end":9494551,"line_start":1216,"line_end":1216,"column_start":8,"column_end":18},"name":"sub_m128_s","qualname":"::x86_x64::sse::sub_m128_s","value":"pub fn sub_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a - b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128_s(a, b).to_array();\n assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a - b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494176,"byte_end":9494220,"line_start":1205,"line_end":1205,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494221,"byte_end":9494228,"line_start":1206,"line_end":1206,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494229,"byte_end":9494252,"line_start":1207,"line_end":1207,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494253,"byte_end":9494304,"line_start":1208,"line_end":1208,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494305,"byte_end":9494357,"line_start":1209,"line_end":1209,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494358,"byte_end":9494398,"line_start":1210,"line_end":1210,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494399,"byte_end":9494440,"line_start":1211,"line_end":1211,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494441,"byte_end":9494448,"line_start":1212,"line_end":1212,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494449,"byte_end":9494460,"line_start":1213,"line_end":1213,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494461,"byte_end":9494478,"line_start":1214,"line_end":1214,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495302,"byte_end":9495321,"line_start":1235,"line_end":1235,"column_start":8,"column_end":27},"name":"transpose_four_m128","qualname":"::x86_x64::sse::transpose_four_m128","value":"pub fn transpose_four_m128(&mut m128, &mut m128, &mut m128, &mut m128)","parent":null,"children":[],"decl_id":null,"docs":" Transpose four `m128` as if they were a 4x4 matrix.\n ```\n # use safe_arch::*;\n let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);\n let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);\n transpose_four_m128(&mut a, &mut b, &mut c, &mut d);\n assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);\n assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);\n assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);\n assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Transpose four `m128` as if they were a 4x4 matrix.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494623,"byte_end":9494678,"line_start":1220,"line_end":1220,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494679,"byte_end":9494686,"line_start":1221,"line_end":1221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494687,"byte_end":9494710,"line_start":1222,"line_end":1222,"column_start":1,"column_end":24}},{"value":"/ let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494711,"byte_end":9494766,"line_start":1223,"line_end":1223,"column_start":1,"column_end":56}},{"value":"/ let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494767,"byte_end":9494822,"line_start":1224,"line_end":1224,"column_start":1,"column_end":56}},{"value":"/ let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494823,"byte_end":9494881,"line_start":1225,"line_end":1225,"column_start":1,"column_end":59}},{"value":"/ let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494882,"byte_end":9494941,"line_start":1226,"line_end":1226,"column_start":1,"column_end":60}},{"value":"/ transpose_four_m128(&mut a, &mut b, &mut c, &mut d);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494942,"byte_end":9494998,"line_start":1227,"line_end":1227,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9494999,"byte_end":9495051,"line_start":1228,"line_end":1228,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495052,"byte_end":9495105,"line_start":1229,"line_end":1229,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495106,"byte_end":9495159,"line_start":1230,"line_end":1230,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495160,"byte_end":9495213,"line_start":1231,"line_end":1231,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495214,"byte_end":9495221,"line_start":1232,"line_end":1232,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495222,"byte_end":9495239,"line_start":1233,"line_end":1233,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495831,"byte_end":9495847,"line_start":1250,"line_end":1250,"column_start":8,"column_end":24},"name":"unpack_high_m128","qualname":"::x86_x64::sse::unpack_high_m128","value":"pub fn unpack_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_high_m128(a, b).to_array();\n assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495454,"byte_end":9495506,"line_start":1239,"line_end":1239,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495507,"byte_end":9495514,"line_start":1240,"line_end":1240,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495515,"byte_end":9495538,"line_start":1241,"line_end":1241,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495539,"byte_end":9495590,"line_start":1242,"line_end":1242,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495591,"byte_end":9495642,"line_start":1243,"line_end":1243,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_high_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495643,"byte_end":9495689,"line_start":1244,"line_end":1244,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495690,"byte_end":9495730,"line_start":1245,"line_end":1245,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495731,"byte_end":9495738,"line_start":1246,"line_end":1246,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495739,"byte_end":9495750,"line_start":1247,"line_end":1247,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495751,"byte_end":9495768,"line_start":1248,"line_end":1248,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496299,"byte_end":9496314,"line_start":1265,"line_end":1265,"column_start":8,"column_end":23},"name":"unpack_low_m128","qualname":"::x86_x64::sse::unpack_low_m128","value":"pub fn unpack_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_low_m128(a, b).to_array();\n assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495924,"byte_end":9495975,"line_start":1254,"line_end":1254,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495976,"byte_end":9495983,"line_start":1255,"line_end":1255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9495984,"byte_end":9496007,"line_start":1256,"line_end":1256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496008,"byte_end":9496059,"line_start":1257,"line_end":1257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496060,"byte_end":9496111,"line_start":1258,"line_end":1258,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_low_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496112,"byte_end":9496157,"line_start":1259,"line_end":1259,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496158,"byte_end":9496198,"line_start":1260,"line_end":1260,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496199,"byte_end":9496206,"line_start":1261,"line_end":1261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496207,"byte_end":9496218,"line_start":1262,"line_end":1262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496219,"byte_end":9496236,"line_start":1263,"line_end":1263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":570},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496731,"byte_end":9496742,"line_start":1280,"line_end":1280,"column_start":8,"column_end":19},"name":"bitxor_m128","qualname":"::x86_x64::sse::bitxor_m128","value":"pub fn bitxor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitxor_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496391,"byte_end":9496411,"line_start":1269,"line_end":1269,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496412,"byte_end":9496419,"line_start":1270,"line_end":1270,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496420,"byte_end":9496443,"line_start":1271,"line_end":1271,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496444,"byte_end":9496495,"line_start":1272,"line_end":1272,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496496,"byte_end":9496547,"line_start":1273,"line_end":1273,"column_start":1,"column_end":52}},{"value":"/ let c = bitxor_m128(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496548,"byte_end":9496589,"line_start":1274,"line_end":1274,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496590,"byte_end":9496630,"line_start":1275,"line_end":1275,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496631,"byte_end":9496638,"line_start":1276,"line_end":1276,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496639,"byte_end":9496650,"line_start":1277,"line_end":1277,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9496651,"byte_end":9496668,"line_start":1278,"line_end":1278,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501992,"byte_end":9502004,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"add_i8_m128i","qualname":"::x86_x64::sse2::add_i8_m128i","value":"pub fn add_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = add_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501507,"byte_end":9501547,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501548,"byte_end":9501555,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501556,"byte_end":9501579,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501580,"byte_end":9501663,"line_start":8,"line_end":8,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501664,"byte_end":9501755,"line_start":9,"line_end":9,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = add_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501756,"byte_end":9501804,"line_start":10,"line_end":10,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501805,"byte_end":9501890,"line_start":11,"line_end":11,"column_start":1,"column_end":86}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501891,"byte_end":9501898,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501899,"byte_end":9501910,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9501911,"byte_end":9501928,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502482,"byte_end":9502495,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"add_i16_m128i","qualname":"::x86_x64::sse2::add_i16_m128i","value":"pub fn add_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_i16_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502082,"byte_end":9502123,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502124,"byte_end":9502131,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502132,"byte_end":9502155,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502156,"byte_end":9502214,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502215,"byte_end":9502276,"line_start":24,"line_end":24,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502277,"byte_end":9502326,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502327,"byte_end":9502380,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502381,"byte_end":9502388,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502389,"byte_end":9502400,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502401,"byte_end":9502418,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502912,"byte_end":9502925,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"add_i32_m128i","qualname":"::x86_x64::sse2::add_i32_m128i","value":"pub fn add_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_i32_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i32`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502574,"byte_end":9502615,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502616,"byte_end":9502623,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502624,"byte_end":9502647,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502648,"byte_end":9502686,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502687,"byte_end":9502725,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_i32_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502726,"byte_end":9502775,"line_start":40,"line_end":40,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502776,"byte_end":9502810,"line_start":41,"line_end":41,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502811,"byte_end":9502818,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502819,"byte_end":9502830,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9502831,"byte_end":9502848,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503341,"byte_end":9503354,"line_start":61,"line_end":61,"column_start":8,"column_end":21},"name":"add_i64_m128i","qualname":"::x86_x64::sse2::add_i64_m128i","value":"pub fn add_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = add_i64_m128i(a, b).into();\n assert_eq!(c, [-8909, 88]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i64`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503004,"byte_end":9503045,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503046,"byte_end":9503053,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503054,"byte_end":9503077,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503078,"byte_end":9503116,"line_start":53,"line_end":53,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503117,"byte_end":9503157,"line_start":54,"line_end":54,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = add_i64_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503158,"byte_end":9503207,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-8909, 88]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503208,"byte_end":9503239,"line_start":56,"line_end":56,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503240,"byte_end":9503247,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503248,"byte_end":9503259,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503260,"byte_end":9503277,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503753,"byte_end":9503762,"line_start":76,"line_end":76,"column_start":8,"column_end":17},"name":"add_m128d","qualname":"::x86_x64::sse2::add_m128d","value":"pub fn add_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = add_m128d(a, b).to_array();\n assert_eq!(c, [192.0, 81.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503433,"byte_end":9503454,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503455,"byte_end":9503462,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503463,"byte_end":9503486,"line_start":67,"line_end":67,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503487,"byte_end":9503531,"line_start":68,"line_end":68,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503532,"byte_end":9503577,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ let c = add_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503578,"byte_end":9503617,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [192.0, 81.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503618,"byte_end":9503651,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503652,"byte_end":9503659,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503660,"byte_end":9503671,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503672,"byte_end":9503689,"line_start":74,"line_end":74,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504186,"byte_end":9504197,"line_start":91,"line_end":91,"column_start":8,"column_end":19},"name":"add_m128d_s","qualname":"::x86_x64::sse2::add_m128d_s","value":"pub fn add_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a + b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = add_m128d_s(a, b).to_array();\n assert_eq!(c, [192.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a + b`, high lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503838,"byte_end":9503883,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503884,"byte_end":9503891,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503892,"byte_end":9503915,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503916,"byte_end":9503960,"line_start":83,"line_end":83,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9503961,"byte_end":9504008,"line_start":84,"line_end":84,"column_start":1,"column_end":48}},{"value":"/ let c = add_m128d_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504009,"byte_end":9504050,"line_start":85,"line_end":85,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [192.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504051,"byte_end":9504084,"line_start":86,"line_end":86,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504085,"byte_end":9504092,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504093,"byte_end":9504104,"line_start":88,"line_end":88,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504105,"byte_end":9504122,"line_start":89,"line_end":89,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":894},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504920,"byte_end":9504943,"line_start":119,"line_end":119,"column_start":8,"column_end":31},"name":"add_saturating_i8_m128i","qualname":"::x86_x64::sse2::add_saturating_i8_m128i","value":"pub fn add_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,\n   3, 4, -1, -2, -1, -2, -3, -4,\n ]);\n let b = m128i::from([\n   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,\n   7, 8, -15, -26, -15, -26, -37, 48,\n ]);\n let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,\n     10, 12, -16, -28, -16, -28, -40, 44\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504273,"byte_end":9504324,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504325,"byte_end":9504332,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504333,"byte_end":9504356,"line_start":97,"line_end":97,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504357,"byte_end":9504382,"line_start":98,"line_end":98,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504383,"byte_end":9504428,"line_start":99,"line_end":99,"column_start":1,"column_end":46}},{"value":"/   3, 4, -1, -2, -1, -2, -3, -4,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504429,"byte_end":9504464,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504465,"byte_end":9504472,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504473,"byte_end":9504498,"line_start":102,"line_end":102,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504499,"byte_end":9504547,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"/   7, 8, -15, -26, -15, -26, -37, 48,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504548,"byte_end":9504588,"line_start":104,"line_end":104,"column_start":1,"column_end":41}},{"value":"/ ]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504589,"byte_end":9504596,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504597,"byte_end":9504656,"line_start":106,"line_end":106,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504657,"byte_end":9504672,"line_start":107,"line_end":107,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504673,"byte_end":9504681,"line_start":108,"line_end":108,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504682,"byte_end":9504689,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504690,"byte_end":9504742,"line_start":110,"line_end":110,"column_start":1,"column_end":53}},{"value":"/     10, 12, -16, -28, -16, -28, -40, 44","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504743,"byte_end":9504786,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/   ]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504787,"byte_end":9504794,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504795,"byte_end":9504801,"line_start":113,"line_end":113,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504802,"byte_end":9504809,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504810,"byte_end":9504821,"line_start":115,"line_end":115,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504822,"byte_end":9504839,"line_start":116,"line_end":116,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9504840,"byte_end":9504856,"line_start":117,"line_end":117,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505478,"byte_end":9505502,"line_start":134,"line_end":134,"column_start":8,"column_end":32},"name":"add_saturating_i16_m128i","qualname":"::x86_x64::sse2::add_saturating_i16_m128i","value":"pub fn add_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505022,"byte_end":9505074,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505075,"byte_end":9505082,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505083,"byte_end":9505106,"line_start":125,"line_end":125,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505107,"byte_end":9505175,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505176,"byte_end":9505247,"line_start":127,"line_end":127,"column_start":1,"column_end":72}},{"value":"/ let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505248,"byte_end":9505308,"line_start":128,"line_end":128,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505309,"byte_end":9505376,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505377,"byte_end":9505384,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505385,"byte_end":9505396,"line_start":131,"line_end":131,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505397,"byte_end":9505414,"line_start":132,"line_end":132,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":895},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506191,"byte_end":9506214,"line_start":162,"line_end":162,"column_start":8,"column_end":31},"name":"add_saturating_u8_m128i","qualname":"::x86_x64::sse2::add_saturating_u8_m128i","value":"pub fn add_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 10, 12, 255, 28, 40, 52,\n     10, 12, 16, 28, 16, 28, 165, 52\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505582,"byte_end":9505633,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505634,"byte_end":9505641,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505642,"byte_end":9505665,"line_start":140,"line_end":140,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505666,"byte_end":9505691,"line_start":141,"line_end":141,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505692,"byte_end":9505729,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505730,"byte_end":9505761,"line_start":143,"line_end":143,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505762,"byte_end":9505769,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505770,"byte_end":9505795,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505796,"byte_end":9505835,"line_start":146,"line_end":146,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505836,"byte_end":9505871,"line_start":147,"line_end":147,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505872,"byte_end":9505879,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505880,"byte_end":9505939,"line_start":149,"line_end":149,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505940,"byte_end":9505955,"line_start":150,"line_end":150,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505956,"byte_end":9505964,"line_start":151,"line_end":151,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505965,"byte_end":9505972,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 10, 12, 255, 28, 40, 52,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9505973,"byte_end":9506017,"line_start":153,"line_end":153,"column_start":1,"column_end":45}},{"value":"/     10, 12, 16, 28, 16, 28, 165, 52","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506018,"byte_end":9506057,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/   ]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506058,"byte_end":9506065,"line_start":155,"line_end":155,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506066,"byte_end":9506072,"line_start":156,"line_end":156,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506073,"byte_end":9506080,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506081,"byte_end":9506092,"line_start":158,"line_end":158,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506093,"byte_end":9506110,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506111,"byte_end":9506127,"line_start":160,"line_end":160,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506718,"byte_end":9506742,"line_start":177,"line_end":177,"column_start":8,"column_end":32},"name":"add_saturating_u16_m128i","qualname":"::x86_x64::sse2::add_saturating_u16_m128i","value":"pub fn add_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506293,"byte_end":9506345,"line_start":166,"line_end":166,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506346,"byte_end":9506353,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506354,"byte_end":9506377,"line_start":168,"line_end":168,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506378,"byte_end":9506435,"line_start":169,"line_end":169,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506436,"byte_end":9506497,"line_start":170,"line_end":170,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506498,"byte_end":9506558,"line_start":171,"line_end":171,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506559,"byte_end":9506616,"line_start":172,"line_end":172,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506617,"byte_end":9506624,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506625,"byte_end":9506636,"line_start":174,"line_end":174,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506637,"byte_end":9506654,"line_start":175,"line_end":175,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507136,"byte_end":9507148,"line_start":192,"line_end":192,"column_start":8,"column_end":20},"name":"bitand_m128d","qualname":"::x86_x64::sse2::bitand_m128d","value":"pub fn bitand_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitand_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506822,"byte_end":9506842,"line_start":181,"line_end":181,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506843,"byte_end":9506850,"line_start":182,"line_end":182,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506851,"byte_end":9506874,"line_start":183,"line_end":183,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506875,"byte_end":9506917,"line_start":184,"line_end":184,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506918,"byte_end":9506960,"line_start":185,"line_end":185,"column_start":1,"column_end":43}},{"value":"/ let c = bitand_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9506961,"byte_end":9507003,"line_start":186,"line_end":186,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507004,"byte_end":9507034,"line_start":187,"line_end":187,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507035,"byte_end":9507042,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507043,"byte_end":9507054,"line_start":189,"line_end":189,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507055,"byte_end":9507072,"line_start":190,"line_end":190,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507538,"byte_end":9507550,"line_start":207,"line_end":207,"column_start":8,"column_end":20},"name":"bitand_m128i","qualname":"::x86_x64::sse2::bitand_m128i","value":"pub fn bitand_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitand_m128i(a, b).into();\n assert_eq!(c, [1, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507224,"byte_end":9507244,"line_start":196,"line_end":196,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507245,"byte_end":9507252,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507253,"byte_end":9507276,"line_start":198,"line_end":198,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507277,"byte_end":9507315,"line_start":199,"line_end":199,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507316,"byte_end":9507354,"line_start":200,"line_end":200,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitand_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507355,"byte_end":9507403,"line_start":201,"line_end":201,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1, 0, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507404,"byte_end":9507436,"line_start":202,"line_end":202,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507437,"byte_end":9507444,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507445,"byte_end":9507456,"line_start":204,"line_end":204,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507457,"byte_end":9507474,"line_start":205,"line_end":205,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507949,"byte_end":9507964,"line_start":222,"line_end":222,"column_start":8,"column_end":23},"name":"bitandnot_m128d","qualname":"::x86_x64::sse2::bitandnot_m128d","value":"pub fn bitandnot_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitandnot_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507629,"byte_end":9507652,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507653,"byte_end":9507660,"line_start":212,"line_end":212,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507661,"byte_end":9507684,"line_start":213,"line_end":213,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507685,"byte_end":9507727,"line_start":214,"line_end":214,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507728,"byte_end":9507770,"line_start":215,"line_end":215,"column_start":1,"column_end":43}},{"value":"/ let c = bitandnot_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507771,"byte_end":9507816,"line_start":216,"line_end":216,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507817,"byte_end":9507847,"line_start":217,"line_end":217,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507848,"byte_end":9507855,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507856,"byte_end":9507867,"line_start":219,"line_end":219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9507868,"byte_end":9507885,"line_start":220,"line_end":220,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":628},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508363,"byte_end":9508378,"line_start":237,"line_end":237,"column_start":8,"column_end":23},"name":"bitandnot_m128i","qualname":"::x86_x64::sse2::bitandnot_m128i","value":"pub fn bitandnot_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitandnot_m128i(a, b).into();\n assert_eq!(c, [0, 1, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508043,"byte_end":9508066,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508067,"byte_end":9508074,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508075,"byte_end":9508098,"line_start":228,"line_end":228,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508099,"byte_end":9508137,"line_start":229,"line_end":229,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508138,"byte_end":9508176,"line_start":230,"line_end":230,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitandnot_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508177,"byte_end":9508228,"line_start":231,"line_end":231,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [0, 1, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508229,"byte_end":9508261,"line_start":232,"line_end":232,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508262,"byte_end":9508269,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508270,"byte_end":9508281,"line_start":234,"line_end":234,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508282,"byte_end":9508299,"line_start":235,"line_end":235,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":896},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509044,"byte_end":9509060,"line_start":265,"line_end":265,"column_start":8,"column_end":24},"name":"average_u8_m128i","qualname":"::x86_x64::sse2::average_u8_m128i","value":"pub fn average_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u8` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = average_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 5, 6, 135, 14, 20, 26,\n     5, 6, 8, 14, 8, 14, 83, 26\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u8` values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508460,"byte_end":9508500,"line_start":241,"line_end":241,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508501,"byte_end":9508508,"line_start":242,"line_end":242,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508509,"byte_end":9508532,"line_start":243,"line_end":243,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508533,"byte_end":9508558,"line_start":244,"line_end":244,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508559,"byte_end":9508596,"line_start":245,"line_end":245,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508597,"byte_end":9508628,"line_start":246,"line_end":246,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508629,"byte_end":9508636,"line_start":247,"line_end":247,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508637,"byte_end":9508662,"line_start":248,"line_end":248,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508663,"byte_end":9508702,"line_start":249,"line_end":249,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508703,"byte_end":9508738,"line_start":250,"line_end":250,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508739,"byte_end":9508746,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = average_u8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508747,"byte_end":9508799,"line_start":252,"line_end":252,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508800,"byte_end":9508815,"line_start":253,"line_end":253,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508816,"byte_end":9508824,"line_start":254,"line_end":254,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508825,"byte_end":9508832,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 5, 6, 135, 14, 20, 26,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508833,"byte_end":9508875,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/     5, 6, 8, 14, 8, 14, 83, 26","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508876,"byte_end":9508910,"line_start":257,"line_end":257,"column_start":1,"column_end":35}},{"value":"/   ]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508911,"byte_end":9508918,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508919,"byte_end":9508925,"line_start":259,"line_end":259,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508926,"byte_end":9508933,"line_start":260,"line_end":260,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508934,"byte_end":9508945,"line_start":261,"line_end":261,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508946,"byte_end":9508963,"line_start":262,"line_end":262,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9508964,"byte_end":9508980,"line_start":263,"line_end":263,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":629},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509542,"byte_end":9509559,"line_start":280,"line_end":280,"column_start":8,"column_end":25},"name":"average_u16_m128i","qualname":"::x86_x64::sse2::average_u16_m128i","value":"pub fn average_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u16` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = average_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u16` values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509138,"byte_end":9509179,"line_start":269,"line_end":269,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509180,"byte_end":9509187,"line_start":270,"line_end":270,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509188,"byte_end":9509211,"line_start":271,"line_end":271,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509212,"byte_end":9509269,"line_start":272,"line_end":272,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509270,"byte_end":9509331,"line_start":273,"line_end":273,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = average_u16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509332,"byte_end":9509385,"line_start":274,"line_end":274,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509386,"byte_end":9509440,"line_start":275,"line_end":275,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509441,"byte_end":9509448,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509449,"byte_end":9509460,"line_start":277,"line_end":277,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509461,"byte_end":9509478,"line_start":278,"line_end":278,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510041,"byte_end":9510064,"line_start":296,"line_end":296,"column_start":8,"column_end":31},"name":"byte_shl_imm_u128_m128i","qualname":"::x86_x64::sse2::byte_shl_imm_u128_m128i","value":"pub fn byte_shl_imm_u128_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all bits in the entire register left by a number of **bytes**.","sig":null,"attributes":[{"value":"/ Shifts all bits in the entire register left by a number of **bytes**.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509638,"byte_end":9509711,"line_start":284,"line_end":284,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509712,"byte_end":9509715,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509716,"byte_end":9509723,"line_start":286,"line_end":286,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509724,"byte_end":9509747,"line_start":287,"line_end":287,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from(0x0000000B_0000000A_0000000F_11111111_u128);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509748,"byte_end":9509816,"line_start":288,"line_end":288,"column_start":1,"column_end":69}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509817,"byte_end":9509823,"line_start":289,"line_end":289,"column_start":1,"column_end":7}},{"value":"/ let b: u128 = byte_shl_imm_u128_m128i::<1>(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509824,"byte_end":9509881,"line_start":290,"line_end":290,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(b, 0x00000B00_00000A00_00000F11_11111100);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509882,"byte_end":9509939,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509940,"byte_end":9509947,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509948,"byte_end":9509959,"line_start":293,"line_end":293,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9509960,"byte_end":9509977,"line_start":294,"line_end":294,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510555,"byte_end":9510578,"line_start":312,"line_end":312,"column_start":8,"column_end":31},"name":"byte_shr_imm_u128_m128i","qualname":"::x86_x64::sse2::byte_shr_imm_u128_m128i","value":"pub fn byte_shr_imm_u128_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all bits in the entire register right by a number of **bytes**.","sig":null,"attributes":[{"value":"/ Shifts all bits in the entire register right by a number of **bytes**.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510151,"byte_end":9510225,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510226,"byte_end":9510229,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510230,"byte_end":9510237,"line_start":302,"line_end":302,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510238,"byte_end":9510261,"line_start":303,"line_end":303,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from(0x0000000B_0000000A_0000000F_11111111_u128);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510262,"byte_end":9510330,"line_start":304,"line_end":304,"column_start":1,"column_end":69}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510331,"byte_end":9510337,"line_start":305,"line_end":305,"column_start":1,"column_end":7}},{"value":"/ let c: u128 = byte_shr_imm_u128_m128i::<1>(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510338,"byte_end":9510395,"line_start":306,"line_end":306,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, 0x00000000_0B000000_0A000000_0F111111);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510396,"byte_end":9510453,"line_start":307,"line_end":307,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510454,"byte_end":9510461,"line_start":308,"line_end":308,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510462,"byte_end":9510473,"line_start":309,"line_end":309,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510474,"byte_end":9510491,"line_start":310,"line_end":310,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510999,"byte_end":9511022,"line_start":326,"line_end":326,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128_from_m128d","value":"pub fn cast_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128d`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510665,"byte_end":9510711,"line_start":316,"line_end":316,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510712,"byte_end":9510719,"line_start":317,"line_end":317,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510720,"byte_end":9510743,"line_start":318,"line_end":318,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510744,"byte_end":9510786,"line_start":319,"line_end":319,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510787,"byte_end":9510846,"line_start":320,"line_end":320,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510847,"byte_end":9510897,"line_start":321,"line_end":321,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510898,"byte_end":9510905,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510906,"byte_end":9510917,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9510918,"byte_end":9510935,"line_start":324,"line_end":324,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511417,"byte_end":9511441,"line_start":340,"line_end":340,"column_start":8,"column_end":32},"name":"cast_to_m128i_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128d","value":"pub fn cast_to_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128d`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511084,"byte_end":9511131,"line_start":330,"line_end":330,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511132,"byte_end":9511139,"line_start":331,"line_end":331,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511140,"byte_end":9511163,"line_start":332,"line_end":332,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511164,"byte_end":9511206,"line_start":333,"line_end":333,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511207,"byte_end":9511264,"line_start":334,"line_end":334,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511265,"byte_end":9511315,"line_start":335,"line_end":335,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511316,"byte_end":9511323,"line_start":336,"line_end":336,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511324,"byte_end":9511335,"line_start":337,"line_end":337,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511336,"byte_end":9511353,"line_start":338,"line_end":338,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511861,"byte_end":9511884,"line_start":354,"line_end":354,"column_start":8,"column_end":31},"name":"cast_to_m128d_from_m128","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128","value":"pub fn cast_to_m128d_from_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();\n assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511508,"byte_end":9511554,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511555,"byte_end":9511562,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511563,"byte_end":9511586,"line_start":346,"line_end":346,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511587,"byte_end":9511638,"line_start":347,"line_end":347,"column_start":1,"column_end":52}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511639,"byte_end":9511698,"line_start":348,"line_end":348,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511699,"byte_end":9511759,"line_start":349,"line_end":349,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511760,"byte_end":9511767,"line_start":350,"line_end":350,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511768,"byte_end":9511779,"line_start":351,"line_end":351,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511780,"byte_end":9511797,"line_start":352,"line_end":352,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512305,"byte_end":9512328,"line_start":368,"line_end":368,"column_start":8,"column_end":31},"name":"cast_to_m128i_from_m128","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128","value":"pub fn cast_to_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128(a).into();\n assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511947,"byte_end":9511993,"line_start":358,"line_end":358,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9511994,"byte_end":9512001,"line_start":359,"line_end":359,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512002,"byte_end":9512025,"line_start":360,"line_end":360,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512026,"byte_end":9512077,"line_start":361,"line_end":361,"column_start":1,"column_end":52}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512078,"byte_end":9512134,"line_start":362,"line_end":362,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512135,"byte_end":9512203,"line_start":363,"line_end":363,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512204,"byte_end":9512211,"line_start":364,"line_end":364,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512212,"byte_end":9512223,"line_start":365,"line_end":365,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512224,"byte_end":9512241,"line_start":366,"line_end":366,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512722,"byte_end":9512746,"line_start":382,"line_end":382,"column_start":8,"column_end":32},"name":"cast_to_m128d_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128i","value":"pub fn cast_to_m128d_from_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();\n assert_eq!(c, [0x200000001, 0x400000003]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128i`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512394,"byte_end":9512441,"line_start":372,"line_end":372,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512442,"byte_end":9512449,"line_start":373,"line_end":373,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512450,"byte_end":9512473,"line_start":374,"line_end":374,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512474,"byte_end":9512512,"line_start":375,"line_end":375,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512513,"byte_end":9512573,"line_start":376,"line_end":376,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0x200000001, 0x400000003]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512574,"byte_end":9512620,"line_start":377,"line_end":377,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512621,"byte_end":9512628,"line_start":378,"line_end":378,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512629,"byte_end":9512640,"line_start":379,"line_end":379,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512641,"byte_end":9512658,"line_start":380,"line_end":380,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513125,"byte_end":9513148,"line_start":396,"line_end":396,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128_from_m128i","value":"pub fn cast_to_m128_from_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128i`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512813,"byte_end":9512859,"line_start":386,"line_end":386,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512860,"byte_end":9512867,"line_start":387,"line_end":387,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512868,"byte_end":9512891,"line_start":388,"line_end":388,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512892,"byte_end":9512930,"line_start":389,"line_end":389,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512931,"byte_end":9512990,"line_start":390,"line_end":390,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9512991,"byte_end":9513023,"line_start":391,"line_end":391,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513024,"byte_end":9513031,"line_start":392,"line_end":392,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513032,"byte_end":9513043,"line_start":393,"line_end":393,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513044,"byte_end":9513061,"line_start":394,"line_end":394,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513760,"byte_end":9513780,"line_start":413,"line_end":413,"column_start":8,"column_end":28},"name":"cmp_eq_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i8_m128i","value":"pub fn cmp_eq_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513213,"byte_end":9513254,"line_start":400,"line_end":400,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513255,"byte_end":9513258,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513259,"byte_end":9513317,"line_start":402,"line_end":402,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513318,"byte_end":9513325,"line_start":403,"line_end":403,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513326,"byte_end":9513349,"line_start":404,"line_end":404,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513350,"byte_end":9513434,"line_start":405,"line_end":405,"column_start":1,"column_end":85}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513435,"byte_end":9513526,"line_start":406,"line_end":406,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_eq_mask_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513527,"byte_end":9513583,"line_start":407,"line_end":407,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513584,"byte_end":9513658,"line_start":408,"line_end":408,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513659,"byte_end":9513666,"line_start":409,"line_end":409,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513667,"byte_end":9513678,"line_start":410,"line_end":410,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513679,"byte_end":9513696,"line_start":411,"line_end":411,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514326,"byte_end":9514347,"line_start":430,"line_end":430,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i16_m128i","value":"pub fn cmp_eq_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513860,"byte_end":9513902,"line_start":417,"line_end":417,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513903,"byte_end":9513906,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513907,"byte_end":9513965,"line_start":419,"line_end":419,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513966,"byte_end":9513973,"line_start":420,"line_end":420,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513974,"byte_end":9513997,"line_start":421,"line_end":421,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9513998,"byte_end":9514056,"line_start":422,"line_end":422,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514057,"byte_end":9514118,"line_start":423,"line_end":423,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_eq_mask_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514119,"byte_end":9514176,"line_start":424,"line_end":424,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, 0, 0, -1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514177,"byte_end":9514224,"line_start":425,"line_end":425,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514225,"byte_end":9514232,"line_start":426,"line_end":426,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514233,"byte_end":9514244,"line_start":427,"line_end":427,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514245,"byte_end":9514262,"line_start":428,"line_end":428,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514838,"byte_end":9514859,"line_start":447,"line_end":447,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i32_m128i","value":"pub fn cmp_eq_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i32`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514428,"byte_end":9514470,"line_start":434,"line_end":434,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514471,"byte_end":9514474,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514475,"byte_end":9514533,"line_start":436,"line_end":436,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514534,"byte_end":9514541,"line_start":437,"line_end":437,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514542,"byte_end":9514565,"line_start":438,"line_end":438,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514566,"byte_end":9514604,"line_start":439,"line_end":439,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514605,"byte_end":9514643,"line_start":440,"line_end":440,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_eq_mask_i32_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514644,"byte_end":9514701,"line_start":441,"line_end":441,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514702,"byte_end":9514736,"line_start":442,"line_end":442,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514737,"byte_end":9514744,"line_start":443,"line_end":443,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514745,"byte_end":9514756,"line_start":444,"line_end":444,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514757,"byte_end":9514774,"line_start":445,"line_end":445,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515297,"byte_end":9515314,"line_start":464,"line_end":464,"column_start":8,"column_end":25},"name":"cmp_eq_mask_m128d","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d","value":"pub fn cmp_eq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`, mask output.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`, mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514940,"byte_end":9514975,"line_start":451,"line_end":451,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514976,"byte_end":9514979,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514980,"byte_end":9514996,"line_start":453,"line_end":453,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9514997,"byte_end":9515004,"line_start":454,"line_end":454,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515005,"byte_end":9515028,"line_start":455,"line_end":455,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515029,"byte_end":9515071,"line_start":456,"line_end":456,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515072,"byte_end":9515114,"line_start":457,"line_end":457,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515115,"byte_end":9515161,"line_start":458,"line_end":458,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515162,"byte_end":9515195,"line_start":459,"line_end":459,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515196,"byte_end":9515203,"line_start":460,"line_end":460,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515204,"byte_end":9515215,"line_start":461,"line_end":461,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515216,"byte_end":9515233,"line_start":462,"line_end":462,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515775,"byte_end":9515794,"line_start":481,"line_end":481,"column_start":8,"column_end":27},"name":"cmp_eq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d_s","value":"pub fn cmp_eq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515392,"byte_end":9515437,"line_start":468,"line_end":468,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515438,"byte_end":9515441,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515442,"byte_end":9515458,"line_start":470,"line_end":470,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515459,"byte_end":9515466,"line_start":471,"line_end":471,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515467,"byte_end":9515490,"line_start":472,"line_end":472,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515491,"byte_end":9515533,"line_start":473,"line_end":473,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515534,"byte_end":9515576,"line_start":474,"line_end":474,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515577,"byte_end":9515625,"line_start":475,"line_end":475,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515626,"byte_end":9515673,"line_start":476,"line_end":476,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515674,"byte_end":9515681,"line_start":477,"line_end":477,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515682,"byte_end":9515693,"line_start":478,"line_end":478,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515694,"byte_end":9515711,"line_start":479,"line_end":479,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516223,"byte_end":9516240,"line_start":498,"line_end":498,"column_start":8,"column_end":25},"name":"cmp_ge_mask_m128d","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d","value":"pub fn cmp_ge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515872,"byte_end":9515894,"line_start":485,"line_end":485,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515895,"byte_end":9515898,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515899,"byte_end":9515915,"line_start":487,"line_end":487,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515916,"byte_end":9515923,"line_start":488,"line_end":488,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515924,"byte_end":9515947,"line_start":489,"line_end":489,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515948,"byte_end":9515990,"line_start":490,"line_end":490,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9515991,"byte_end":9516033,"line_start":491,"line_end":491,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516034,"byte_end":9516080,"line_start":492,"line_end":492,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516081,"byte_end":9516121,"line_start":493,"line_end":493,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516122,"byte_end":9516129,"line_start":494,"line_end":494,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516130,"byte_end":9516141,"line_start":495,"line_end":495,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516142,"byte_end":9516159,"line_start":496,"line_end":496,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516701,"byte_end":9516720,"line_start":515,"line_end":515,"column_start":8,"column_end":27},"name":"cmp_ge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d_s","value":"pub fn cmp_ge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516318,"byte_end":9516363,"line_start":502,"line_end":502,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516364,"byte_end":9516367,"line_start":503,"line_end":503,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516368,"byte_end":9516384,"line_start":504,"line_end":504,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516385,"byte_end":9516392,"line_start":505,"line_end":505,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516393,"byte_end":9516416,"line_start":506,"line_end":506,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516417,"byte_end":9516459,"line_start":507,"line_end":507,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516460,"byte_end":9516502,"line_start":508,"line_end":508,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516503,"byte_end":9516551,"line_start":509,"line_end":509,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516552,"byte_end":9516599,"line_start":510,"line_end":510,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516600,"byte_end":9516607,"line_start":511,"line_end":511,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516608,"byte_end":9516619,"line_start":512,"line_end":512,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516620,"byte_end":9516637,"line_start":513,"line_end":513,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517350,"byte_end":9517370,"line_start":532,"line_end":532,"column_start":8,"column_end":28},"name":"cmp_gt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i8_m128i","value":"pub fn cmp_gt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516798,"byte_end":9516838,"line_start":519,"line_end":519,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516839,"byte_end":9516842,"line_start":520,"line_end":520,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516843,"byte_end":9516901,"line_start":521,"line_end":521,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516902,"byte_end":9516909,"line_start":522,"line_end":522,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516910,"byte_end":9516933,"line_start":523,"line_end":523,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9516934,"byte_end":9517022,"line_start":524,"line_end":524,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517023,"byte_end":9517114,"line_start":525,"line_end":525,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_gt_mask_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517115,"byte_end":9517171,"line_start":526,"line_end":526,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517172,"byte_end":9517248,"line_start":527,"line_end":527,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517249,"byte_end":9517256,"line_start":528,"line_end":528,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517257,"byte_end":9517268,"line_start":529,"line_end":529,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517269,"byte_end":9517286,"line_start":530,"line_end":530,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":648},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517919,"byte_end":9517940,"line_start":549,"line_end":549,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i16_m128i","value":"pub fn cmp_gt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517450,"byte_end":9517491,"line_start":536,"line_end":536,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517492,"byte_end":9517495,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517496,"byte_end":9517554,"line_start":538,"line_end":538,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517555,"byte_end":9517562,"line_start":539,"line_end":539,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517563,"byte_end":9517586,"line_start":540,"line_end":540,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517587,"byte_end":9517646,"line_start":541,"line_end":541,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517647,"byte_end":9517708,"line_start":542,"line_end":542,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_gt_mask_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517709,"byte_end":9517766,"line_start":543,"line_end":543,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, -1, -1, -1, -1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517767,"byte_end":9517817,"line_start":544,"line_end":544,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517818,"byte_end":9517825,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517826,"byte_end":9517837,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9517838,"byte_end":9517855,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518432,"byte_end":9518453,"line_start":566,"line_end":566,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i32_m128i","value":"pub fn cmp_gt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i32`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518021,"byte_end":9518062,"line_start":553,"line_end":553,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518063,"byte_end":9518066,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518067,"byte_end":9518125,"line_start":555,"line_end":555,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518126,"byte_end":9518133,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518134,"byte_end":9518157,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518158,"byte_end":9518198,"line_start":558,"line_end":558,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518199,"byte_end":9518237,"line_start":559,"line_end":559,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_gt_mask_i32_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518238,"byte_end":9518295,"line_start":560,"line_end":560,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518296,"byte_end":9518330,"line_start":561,"line_end":561,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518331,"byte_end":9518338,"line_start":562,"line_end":562,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518339,"byte_end":9518350,"line_start":563,"line_end":563,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518351,"byte_end":9518368,"line_start":564,"line_end":564,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518877,"byte_end":9518894,"line_start":583,"line_end":583,"column_start":8,"column_end":25},"name":"cmp_gt_mask_m128d","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d","value":"pub fn cmp_gt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518534,"byte_end":9518555,"line_start":570,"line_end":570,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518556,"byte_end":9518559,"line_start":571,"line_end":571,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518560,"byte_end":9518576,"line_start":572,"line_end":572,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518577,"byte_end":9518584,"line_start":573,"line_end":573,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518585,"byte_end":9518608,"line_start":574,"line_end":574,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518609,"byte_end":9518651,"line_start":575,"line_end":575,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518652,"byte_end":9518694,"line_start":576,"line_end":576,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518695,"byte_end":9518741,"line_start":577,"line_end":577,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518742,"byte_end":9518775,"line_start":578,"line_end":578,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518776,"byte_end":9518783,"line_start":579,"line_end":579,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518784,"byte_end":9518795,"line_start":580,"line_end":580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518796,"byte_end":9518813,"line_start":581,"line_end":581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519354,"byte_end":9519373,"line_start":600,"line_end":600,"column_start":8,"column_end":27},"name":"cmp_gt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d_s","value":"pub fn cmp_gt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9518972,"byte_end":9519016,"line_start":587,"line_end":587,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519017,"byte_end":9519020,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519021,"byte_end":9519037,"line_start":589,"line_end":589,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519038,"byte_end":9519045,"line_start":590,"line_end":590,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519046,"byte_end":9519069,"line_start":591,"line_end":591,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519070,"byte_end":9519112,"line_start":592,"line_end":592,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519113,"byte_end":9519155,"line_start":593,"line_end":593,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519156,"byte_end":9519204,"line_start":594,"line_end":594,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519205,"byte_end":9519252,"line_start":595,"line_end":595,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519253,"byte_end":9519260,"line_start":596,"line_end":596,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519261,"byte_end":9519272,"line_start":597,"line_end":597,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519273,"byte_end":9519290,"line_start":598,"line_end":598,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":652},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519802,"byte_end":9519819,"line_start":617,"line_end":617,"column_start":8,"column_end":25},"name":"cmp_le_mask_m128d","qualname":"::x86_x64::sse2::cmp_le_mask_m128d","value":"pub fn cmp_le_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519451,"byte_end":9519473,"line_start":604,"line_end":604,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519474,"byte_end":9519477,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519478,"byte_end":9519494,"line_start":606,"line_end":606,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519495,"byte_end":9519502,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519503,"byte_end":9519526,"line_start":608,"line_end":608,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519527,"byte_end":9519569,"line_start":609,"line_end":609,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519570,"byte_end":9519612,"line_start":610,"line_end":610,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519613,"byte_end":9519659,"line_start":611,"line_end":611,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519660,"byte_end":9519700,"line_start":612,"line_end":612,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519701,"byte_end":9519708,"line_start":613,"line_end":613,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519709,"byte_end":9519720,"line_start":614,"line_end":614,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519721,"byte_end":9519738,"line_start":615,"line_end":615,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520280,"byte_end":9520299,"line_start":634,"line_end":634,"column_start":8,"column_end":27},"name":"cmp_le_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_le_mask_m128d_s","value":"pub fn cmp_le_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519897,"byte_end":9519942,"line_start":621,"line_end":621,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519943,"byte_end":9519946,"line_start":622,"line_end":622,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519947,"byte_end":9519963,"line_start":623,"line_end":623,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519964,"byte_end":9519971,"line_start":624,"line_end":624,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519972,"byte_end":9519995,"line_start":625,"line_end":625,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9519996,"byte_end":9520038,"line_start":626,"line_end":626,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520039,"byte_end":9520081,"line_start":627,"line_end":627,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520082,"byte_end":9520130,"line_start":628,"line_end":628,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520131,"byte_end":9520178,"line_start":629,"line_end":629,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520179,"byte_end":9520186,"line_start":630,"line_end":630,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520187,"byte_end":9520198,"line_start":631,"line_end":631,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520199,"byte_end":9520216,"line_start":632,"line_end":632,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520929,"byte_end":9520949,"line_start":651,"line_end":651,"column_start":8,"column_end":28},"name":"cmp_lt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i8_m128i","value":"pub fn cmp_lt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520377,"byte_end":9520417,"line_start":638,"line_end":638,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520418,"byte_end":9520421,"line_start":639,"line_end":639,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520422,"byte_end":9520480,"line_start":640,"line_end":640,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520481,"byte_end":9520488,"line_start":641,"line_end":641,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520489,"byte_end":9520512,"line_start":642,"line_end":642,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520513,"byte_end":9520601,"line_start":643,"line_end":643,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520602,"byte_end":9520693,"line_start":644,"line_end":644,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_lt_mask_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520694,"byte_end":9520750,"line_start":645,"line_end":645,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520751,"byte_end":9520827,"line_start":646,"line_end":646,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520828,"byte_end":9520835,"line_start":647,"line_end":647,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520836,"byte_end":9520847,"line_start":648,"line_end":648,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9520848,"byte_end":9520865,"line_start":649,"line_end":649,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521494,"byte_end":9521515,"line_start":668,"line_end":668,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i16_m128i","value":"pub fn cmp_lt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521029,"byte_end":9521070,"line_start":655,"line_end":655,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521071,"byte_end":9521074,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521075,"byte_end":9521133,"line_start":657,"line_end":657,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521134,"byte_end":9521141,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521142,"byte_end":9521165,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521166,"byte_end":9521225,"line_start":660,"line_end":660,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521226,"byte_end":9521287,"line_start":661,"line_end":661,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_lt_mask_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521288,"byte_end":9521345,"line_start":662,"line_end":662,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, 0, 0, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521346,"byte_end":9521392,"line_start":663,"line_end":663,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521393,"byte_end":9521400,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521401,"byte_end":9521412,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521413,"byte_end":9521430,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522006,"byte_end":9522027,"line_start":685,"line_end":685,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i32_m128i","value":"pub fn cmp_lt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i32`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521596,"byte_end":9521637,"line_start":672,"line_end":672,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521638,"byte_end":9521641,"line_start":673,"line_end":673,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521642,"byte_end":9521700,"line_start":674,"line_end":674,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521701,"byte_end":9521708,"line_start":675,"line_end":675,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521709,"byte_end":9521732,"line_start":676,"line_end":676,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521733,"byte_end":9521773,"line_start":677,"line_end":677,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521774,"byte_end":9521812,"line_start":678,"line_end":678,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_lt_mask_i32_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521813,"byte_end":9521870,"line_start":679,"line_end":679,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521871,"byte_end":9521904,"line_start":680,"line_end":680,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521905,"byte_end":9521912,"line_start":681,"line_end":681,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521913,"byte_end":9521924,"line_start":682,"line_end":682,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9521925,"byte_end":9521942,"line_start":683,"line_end":683,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522451,"byte_end":9522468,"line_start":702,"line_end":702,"column_start":8,"column_end":25},"name":"cmp_lt_mask_m128d","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d","value":"pub fn cmp_lt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522108,"byte_end":9522129,"line_start":689,"line_end":689,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522130,"byte_end":9522133,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522134,"byte_end":9522150,"line_start":691,"line_end":691,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522151,"byte_end":9522158,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522159,"byte_end":9522182,"line_start":693,"line_end":693,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 7.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522183,"byte_end":9522225,"line_start":694,"line_end":694,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522226,"byte_end":9522268,"line_start":695,"line_end":695,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522269,"byte_end":9522315,"line_start":696,"line_end":696,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522316,"byte_end":9522349,"line_start":697,"line_end":697,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522350,"byte_end":9522357,"line_start":698,"line_end":698,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522358,"byte_end":9522369,"line_start":699,"line_end":699,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522370,"byte_end":9522387,"line_start":700,"line_end":700,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522927,"byte_end":9522946,"line_start":719,"line_end":719,"column_start":8,"column_end":27},"name":"cmp_lt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d_s","value":"pub fn cmp_lt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522546,"byte_end":9522589,"line_start":706,"line_end":706,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522590,"byte_end":9522593,"line_start":707,"line_end":707,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522594,"byte_end":9522610,"line_start":708,"line_end":708,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522611,"byte_end":9522618,"line_start":709,"line_end":709,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522619,"byte_end":9522642,"line_start":710,"line_end":710,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522643,"byte_end":9522685,"line_start":711,"line_end":711,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522686,"byte_end":9522728,"line_start":712,"line_end":712,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522729,"byte_end":9522777,"line_start":713,"line_end":713,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522778,"byte_end":9522825,"line_start":714,"line_end":714,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522826,"byte_end":9522833,"line_start":715,"line_end":715,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522834,"byte_end":9522845,"line_start":716,"line_end":716,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9522846,"byte_end":9522863,"line_start":717,"line_end":717,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523369,"byte_end":9523387,"line_start":736,"line_end":736,"column_start":8,"column_end":26},"name":"cmp_neq_mask_m128d","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d","value":"pub fn cmp_neq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523024,"byte_end":9523046,"line_start":723,"line_end":723,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523047,"byte_end":9523050,"line_start":724,"line_end":724,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523051,"byte_end":9523067,"line_start":725,"line_end":725,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523068,"byte_end":9523075,"line_start":726,"line_end":726,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523076,"byte_end":9523099,"line_start":727,"line_end":727,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523100,"byte_end":9523142,"line_start":728,"line_end":728,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523143,"byte_end":9523185,"line_start":729,"line_end":729,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523186,"byte_end":9523233,"line_start":730,"line_end":730,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523234,"byte_end":9523267,"line_start":731,"line_end":731,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523268,"byte_end":9523275,"line_start":732,"line_end":732,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523276,"byte_end":9523287,"line_start":733,"line_end":733,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523288,"byte_end":9523305,"line_start":734,"line_end":734,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523849,"byte_end":9523869,"line_start":753,"line_end":753,"column_start":8,"column_end":28},"name":"cmp_neq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d_s","value":"pub fn cmp_neq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523466,"byte_end":9523510,"line_start":740,"line_end":740,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523511,"byte_end":9523514,"line_start":741,"line_end":741,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523515,"byte_end":9523531,"line_start":742,"line_end":742,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523532,"byte_end":9523539,"line_start":743,"line_end":743,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523540,"byte_end":9523563,"line_start":744,"line_end":744,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523564,"byte_end":9523606,"line_start":745,"line_end":745,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523607,"byte_end":9523649,"line_start":746,"line_end":746,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523650,"byte_end":9523699,"line_start":747,"line_end":747,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523700,"byte_end":9523747,"line_start":748,"line_end":748,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523748,"byte_end":9523755,"line_start":749,"line_end":749,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523756,"byte_end":9523767,"line_start":750,"line_end":750,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523768,"byte_end":9523785,"line_start":751,"line_end":751,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524296,"byte_end":9524314,"line_start":770,"line_end":770,"column_start":8,"column_end":26},"name":"cmp_nge_mask_m128d","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d","value":"pub fn cmp_nge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523948,"byte_end":9523973,"line_start":757,"line_end":757,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523974,"byte_end":9523977,"line_start":758,"line_end":758,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523978,"byte_end":9523994,"line_start":759,"line_end":759,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9523995,"byte_end":9524002,"line_start":760,"line_end":760,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524003,"byte_end":9524026,"line_start":761,"line_end":761,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524027,"byte_end":9524069,"line_start":762,"line_end":762,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524070,"byte_end":9524112,"line_start":763,"line_end":763,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524113,"byte_end":9524160,"line_start":764,"line_end":764,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524161,"byte_end":9524194,"line_start":765,"line_end":765,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524195,"byte_end":9524202,"line_start":766,"line_end":766,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524203,"byte_end":9524214,"line_start":767,"line_end":767,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524215,"byte_end":9524232,"line_start":768,"line_end":768,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524772,"byte_end":9524792,"line_start":787,"line_end":787,"column_start":8,"column_end":28},"name":"cmp_nge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d_s","value":"pub fn cmp_nge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524393,"byte_end":9524440,"line_start":774,"line_end":774,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524441,"byte_end":9524444,"line_start":775,"line_end":775,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524445,"byte_end":9524461,"line_start":776,"line_end":776,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524462,"byte_end":9524469,"line_start":777,"line_end":777,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524470,"byte_end":9524493,"line_start":778,"line_end":778,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524494,"byte_end":9524536,"line_start":779,"line_end":779,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524537,"byte_end":9524579,"line_start":780,"line_end":780,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524580,"byte_end":9524629,"line_start":781,"line_end":781,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524630,"byte_end":9524670,"line_start":782,"line_end":782,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524671,"byte_end":9524678,"line_start":783,"line_end":783,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524679,"byte_end":9524690,"line_start":784,"line_end":784,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524691,"byte_end":9524708,"line_start":785,"line_end":785,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525218,"byte_end":9525236,"line_start":804,"line_end":804,"column_start":8,"column_end":26},"name":"cmp_ngt_mask_m128d","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d","value":"pub fn cmp_ngt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524871,"byte_end":9524895,"line_start":791,"line_end":791,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524896,"byte_end":9524899,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524900,"byte_end":9524916,"line_start":793,"line_end":793,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524917,"byte_end":9524924,"line_start":794,"line_end":794,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524925,"byte_end":9524948,"line_start":795,"line_end":795,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524949,"byte_end":9524991,"line_start":796,"line_end":796,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9524992,"byte_end":9525034,"line_start":797,"line_end":797,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525035,"byte_end":9525082,"line_start":798,"line_end":798,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525083,"byte_end":9525116,"line_start":799,"line_end":799,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525117,"byte_end":9525124,"line_start":800,"line_end":800,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525125,"byte_end":9525136,"line_start":801,"line_end":801,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525137,"byte_end":9525154,"line_start":802,"line_end":802,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525693,"byte_end":9525713,"line_start":821,"line_end":821,"column_start":8,"column_end":28},"name":"cmp_ngt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d_s","value":"pub fn cmp_ngt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525315,"byte_end":9525361,"line_start":808,"line_end":808,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525362,"byte_end":9525365,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525366,"byte_end":9525382,"line_start":810,"line_end":810,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525383,"byte_end":9525390,"line_start":811,"line_end":811,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525391,"byte_end":9525414,"line_start":812,"line_end":812,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525415,"byte_end":9525457,"line_start":813,"line_end":813,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525458,"byte_end":9525500,"line_start":814,"line_end":814,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525501,"byte_end":9525550,"line_start":815,"line_end":815,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525551,"byte_end":9525591,"line_start":816,"line_end":816,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525592,"byte_end":9525599,"line_start":817,"line_end":817,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525600,"byte_end":9525611,"line_start":818,"line_end":818,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525612,"byte_end":9525629,"line_start":819,"line_end":819,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526140,"byte_end":9526158,"line_start":838,"line_end":838,"column_start":8,"column_end":26},"name":"cmp_nle_mask_m128d","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d","value":"pub fn cmp_nle_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525792,"byte_end":9525817,"line_start":825,"line_end":825,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525818,"byte_end":9525821,"line_start":826,"line_end":826,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525822,"byte_end":9525838,"line_start":827,"line_end":827,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525839,"byte_end":9525846,"line_start":828,"line_end":828,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525847,"byte_end":9525870,"line_start":829,"line_end":829,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525871,"byte_end":9525913,"line_start":830,"line_end":830,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525914,"byte_end":9525956,"line_start":831,"line_end":831,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9525957,"byte_end":9526004,"line_start":832,"line_end":832,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526005,"byte_end":9526038,"line_start":833,"line_end":833,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526039,"byte_end":9526046,"line_start":834,"line_end":834,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526047,"byte_end":9526058,"line_start":835,"line_end":835,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526059,"byte_end":9526076,"line_start":836,"line_end":836,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526623,"byte_end":9526643,"line_start":855,"line_end":855,"column_start":8,"column_end":28},"name":"cmp_nle_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d_s","value":"pub fn cmp_nle_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526237,"byte_end":9526284,"line_start":842,"line_end":842,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526285,"byte_end":9526288,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526289,"byte_end":9526305,"line_start":844,"line_end":844,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526306,"byte_end":9526313,"line_start":845,"line_end":845,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526314,"byte_end":9526337,"line_start":846,"line_end":846,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526338,"byte_end":9526380,"line_start":847,"line_end":847,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526381,"byte_end":9526423,"line_start":848,"line_end":848,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526424,"byte_end":9526473,"line_start":849,"line_end":849,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526474,"byte_end":9526521,"line_start":850,"line_end":850,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526522,"byte_end":9526529,"line_start":851,"line_end":851,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526530,"byte_end":9526541,"line_start":852,"line_end":852,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526542,"byte_end":9526559,"line_start":853,"line_end":853,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527069,"byte_end":9527087,"line_start":872,"line_end":872,"column_start":8,"column_end":26},"name":"cmp_nlt_mask_m128d","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d","value":"pub fn cmp_nlt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526722,"byte_end":9526746,"line_start":859,"line_end":859,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526747,"byte_end":9526750,"line_start":860,"line_end":860,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526751,"byte_end":9526767,"line_start":861,"line_end":861,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526768,"byte_end":9526775,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526776,"byte_end":9526799,"line_start":863,"line_end":863,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526800,"byte_end":9526842,"line_start":864,"line_end":864,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526843,"byte_end":9526885,"line_start":865,"line_end":865,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526886,"byte_end":9526933,"line_start":866,"line_end":866,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526934,"byte_end":9526967,"line_start":867,"line_end":867,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526968,"byte_end":9526975,"line_start":868,"line_end":868,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526976,"byte_end":9526987,"line_start":869,"line_end":869,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9526988,"byte_end":9527005,"line_start":870,"line_end":870,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527551,"byte_end":9527571,"line_start":889,"line_end":889,"column_start":8,"column_end":28},"name":"cmp_nlt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d_s","value":"pub fn cmp_nlt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527166,"byte_end":9527212,"line_start":876,"line_end":876,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527213,"byte_end":9527216,"line_start":877,"line_end":877,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527217,"byte_end":9527233,"line_start":878,"line_end":878,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527234,"byte_end":9527241,"line_start":879,"line_end":879,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527242,"byte_end":9527265,"line_start":880,"line_end":880,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527266,"byte_end":9527308,"line_start":881,"line_end":881,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527309,"byte_end":9527351,"line_start":882,"line_end":882,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527352,"byte_end":9527401,"line_start":883,"line_end":883,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527402,"byte_end":9527449,"line_start":884,"line_end":884,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527450,"byte_end":9527457,"line_start":885,"line_end":885,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527458,"byte_end":9527469,"line_start":886,"line_end":886,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527470,"byte_end":9527487,"line_start":887,"line_end":887,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528027,"byte_end":9528049,"line_start":906,"line_end":906,"column_start":8,"column_end":30},"name":"cmp_ordered_mask_m128d","qualname":"::x86_x64::sse2::cmp_ordered_mask_m128d","value":"pub fn cmp_ordered_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527650,"byte_end":9527695,"line_start":893,"line_end":893,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527696,"byte_end":9527699,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527700,"byte_end":9527716,"line_start":895,"line_end":895,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527717,"byte_end":9527724,"line_start":896,"line_end":896,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527725,"byte_end":9527748,"line_start":897,"line_end":897,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, f64::NAN]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527749,"byte_end":9527796,"line_start":898,"line_end":898,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527797,"byte_end":9527839,"line_start":899,"line_end":899,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordered_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527840,"byte_end":9527891,"line_start":900,"line_end":900,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527892,"byte_end":9527925,"line_start":901,"line_end":901,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527926,"byte_end":9527933,"line_start":902,"line_end":902,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527934,"byte_end":9527945,"line_start":903,"line_end":903,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9527946,"byte_end":9527963,"line_start":904,"line_end":904,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528538,"byte_end":9528562,"line_start":923,"line_end":923,"column_start":8,"column_end":32},"name":"cmp_ordered_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ordered_mask_m128d_s","value":"pub fn cmp_ordered_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528128,"byte_end":9528195,"line_start":910,"line_end":910,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528196,"byte_end":9528199,"line_start":911,"line_end":911,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528200,"byte_end":9528216,"line_start":912,"line_end":912,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528217,"byte_end":9528224,"line_start":913,"line_end":913,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528225,"byte_end":9528248,"line_start":914,"line_end":914,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528249,"byte_end":9528291,"line_start":915,"line_end":915,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528292,"byte_end":9528334,"line_start":916,"line_end":916,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordered_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528335,"byte_end":9528388,"line_start":917,"line_end":917,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528389,"byte_end":9528436,"line_start":918,"line_end":918,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528437,"byte_end":9528444,"line_start":919,"line_end":919,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528445,"byte_end":9528456,"line_start":920,"line_end":920,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528457,"byte_end":9528474,"line_start":921,"line_end":921,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529010,"byte_end":9529030,"line_start":940,"line_end":940,"column_start":8,"column_end":28},"name":"cmp_unord_mask_m128d","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d","value":"pub fn cmp_unord_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528641,"byte_end":9528680,"line_start":927,"line_end":927,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528681,"byte_end":9528684,"line_start":928,"line_end":928,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528685,"byte_end":9528701,"line_start":929,"line_end":929,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528702,"byte_end":9528709,"line_start":930,"line_end":930,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528710,"byte_end":9528733,"line_start":931,"line_end":931,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528734,"byte_end":9528781,"line_start":932,"line_end":932,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528782,"byte_end":9528824,"line_start":933,"line_end":933,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528825,"byte_end":9528874,"line_start":934,"line_end":934,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528875,"byte_end":9528908,"line_start":935,"line_end":935,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528909,"byte_end":9528916,"line_start":936,"line_end":936,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528917,"byte_end":9528928,"line_start":937,"line_end":937,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9528929,"byte_end":9528946,"line_start":938,"line_end":938,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529518,"byte_end":9529540,"line_start":957,"line_end":957,"column_start":8,"column_end":30},"name":"cmp_unord_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d_s","value":"pub fn cmp_unord_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529111,"byte_end":9529172,"line_start":944,"line_end":944,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529173,"byte_end":9529176,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529177,"byte_end":9529193,"line_start":946,"line_end":946,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529194,"byte_end":9529201,"line_start":947,"line_end":947,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529202,"byte_end":9529225,"line_start":948,"line_end":948,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529226,"byte_end":9529273,"line_start":949,"line_end":949,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529274,"byte_end":9529316,"line_start":950,"line_end":950,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529317,"byte_end":9529368,"line_start":951,"line_end":951,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529369,"byte_end":9529416,"line_start":952,"line_end":952,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529417,"byte_end":9529424,"line_start":953,"line_end":953,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529425,"byte_end":9529436,"line_start":954,"line_end":954,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529437,"byte_end":9529454,"line_start":955,"line_end":955,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529940,"byte_end":9529958,"line_start":973,"line_end":973,"column_start":8,"column_end":26},"name":"cmp_eq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_i32_m128d_s","value":"pub fn cmp_eq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` equal to.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529621,"byte_end":9529649,"line_start":961,"line_end":961,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529650,"byte_end":9529653,"line_start":962,"line_end":962,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529654,"byte_end":9529671,"line_start":963,"line_end":963,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529672,"byte_end":9529679,"line_start":964,"line_end":964,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529680,"byte_end":9529703,"line_start":965,"line_end":965,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529704,"byte_end":9529746,"line_start":966,"line_end":966,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529747,"byte_end":9529789,"line_start":967,"line_end":967,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128d_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529790,"byte_end":9529838,"line_start":968,"line_end":968,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529839,"byte_end":9529846,"line_start":969,"line_end":969,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529847,"byte_end":9529858,"line_start":970,"line_end":970,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9529859,"byte_end":9529876,"line_start":971,"line_end":971,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530363,"byte_end":9530381,"line_start":989,"line_end":989,"column_start":8,"column_end":26},"name":"cmp_ge_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_i32_m128d_s","value":"pub fn cmp_ge_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than or equal to.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530028,"byte_end":9530072,"line_start":977,"line_end":977,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530073,"byte_end":9530076,"line_start":978,"line_end":978,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530077,"byte_end":9530094,"line_start":979,"line_end":979,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530095,"byte_end":9530102,"line_start":980,"line_end":980,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530103,"byte_end":9530126,"line_start":981,"line_end":981,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530127,"byte_end":9530169,"line_start":982,"line_end":982,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530170,"byte_end":9530212,"line_start":983,"line_end":983,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530213,"byte_end":9530261,"line_start":984,"line_end":984,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530262,"byte_end":9530269,"line_start":985,"line_end":985,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530270,"byte_end":9530281,"line_start":986,"line_end":986,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530282,"byte_end":9530299,"line_start":987,"line_end":987,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530774,"byte_end":9530792,"line_start":1005,"line_end":1005,"column_start":8,"column_end":26},"name":"cmp_gt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_i32_m128d_s","value":"pub fn cmp_gt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530451,"byte_end":9530483,"line_start":993,"line_end":993,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530484,"byte_end":9530487,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530488,"byte_end":9530505,"line_start":995,"line_end":995,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530506,"byte_end":9530513,"line_start":996,"line_end":996,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530514,"byte_end":9530537,"line_start":997,"line_end":997,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530538,"byte_end":9530580,"line_start":998,"line_end":998,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530581,"byte_end":9530623,"line_start":999,"line_end":999,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530624,"byte_end":9530672,"line_start":1000,"line_end":1000,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530673,"byte_end":9530680,"line_start":1001,"line_end":1001,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530681,"byte_end":9530692,"line_start":1002,"line_end":1002,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530693,"byte_end":9530710,"line_start":1003,"line_end":1003,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531194,"byte_end":9531212,"line_start":1021,"line_end":1021,"column_start":8,"column_end":26},"name":"cmp_le_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_le_i32_m128d_s","value":"pub fn cmp_le_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than or equal to.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530862,"byte_end":9530903,"line_start":1009,"line_end":1009,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530904,"byte_end":9530907,"line_start":1010,"line_end":1010,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530908,"byte_end":9530925,"line_start":1011,"line_end":1011,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530926,"byte_end":9530933,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530934,"byte_end":9530957,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9530958,"byte_end":9531000,"line_start":1014,"line_end":1014,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531001,"byte_end":9531043,"line_start":1015,"line_end":1015,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128d_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531044,"byte_end":9531092,"line_start":1016,"line_end":1016,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531093,"byte_end":9531100,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531101,"byte_end":9531112,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531113,"byte_end":9531130,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531602,"byte_end":9531620,"line_start":1037,"line_end":1037,"column_start":8,"column_end":26},"name":"cmp_lt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_i32_m128d_s","value":"pub fn cmp_lt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531282,"byte_end":9531311,"line_start":1025,"line_end":1025,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531312,"byte_end":9531315,"line_start":1026,"line_end":1026,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531316,"byte_end":9531333,"line_start":1027,"line_end":1027,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531334,"byte_end":9531341,"line_start":1028,"line_end":1028,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531342,"byte_end":9531365,"line_start":1029,"line_end":1029,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531366,"byte_end":9531408,"line_start":1030,"line_end":1030,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531409,"byte_end":9531451,"line_start":1031,"line_end":1031,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128d_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531452,"byte_end":9531500,"line_start":1032,"line_end":1032,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531501,"byte_end":9531508,"line_start":1033,"line_end":1033,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531509,"byte_end":9531520,"line_start":1034,"line_end":1034,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531521,"byte_end":9531538,"line_start":1035,"line_end":1035,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532011,"byte_end":9532030,"line_start":1053,"line_end":1053,"column_start":8,"column_end":27},"name":"cmp_neq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_i32_m128d_s","value":"pub fn cmp_neq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531690,"byte_end":9531719,"line_start":1041,"line_end":1041,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531720,"byte_end":9531723,"line_start":1042,"line_end":1042,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531724,"byte_end":9531741,"line_start":1043,"line_end":1043,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531742,"byte_end":9531749,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531750,"byte_end":9531773,"line_start":1045,"line_end":1045,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531774,"byte_end":9531816,"line_start":1046,"line_end":1046,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531817,"byte_end":9531859,"line_start":1047,"line_end":1047,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_neq_i32_m128d_s(a, b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531860,"byte_end":9531909,"line_start":1048,"line_end":1048,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531910,"byte_end":9531917,"line_start":1049,"line_end":1049,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531918,"byte_end":9531929,"line_start":1050,"line_end":1050,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9531930,"byte_end":9531947,"line_start":1051,"line_end":1051,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532551,"byte_end":9532589,"line_start":1070,"line_end":1070,"column_start":8,"column_end":46},"name":"convert_to_m128d_from_lower2_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_i32_m128i","value":"pub fn convert_to_m128d_from_lower2_i32_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the lower two `i32` lanes to two `f64` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128d_from_lower2_i32_m128i(a);\n let c = m128d::from_array([1.0, 2.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_pd`]\n * **Assembly:** `cvtdq2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the lower two `i32` lanes to two `f64` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532101,"byte_end":9532157,"line_start":1057,"line_end":1057,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532158,"byte_end":9532165,"line_start":1058,"line_end":1058,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532166,"byte_end":9532189,"line_start":1059,"line_end":1059,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532190,"byte_end":9532228,"line_start":1060,"line_end":1060,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128d_from_lower2_i32_m128i(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532229,"byte_end":9532283,"line_start":1061,"line_end":1061,"column_start":1,"column_end":55}},{"value":"/ let c = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532284,"byte_end":9532326,"line_start":1062,"line_end":1062,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532327,"byte_end":9532368,"line_start":1063,"line_end":1063,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532369,"byte_end":9532376,"line_start":1064,"line_end":1064,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_pd`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532377,"byte_end":9532417,"line_start":1065,"line_end":1065,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2pd xmm, xmm`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532418,"byte_end":9532457,"line_start":1066,"line_end":1066,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532458,"byte_end":9532469,"line_start":1067,"line_end":1067,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532470,"byte_end":9532487,"line_start":1068,"line_end":1068,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533102,"byte_end":9533132,"line_start":1087,"line_end":1087,"column_start":8,"column_end":38},"name":"convert_to_m128_from_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128_from_i32_m128i","value":"pub fn convert_to_m128_from_i32_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the four `i32` lanes to four `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128_from_i32_m128i(a);\n let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_ps`]\n * **Assembly:** `cvtdq2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the four `i32` lanes to four `f32` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532655,"byte_end":9532707,"line_start":1074,"line_end":1074,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532708,"byte_end":9532715,"line_start":1075,"line_end":1075,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532716,"byte_end":9532739,"line_start":1076,"line_end":1076,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532740,"byte_end":9532778,"line_start":1077,"line_end":1077,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128_from_i32_m128i(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532779,"byte_end":9532825,"line_start":1078,"line_end":1078,"column_start":1,"column_end":47}},{"value":"/ let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532826,"byte_end":9532877,"line_start":1079,"line_end":1079,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532878,"byte_end":9532919,"line_start":1080,"line_end":1080,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532920,"byte_end":9532927,"line_start":1081,"line_end":1081,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_ps`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532928,"byte_end":9532968,"line_start":1082,"line_end":1082,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2ps xmm, xmm`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9532969,"byte_end":9533008,"line_start":1083,"line_end":1083,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533009,"byte_end":9533020,"line_start":1084,"line_end":1084,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533021,"byte_end":9533038,"line_start":1085,"line_end":1085,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533625,"byte_end":9533656,"line_start":1104,"line_end":1104,"column_start":8,"column_end":39},"name":"convert_to_i32_m128i_from_m128d","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128d","value":"pub fn convert_to_i32_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_i32_m128i_from_m128d(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_epi32`]\n * **Assembly:** `cvtpd2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `i32` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533196,"byte_end":9533254,"line_start":1091,"line_end":1091,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533255,"byte_end":9533262,"line_start":1092,"line_end":1092,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533263,"byte_end":9533286,"line_start":1093,"line_end":1093,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533287,"byte_end":9533329,"line_start":1094,"line_end":1094,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_i32_m128i_from_m128d(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533330,"byte_end":9533377,"line_start":1095,"line_end":1095,"column_start":1,"column_end":48}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533378,"byte_end":9533409,"line_start":1096,"line_end":1096,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533410,"byte_end":9533442,"line_start":1097,"line_end":1097,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533443,"byte_end":9533450,"line_start":1098,"line_end":1098,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_epi32`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533451,"byte_end":9533491,"line_start":1099,"line_end":1099,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtpd2dq xmm, xmm`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533492,"byte_end":9533531,"line_start":1100,"line_end":1100,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533532,"byte_end":9533543,"line_start":1101,"line_end":1101,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533544,"byte_end":9533561,"line_start":1102,"line_end":1102,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534151,"byte_end":9534177,"line_start":1120,"line_end":1120,"column_start":8,"column_end":34},"name":"convert_to_m128_from_m128d","qualname":"::x86_x64::sse2::convert_to_m128_from_m128d","value":"pub fn convert_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_m128_from_m128d(a);\n assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_ps`]\n * **Assembly:** `cvtpd2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533722,"byte_end":9533780,"line_start":1108,"line_end":1108,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533781,"byte_end":9533788,"line_start":1109,"line_end":1109,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533789,"byte_end":9533812,"line_start":1110,"line_end":1110,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533813,"byte_end":9533855,"line_start":1111,"line_end":1111,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_m128_from_m128d(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533856,"byte_end":9533898,"line_start":1112,"line_end":1112,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533899,"byte_end":9533971,"line_start":1113,"line_end":1113,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533972,"byte_end":9533979,"line_start":1114,"line_end":1114,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_ps`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9533980,"byte_end":9534017,"line_start":1115,"line_end":1115,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtpd2ps xmm, xmm`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534018,"byte_end":9534057,"line_start":1116,"line_end":1116,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534058,"byte_end":9534069,"line_start":1117,"line_end":1117,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534070,"byte_end":9534087,"line_start":1118,"line_end":1118,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534659,"byte_end":9534689,"line_start":1137,"line_end":1137,"column_start":8,"column_end":38},"name":"convert_to_i32_m128i_from_m128","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128","value":"pub fn convert_to_i32_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);\n let b = convert_to_i32_m128i_from_m128(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n * **Intrinsic:** [`_mm_cvtps_epi32`]\n * **Assembly:** `cvtps2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the `f32` lanes to `i32` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534238,"byte_end":9534280,"line_start":1124,"line_end":1124,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534281,"byte_end":9534288,"line_start":1125,"line_end":1125,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534289,"byte_end":9534312,"line_start":1126,"line_end":1126,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534313,"byte_end":9534364,"line_start":1127,"line_end":1127,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_i32_m128i_from_m128(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534365,"byte_end":9534411,"line_start":1128,"line_end":1128,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534412,"byte_end":9534443,"line_start":1129,"line_end":1129,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534444,"byte_end":9534476,"line_start":1130,"line_end":1130,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534477,"byte_end":9534484,"line_start":1131,"line_end":1131,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_epi32`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534485,"byte_end":9534525,"line_start":1132,"line_end":1132,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtps2dq xmm, xmm`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534526,"byte_end":9534565,"line_start":1133,"line_end":1133,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534566,"byte_end":9534577,"line_start":1134,"line_end":1134,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534578,"byte_end":9534595,"line_start":1135,"line_end":1135,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535193,"byte_end":9535226,"line_start":1153,"line_end":1153,"column_start":8,"column_end":41},"name":"convert_to_m128d_from_lower2_m128","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_m128","value":"pub fn convert_to_m128d_from_lower2_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);\n let b = convert_to_m128d_from_lower2_m128(a);\n assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);\n ```\n * **Intrinsic:** [`_mm_cvtps_pd`]\n * **Assembly:** `cvtps2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534754,"byte_end":9534812,"line_start":1141,"line_end":1141,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534813,"byte_end":9534820,"line_start":1142,"line_end":1142,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534821,"byte_end":9534844,"line_start":1143,"line_end":1143,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534845,"byte_end":9534896,"line_start":1144,"line_end":1144,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_m128d_from_lower2_m128(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534897,"byte_end":9534946,"line_start":1145,"line_end":1145,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9534947,"byte_end":9535013,"line_start":1146,"line_end":1146,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535014,"byte_end":9535021,"line_start":1147,"line_end":1147,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_pd`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535022,"byte_end":9535059,"line_start":1148,"line_end":1148,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtps2pd xmm, xmm`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535060,"byte_end":9535099,"line_start":1149,"line_end":1149,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535100,"byte_end":9535111,"line_start":1150,"line_end":1150,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535112,"byte_end":9535129,"line_start":1151,"line_end":1151,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535572,"byte_end":9535592,"line_start":1167,"line_end":1167,"column_start":8,"column_end":28},"name":"get_f64_from_m128d_s","qualname":"::x86_x64::sse2::get_f64_from_m128d_s","value":"pub fn get_f64_from_m128d_s(m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the lower lane as an `f64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_f64_from_m128d_s(a);\n assert_eq!(b, 1.0_f64);\n ```\n","sig":null,"attributes":[{"value":"/ Gets the lower lane as an `f64` value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535288,"byte_end":9535330,"line_start":1157,"line_end":1157,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535331,"byte_end":9535338,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535339,"byte_end":9535362,"line_start":1159,"line_end":1159,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535363,"byte_end":9535405,"line_start":1160,"line_end":1160,"column_start":1,"column_end":43}},{"value":"/ let b = get_f64_from_m128d_s(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535406,"byte_end":9535442,"line_start":1161,"line_end":1161,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1.0_f64);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535443,"byte_end":9535470,"line_start":1162,"line_end":1162,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535471,"byte_end":9535478,"line_start":1163,"line_end":1163,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535479,"byte_end":9535490,"line_start":1164,"line_end":1164,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535491,"byte_end":9535508,"line_start":1165,"line_end":1165,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535933,"byte_end":9535953,"line_start":1181,"line_end":1181,"column_start":8,"column_end":28},"name":"get_i32_from_m128d_s","qualname":"::x86_x64::sse2::get_i32_from_m128d_s","value":"pub fn get_i32_from_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i32_from_m128d_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535647,"byte_end":9535693,"line_start":1171,"line_end":1171,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535694,"byte_end":9535701,"line_start":1172,"line_end":1172,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535702,"byte_end":9535725,"line_start":1173,"line_end":1173,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535726,"byte_end":9535768,"line_start":1174,"line_end":1174,"column_start":1,"column_end":43}},{"value":"/ let b = get_i32_from_m128d_s(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535769,"byte_end":9535805,"line_start":1175,"line_end":1175,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535806,"byte_end":9535831,"line_start":1176,"line_end":1176,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535832,"byte_end":9535839,"line_start":1177,"line_end":1177,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535840,"byte_end":9535851,"line_start":1178,"line_end":1178,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9535852,"byte_end":9535869,"line_start":1179,"line_end":1179,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536326,"byte_end":9536346,"line_start":1196,"line_end":1196,"column_start":8,"column_end":28},"name":"get_i64_from_m128d_s","qualname":"::x86_x64::sse2::get_i64_from_m128d_s","value":"pub fn get_i64_from_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i64_from_m128d_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536009,"byte_end":9536055,"line_start":1185,"line_end":1185,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536056,"byte_end":9536063,"line_start":1186,"line_end":1186,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536064,"byte_end":9536087,"line_start":1187,"line_end":1187,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536088,"byte_end":9536130,"line_start":1188,"line_end":1188,"column_start":1,"column_end":43}},{"value":"/ let b = get_i64_from_m128d_s(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536131,"byte_end":9536167,"line_start":1189,"line_end":1189,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536168,"byte_end":9536193,"line_start":1190,"line_end":1190,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536194,"byte_end":9536201,"line_start":1191,"line_end":1191,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536202,"byte_end":9536213,"line_start":1192,"line_end":1192,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536214,"byte_end":9536231,"line_start":1193,"line_end":1193,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536232,"byte_end":9536262,"line_start":1194,"line_end":1194,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536917,"byte_end":9536947,"line_start":1214,"line_end":1214,"column_start":8,"column_end":38},"name":"convert_m128d_s_replace_m128_s","qualname":"::x86_x64::sse2::convert_m128d_s_replace_m128_s","value":"pub fn convert_m128d_s_replace_m128_s(m128, m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the low `f64` to `f32` and replaces the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let b = m128d::from_array([1.0, 2.5]);\n let c = convert_m128d_s_replace_m128_s(a, b);\n assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsd_ss`]\n * **Assembly:** `cvtsd2ss xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the low `f64` to `f32` and replaces the low lane of the input.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536402,"byte_end":9536477,"line_start":1200,"line_end":1200,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536478,"byte_end":9536485,"line_start":1201,"line_end":1201,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536486,"byte_end":9536509,"line_start":1202,"line_end":1202,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536510,"byte_end":9536561,"line_start":1203,"line_end":1203,"column_start":1,"column_end":52}},{"value":"/ let b = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536562,"byte_end":9536604,"line_start":1204,"line_end":1204,"column_start":1,"column_end":43}},{"value":"/ let c = convert_m128d_s_replace_m128_s(a, b);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536605,"byte_end":9536654,"line_start":1205,"line_end":1205,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536655,"byte_end":9536706,"line_start":1206,"line_end":1206,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536707,"byte_end":9536714,"line_start":1207,"line_end":1207,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsd_ss`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536715,"byte_end":9536752,"line_start":1208,"line_end":1208,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtsd2ss xmm, xmm`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536753,"byte_end":9536792,"line_start":1209,"line_end":1209,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536793,"byte_end":9536804,"line_start":1210,"line_end":1210,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536805,"byte_end":9536822,"line_start":1211,"line_end":1211,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9536823,"byte_end":9536853,"line_start":1212,"line_end":1212,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537304,"byte_end":9537324,"line_start":1228,"line_end":1228,"column_start":8,"column_end":28},"name":"get_i32_from_m128i_s","qualname":"::x86_x64::sse2::get_i32_from_m128i_s","value":"pub fn get_i32_from_m128i_s(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 3, 5, 7]);\n let b = get_i32_from_m128i_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537022,"byte_end":9537068,"line_start":1218,"line_end":1218,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537069,"byte_end":9537076,"line_start":1219,"line_end":1219,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537077,"byte_end":9537100,"line_start":1220,"line_end":1220,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 3, 5, 7]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537101,"byte_end":9537139,"line_start":1221,"line_end":1221,"column_start":1,"column_end":39}},{"value":"/ let b = get_i32_from_m128i_s(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537140,"byte_end":9537176,"line_start":1222,"line_end":1222,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537177,"byte_end":9537202,"line_start":1223,"line_end":1223,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537203,"byte_end":9537210,"line_start":1224,"line_end":1224,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537211,"byte_end":9537222,"line_start":1225,"line_end":1225,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537223,"byte_end":9537240,"line_start":1226,"line_end":1226,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":690},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537694,"byte_end":9537714,"line_start":1243,"line_end":1243,"column_start":8,"column_end":28},"name":"get_i64_from_m128i_s","qualname":"::x86_x64::sse2::get_i64_from_m128i_s","value":"pub fn get_i64_from_m128i_s(m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 3]);\n let b = get_i64_from_m128i_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537383,"byte_end":9537429,"line_start":1232,"line_end":1232,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537430,"byte_end":9537437,"line_start":1233,"line_end":1233,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537438,"byte_end":9537461,"line_start":1234,"line_end":1234,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537462,"byte_end":9537498,"line_start":1235,"line_end":1235,"column_start":1,"column_end":37}},{"value":"/ let b = get_i64_from_m128i_s(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537499,"byte_end":9537535,"line_start":1236,"line_end":1236,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537536,"byte_end":9537561,"line_start":1237,"line_end":1237,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537562,"byte_end":9537569,"line_start":1238,"line_end":1238,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537570,"byte_end":9537581,"line_start":1239,"line_end":1239,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537582,"byte_end":9537599,"line_start":1240,"line_end":1240,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537600,"byte_end":9537630,"line_start":1241,"line_end":1241,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538188,"byte_end":9538215,"line_start":1259,"line_end":1259,"column_start":8,"column_end":35},"name":"convert_i32_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i32_replace_m128d_s","value":"pub fn convert_i32_replace_m128d_s(m128d, i32) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i32_replace_m128d_s(a, 5_i32);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_sd`]\n * **Assembly:** `cvtsi2sd xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f64` and replace the low lane of the input.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537773,"byte_end":9537838,"line_start":1247,"line_end":1247,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537839,"byte_end":9537846,"line_start":1248,"line_end":1248,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537847,"byte_end":9537870,"line_start":1249,"line_end":1249,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537871,"byte_end":9537913,"line_start":1250,"line_end":1250,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i32_replace_m128d_s(a, 5_i32);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537914,"byte_end":9537964,"line_start":1251,"line_end":1251,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9537965,"byte_end":9538006,"line_start":1252,"line_end":1252,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538007,"byte_end":9538014,"line_start":1253,"line_end":1253,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_sd`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538015,"byte_end":9538054,"line_start":1254,"line_end":1254,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r32`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538055,"byte_end":9538094,"line_start":1255,"line_end":1255,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538095,"byte_end":9538106,"line_start":1256,"line_end":1256,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538107,"byte_end":9538124,"line_start":1257,"line_end":1257,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538629,"byte_end":9538644,"line_start":1273,"line_end":1273,"column_start":8,"column_end":23},"name":"set_i32_m128i_s","qualname":"::x86_x64::sse2::set_i32_m128i_s","value":"pub fn set_i32_m128i_s(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i32; 4] = set_i32_m128i_s(1_i32).into();\n let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538291,"byte_end":9538364,"line_start":1263,"line_end":1263,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538365,"byte_end":9538372,"line_start":1264,"line_end":1264,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538373,"byte_end":9538396,"line_start":1265,"line_end":1265,"column_start":1,"column_end":24}},{"value":"/ let a: [i32; 4] = set_i32_m128i_s(1_i32).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538397,"byte_end":9538449,"line_start":1266,"line_end":1266,"column_start":1,"column_end":53}},{"value":"/ let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538450,"byte_end":9538505,"line_start":1267,"line_end":1267,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538506,"byte_end":9538527,"line_start":1268,"line_end":1268,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538528,"byte_end":9538535,"line_start":1269,"line_end":1269,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538536,"byte_end":9538547,"line_start":1270,"line_end":1270,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538548,"byte_end":9538565,"line_start":1271,"line_end":1271,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539154,"byte_end":9539181,"line_start":1290,"line_end":1290,"column_start":8,"column_end":35},"name":"convert_i64_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i64_replace_m128d_s","value":"pub fn convert_i64_replace_m128d_s(m128d, i64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i64` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i64_replace_m128d_s(a, 5_i64);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi64_sd`]\n * **Assembly:** `cvtsi2sd xmm, r64`\n","sig":null,"attributes":[{"value":"/ Convert `i64` to `f64` and replace the low lane of the input.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538708,"byte_end":9538773,"line_start":1277,"line_end":1277,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538774,"byte_end":9538781,"line_start":1278,"line_end":1278,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538782,"byte_end":9538805,"line_start":1279,"line_end":1279,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538806,"byte_end":9538848,"line_start":1280,"line_end":1280,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i64_replace_m128d_s(a, 5_i64);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538849,"byte_end":9538899,"line_start":1281,"line_end":1281,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538900,"byte_end":9538941,"line_start":1282,"line_end":1282,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538942,"byte_end":9538949,"line_start":1283,"line_end":1283,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi64_sd`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538950,"byte_end":9538989,"line_start":1284,"line_end":1284,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r64`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9538990,"byte_end":9539029,"line_start":1285,"line_end":1285,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539030,"byte_end":9539041,"line_start":1286,"line_end":1286,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539042,"byte_end":9539059,"line_start":1287,"line_end":1287,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539060,"byte_end":9539090,"line_start":1288,"line_end":1288,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539624,"byte_end":9539639,"line_start":1305,"line_end":1305,"column_start":8,"column_end":23},"name":"set_i64_m128i_s","qualname":"::x86_x64::sse2::set_i64_m128i_s","value":"pub fn set_i64_m128i_s(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i64; 2] = set_i64_m128i_s(1_i64).into();\n let b: [i64; 2] = m128i::from([1_i64, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539257,"byte_end":9539330,"line_start":1294,"line_end":1294,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539331,"byte_end":9539338,"line_start":1295,"line_end":1295,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539339,"byte_end":9539362,"line_start":1296,"line_end":1296,"column_start":1,"column_end":24}},{"value":"/ let a: [i64; 2] = set_i64_m128i_s(1_i64).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539363,"byte_end":9539415,"line_start":1297,"line_end":1297,"column_start":1,"column_end":53}},{"value":"/ let b: [i64; 2] = m128i::from([1_i64, 0]).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539416,"byte_end":9539469,"line_start":1298,"line_end":1298,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539470,"byte_end":9539491,"line_start":1299,"line_end":1299,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539492,"byte_end":9539499,"line_start":1300,"line_end":1300,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539500,"byte_end":9539511,"line_start":1301,"line_end":1301,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539512,"byte_end":9539529,"line_start":1302,"line_end":1302,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539530,"byte_end":9539560,"line_start":1303,"line_end":1303,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540177,"byte_end":9540207,"line_start":1322,"line_end":1322,"column_start":8,"column_end":38},"name":"convert_m128_s_replace_m128d_s","qualname":"::x86_x64::sse2::convert_m128_s_replace_m128d_s","value":"pub fn convert_m128_s_replace_m128d_s(m128d, m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower `f32` to `f64` and replace the low lane of the input\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let c = convert_m128_s_replace_m128d_s(a, b);\n assert_eq!(c.to_array(), [3.0, 2.5]);\n ```\n * **Intrinsic:** [`_mm_cvtss_sd`]\n * **Assembly:** `cvtss2sd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the lower `f32` to `f64` and replace the low lane of the input","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539703,"byte_end":9539778,"line_start":1309,"line_end":1309,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539779,"byte_end":9539786,"line_start":1310,"line_end":1310,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539787,"byte_end":9539810,"line_start":1311,"line_end":1311,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539811,"byte_end":9539853,"line_start":1312,"line_end":1312,"column_start":1,"column_end":43}},{"value":"/ let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539854,"byte_end":9539905,"line_start":1313,"line_end":1313,"column_start":1,"column_end":52}},{"value":"/ let c = convert_m128_s_replace_m128d_s(a, b);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539906,"byte_end":9539955,"line_start":1314,"line_end":1314,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539956,"byte_end":9539997,"line_start":1315,"line_end":1315,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9539998,"byte_end":9540005,"line_start":1316,"line_end":1316,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtss_sd`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540006,"byte_end":9540043,"line_start":1317,"line_end":1317,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtss2sd xmm, xmm`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540044,"byte_end":9540083,"line_start":1318,"line_end":1318,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540084,"byte_end":9540095,"line_start":1319,"line_end":1319,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540096,"byte_end":9540113,"line_start":1320,"line_end":1320,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540628,"byte_end":9540651,"line_start":1336,"line_end":1336,"column_start":8,"column_end":31},"name":"truncate_m128d_to_m128i","qualname":"::x86_x64::sse2::truncate_m128d_to_m128i","value":"pub fn truncate_m128d_to_m128i(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.1, 2.6]);\n let b = truncate_m128d_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540284,"byte_end":9540360,"line_start":1326,"line_end":1326,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540361,"byte_end":9540368,"line_start":1327,"line_end":1327,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540369,"byte_end":9540392,"line_start":1328,"line_end":1328,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.1, 2.6]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540393,"byte_end":9540435,"line_start":1329,"line_end":1329,"column_start":1,"column_end":43}},{"value":"/ let b = truncate_m128d_to_m128i(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540436,"byte_end":9540475,"line_start":1330,"line_end":1330,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540476,"byte_end":9540526,"line_start":1331,"line_end":1331,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540527,"byte_end":9540534,"line_start":1332,"line_end":1332,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540535,"byte_end":9540546,"line_start":1333,"line_end":1333,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540547,"byte_end":9540564,"line_start":1334,"line_end":1334,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541038,"byte_end":9541060,"line_start":1350,"line_end":1350,"column_start":8,"column_end":30},"name":"truncate_m128_to_m128i","qualname":"::x86_x64::sse2::truncate_m128_to_m128i","value":"pub fn truncate_m128_to_m128i(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);\n let b = truncate_m128_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f32` lanes to `i32` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540718,"byte_end":9540762,"line_start":1340,"line_end":1340,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540763,"byte_end":9540770,"line_start":1341,"line_end":1341,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540771,"byte_end":9540794,"line_start":1342,"line_end":1342,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540795,"byte_end":9540846,"line_start":1343,"line_end":1343,"column_start":1,"column_end":52}},{"value":"/ let b = truncate_m128_to_m128i(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540847,"byte_end":9540885,"line_start":1344,"line_end":1344,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540886,"byte_end":9540936,"line_start":1345,"line_end":1345,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540937,"byte_end":9540944,"line_start":1346,"line_end":1346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540945,"byte_end":9540956,"line_start":1347,"line_end":1347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9540957,"byte_end":9540974,"line_start":1348,"line_end":1348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":698},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541396,"byte_end":9541419,"line_start":1363,"line_end":1363,"column_start":8,"column_end":31},"name":"truncate_to_i32_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i32_m128d_s","value":"pub fn truncate_to_i32_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i32`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i32`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541126,"byte_end":9541168,"line_start":1354,"line_end":1354,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541169,"byte_end":9541176,"line_start":1355,"line_end":1355,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541177,"byte_end":9541200,"line_start":1356,"line_end":1356,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541201,"byte_end":9541243,"line_start":1357,"line_end":1357,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541244,"byte_end":9541294,"line_start":1358,"line_end":1358,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541295,"byte_end":9541302,"line_start":1359,"line_end":1359,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541303,"byte_end":9541314,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541315,"byte_end":9541332,"line_start":1361,"line_end":1361,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":699},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541777,"byte_end":9541800,"line_start":1377,"line_end":1377,"column_start":8,"column_end":31},"name":"truncate_to_i64_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i64_m128d_s","value":"pub fn truncate_to_i64_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i64`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i64`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541476,"byte_end":9541518,"line_start":1367,"line_end":1367,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541519,"byte_end":9541526,"line_start":1368,"line_end":1368,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541527,"byte_end":9541550,"line_start":1369,"line_end":1369,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541551,"byte_end":9541593,"line_start":1370,"line_end":1370,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541594,"byte_end":9541644,"line_start":1371,"line_end":1371,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541645,"byte_end":9541652,"line_start":1372,"line_end":1372,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541653,"byte_end":9541664,"line_start":1373,"line_end":1373,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541665,"byte_end":9541682,"line_start":1374,"line_end":1374,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541683,"byte_end":9541713,"line_start":1375,"line_end":1375,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542176,"byte_end":9542185,"line_start":1392,"line_end":1392,"column_start":8,"column_end":17},"name":"div_m128d","qualname":"::x86_x64::sse2::div_m128d","value":"pub fn div_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 42.0]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = div_m128d(a, b).to_array();\n assert_eq!(c, [0.92, -7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541857,"byte_end":9541878,"line_start":1381,"line_end":1381,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541879,"byte_end":9541886,"line_start":1382,"line_end":1382,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541887,"byte_end":9541910,"line_start":1383,"line_end":1383,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 42.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541911,"byte_end":9541955,"line_start":1384,"line_end":1384,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9541956,"byte_end":9542001,"line_start":1385,"line_end":1385,"column_start":1,"column_end":46}},{"value":"/ let c = div_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542002,"byte_end":9542041,"line_start":1386,"line_end":1386,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [0.92, -7.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542042,"byte_end":9542074,"line_start":1387,"line_end":1387,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542075,"byte_end":9542082,"line_start":1388,"line_end":1388,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542083,"byte_end":9542094,"line_start":1389,"line_end":1389,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542095,"byte_end":9542112,"line_start":1390,"line_end":1390,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542608,"byte_end":9542619,"line_start":1407,"line_end":1407,"column_start":8,"column_end":19},"name":"div_m128d_s","qualname":"::x86_x64::sse2::div_m128d_s","value":"pub fn div_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a / b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = div_m128d_s(a, b).to_array();\n assert_eq!(c, [0.92, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a / b`, high lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542261,"byte_end":9542306,"line_start":1396,"line_end":1396,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542307,"byte_end":9542314,"line_start":1397,"line_end":1397,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542315,"byte_end":9542338,"line_start":1398,"line_end":1398,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542339,"byte_end":9542383,"line_start":1399,"line_end":1399,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542384,"byte_end":9542431,"line_start":1400,"line_end":1400,"column_start":1,"column_end":48}},{"value":"/ let c = div_m128d_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542432,"byte_end":9542473,"line_start":1401,"line_end":1401,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.92, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542474,"byte_end":9542506,"line_start":1402,"line_end":1402,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542507,"byte_end":9542514,"line_start":1403,"line_end":1403,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542515,"byte_end":9542526,"line_start":1404,"line_end":1404,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542527,"byte_end":9542544,"line_start":1405,"line_end":1405,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543127,"byte_end":9543151,"line_start":1425,"line_end":1425,"column_start":8,"column_end":32},"name":"extract_i16_as_i32_m128i","qualname":"::x86_x64::sse2::extract_i16_as_i32_m128i","value":"pub fn extract_i16_as_i32_m128i<const LANE: i32>(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gets an `i16` value out of an `m128i`, returns as `i32`.","sig":null,"attributes":[{"value":"/ Gets an `i16` value out of an `m128i`, returns as `i32`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542695,"byte_end":9542755,"line_start":1411,"line_end":1411,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542756,"byte_end":9542759,"line_start":1412,"line_end":1412,"column_start":1,"column_end":4}},{"value":"/ The lane to get must be a constant in `0..8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542760,"byte_end":9542809,"line_start":1413,"line_end":1413,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542810,"byte_end":9542813,"line_start":1414,"line_end":1414,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542814,"byte_end":9542821,"line_start":1415,"line_end":1415,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542822,"byte_end":9542845,"line_start":1416,"line_end":1416,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0xA_i16, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542846,"byte_end":9542908,"line_start":1417,"line_end":1417,"column_start":1,"column_end":63}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542909,"byte_end":9542915,"line_start":1418,"line_end":1418,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(extract_i16_as_i32_m128i::<0>(a), 0xA);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542916,"byte_end":9542970,"line_start":1419,"line_end":1419,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(extract_i16_as_i32_m128i::<1>(a), 0xB);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9542971,"byte_end":9543025,"line_start":1420,"line_end":1420,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543026,"byte_end":9543033,"line_start":1421,"line_end":1421,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543034,"byte_end":9543045,"line_start":1422,"line_end":1422,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543046,"byte_end":9543063,"line_start":1423,"line_end":1423,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543678,"byte_end":9543703,"line_start":1443,"line_end":1443,"column_start":8,"column_end":33},"name":"insert_i16_from_i32_m128i","qualname":"::x86_x64::sse2::insert_i16_from_i32_m128i","value":"pub fn insert_i16_from_i32_m128i<const LANE: i32>(m128i, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Inserts the low 16 bits of an `i32` value into an `m128i`.","sig":null,"attributes":[{"value":"/ Inserts the low 16 bits of an `i32` value into an `m128i`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543233,"byte_end":9543295,"line_start":1429,"line_end":1429,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543296,"byte_end":9543299,"line_start":1430,"line_end":1430,"column_start":1,"column_end":4}},{"value":"/ The lane to get must be a constant in `0..8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543300,"byte_end":9543349,"line_start":1431,"line_end":1431,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543350,"byte_end":9543353,"line_start":1432,"line_end":1432,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543354,"byte_end":9543361,"line_start":1433,"line_end":1433,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543362,"byte_end":9543385,"line_start":1434,"line_end":1434,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0xA_i16, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543386,"byte_end":9543448,"line_start":1435,"line_end":1435,"column_start":1,"column_end":63}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543449,"byte_end":9543455,"line_start":1436,"line_end":1436,"column_start":1,"column_end":7}},{"value":"/ let b = insert_i16_from_i32_m128i::<0>(a, -1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543456,"byte_end":9543506,"line_start":1437,"line_end":1437,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(<[i16; 8]>::from(b), [-1, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543507,"byte_end":9543576,"line_start":1438,"line_end":1438,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543577,"byte_end":9543584,"line_start":1439,"line_end":1439,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543585,"byte_end":9543596,"line_start":1440,"line_end":1440,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543597,"byte_end":9543614,"line_start":1441,"line_end":1441,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544093,"byte_end":9544103,"line_start":1457,"line_end":1457,"column_start":8,"column_end":18},"name":"load_m128d","qualname":"::x86_x64::sse2::load_m128d","value":"pub fn load_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_m128d(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543804,"byte_end":9543844,"line_start":1447,"line_end":1447,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543845,"byte_end":9543852,"line_start":1448,"line_end":1448,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543853,"byte_end":9543876,"line_start":1449,"line_end":1449,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543877,"byte_end":9543921,"line_start":1450,"line_end":1450,"column_start":1,"column_end":45}},{"value":"/ let b = load_m128d(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543922,"byte_end":9543949,"line_start":1451,"line_end":1451,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543950,"byte_end":9543991,"line_start":1452,"line_end":1452,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9543992,"byte_end":9543999,"line_start":1453,"line_end":1453,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544000,"byte_end":9544011,"line_start":1454,"line_end":1454,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544012,"byte_end":9544029,"line_start":1455,"line_end":1455,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544557,"byte_end":9544577,"line_start":1472,"line_end":1472,"column_start":8,"column_end":28},"name":"load_f64_splat_m128d","qualname":"::x86_x64::sse2::load_f64_splat_m128d","value":"pub fn load_f64_splat_m128d(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f64` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_splat_m128d(&a);\n assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f64` reference into all lanes of a register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544194,"byte_end":9544253,"line_start":1461,"line_end":1461,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544254,"byte_end":9544261,"line_start":1462,"line_end":1462,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544262,"byte_end":9544285,"line_start":1463,"line_end":1463,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544286,"byte_end":9544302,"line_start":1464,"line_end":1464,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_splat_m128d(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544303,"byte_end":9544340,"line_start":1465,"line_end":1465,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544341,"byte_end":9544410,"line_start":1466,"line_end":1466,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544411,"byte_end":9544418,"line_start":1467,"line_end":1467,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544419,"byte_end":9544430,"line_start":1468,"line_end":1468,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544431,"byte_end":9544448,"line_start":1469,"line_end":1469,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544449,"byte_end":9544493,"line_start":1470,"line_end":1470,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544995,"byte_end":9545011,"line_start":1487,"line_end":1487,"column_start":8,"column_end":24},"name":"load_f64_m128d_s","qualname":"::x86_x64::sse2::load_f64_m128d_s","value":"pub fn load_f64_m128d_s(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_m128d_s(&a);\n assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into the low lane of the register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544637,"byte_end":9544695,"line_start":1476,"line_end":1476,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544696,"byte_end":9544703,"line_start":1477,"line_end":1477,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544704,"byte_end":9544727,"line_start":1478,"line_end":1478,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544728,"byte_end":9544744,"line_start":1479,"line_end":1479,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_m128d_s(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544745,"byte_end":9544778,"line_start":1480,"line_end":1480,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544779,"byte_end":9544848,"line_start":1481,"line_end":1481,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544849,"byte_end":9544856,"line_start":1482,"line_end":1482,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544857,"byte_end":9544868,"line_start":1483,"line_end":1483,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544869,"byte_end":9544886,"line_start":1484,"line_end":1484,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9544887,"byte_end":9544931,"line_start":1485,"line_end":1485,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":709},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545369,"byte_end":9545379,"line_start":1501,"line_end":1501,"column_start":8,"column_end":18},"name":"load_m128i","qualname":"::x86_x64::sse2::load_m128i","value":"pub fn load_m128i(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = load_m128i(&a);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545070,"byte_end":9545110,"line_start":1491,"line_end":1491,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545111,"byte_end":9545118,"line_start":1492,"line_end":1492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545119,"byte_end":9545142,"line_start":1493,"line_end":1493,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545143,"byte_end":9545181,"line_start":1494,"line_end":1494,"column_start":1,"column_end":39}},{"value":"/ let b = load_m128i(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545182,"byte_end":9545209,"line_start":1495,"line_end":1495,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545210,"byte_end":9545267,"line_start":1496,"line_end":1496,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545268,"byte_end":9545275,"line_start":1497,"line_end":1497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545276,"byte_end":9545287,"line_start":1498,"line_end":1498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545288,"byte_end":9545305,"line_start":1499,"line_end":1499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":710},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545826,"byte_end":9545849,"line_start":1516,"line_end":1516,"column_start":8,"column_end":31},"name":"load_replace_high_m128d","qualname":"::x86_x64::sse2::load_replace_high_m128d","value":"pub fn load_replace_high_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_high_m128d(a, &double);\n assert_eq!(b.to_array(), [1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the high lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545477,"byte_end":9545542,"line_start":1505,"line_end":1505,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545543,"byte_end":9545550,"line_start":1506,"line_end":1506,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545551,"byte_end":9545574,"line_start":1507,"line_end":1507,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545575,"byte_end":9545611,"line_start":1508,"line_end":1508,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545612,"byte_end":9545633,"line_start":1509,"line_end":1509,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_high_m128d(a, &double);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545634,"byte_end":9545682,"line_start":1510,"line_end":1510,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(b.to_array(), [1.0, 7.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545683,"byte_end":9545724,"line_start":1511,"line_end":1511,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545725,"byte_end":9545732,"line_start":1512,"line_end":1512,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545733,"byte_end":9545744,"line_start":1513,"line_end":1513,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545745,"byte_end":9545762,"line_start":1514,"line_end":1514,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546218,"byte_end":9546234,"line_start":1530,"line_end":1530,"column_start":8,"column_end":24},"name":"load_i64_m128i_s","qualname":"::x86_x64::sse2::load_i64_m128i_s","value":"pub fn load_i64_m128i_s(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the low `i64` into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = load_i64_m128i_s(&a);\n assert_eq!([1_i64, 0], <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the low `i64` into a register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545924,"byte_end":9545964,"line_start":1520,"line_end":1520,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545965,"byte_end":9545972,"line_start":1521,"line_end":1521,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545973,"byte_end":9545996,"line_start":1522,"line_end":1522,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9545997,"byte_end":9546033,"line_start":1523,"line_end":1523,"column_start":1,"column_end":37}},{"value":"/ let b = load_i64_m128i_s(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546034,"byte_end":9546067,"line_start":1524,"line_end":1524,"column_start":1,"column_end":34}},{"value":"/ assert_eq!([1_i64, 0], <[i64; 2]>::from(b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546068,"byte_end":9546116,"line_start":1525,"line_end":1525,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546117,"byte_end":9546124,"line_start":1526,"line_end":1526,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546125,"byte_end":9546136,"line_start":1527,"line_end":1527,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546137,"byte_end":9546154,"line_start":1528,"line_end":1528,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":712},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546680,"byte_end":9546702,"line_start":1545,"line_end":1545,"column_start":8,"column_end":30},"name":"load_replace_low_m128d","qualname":"::x86_x64::sse2::load_replace_low_m128d","value":"pub fn load_replace_low_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_low_m128d(a, &double);\n assert_eq!(b.to_array(), [7.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the low lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546333,"byte_end":9546397,"line_start":1534,"line_end":1534,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546398,"byte_end":9546405,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546406,"byte_end":9546429,"line_start":1536,"line_end":1536,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546430,"byte_end":9546466,"line_start":1537,"line_end":1537,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546467,"byte_end":9546488,"line_start":1538,"line_end":1538,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_low_m128d(a, &double);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546489,"byte_end":9546536,"line_start":1539,"line_end":1539,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(b.to_array(), [7.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546537,"byte_end":9546578,"line_start":1540,"line_end":1540,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546579,"byte_end":9546586,"line_start":1541,"line_end":1541,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546587,"byte_end":9546598,"line_start":1542,"line_end":1542,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546599,"byte_end":9546616,"line_start":1543,"line_end":1543,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":713},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547124,"byte_end":9547142,"line_start":1559,"line_end":1559,"column_start":8,"column_end":26},"name":"load_reverse_m128d","qualname":"::x86_x64::sse2::load_reverse_m128d","value":"pub fn load_reverse_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_reverse_m128d(&a);\n assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546777,"byte_end":9546837,"line_start":1549,"line_end":1549,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546838,"byte_end":9546845,"line_start":1550,"line_end":1550,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546846,"byte_end":9546869,"line_start":1551,"line_end":1551,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546870,"byte_end":9546914,"line_start":1552,"line_end":1552,"column_start":1,"column_end":45}},{"value":"/ let b = load_reverse_m128d(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546915,"byte_end":9546950,"line_start":1553,"line_end":1553,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9546951,"byte_end":9547022,"line_start":1554,"line_end":1554,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547023,"byte_end":9547030,"line_start":1555,"line_end":1555,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547031,"byte_end":9547042,"line_start":1556,"line_end":1556,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547043,"byte_end":9547060,"line_start":1557,"line_end":1557,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547710,"byte_end":9547730,"line_start":1577,"line_end":1577,"column_start":8,"column_end":28},"name":"load_unaligned_m128d","qualname":"::x86_x64::sse2::load_unaligned_m128d","value":"pub fn load_unaligned_m128d(&[f64; ]) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547234,"byte_end":9547274,"line_start":1563,"line_end":1563,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547275,"byte_end":9547278,"line_start":1564,"line_end":1564,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547279,"byte_end":9547357,"line_start":1565,"line_end":1565,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 8-byte","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547358,"byte_end":9547438,"line_start":1566,"line_end":1566,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547439,"byte_end":9547451,"line_start":1567,"line_end":1567,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547452,"byte_end":9547459,"line_start":1568,"line_end":1568,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547460,"byte_end":9547483,"line_start":1569,"line_end":1569,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547484,"byte_end":9547509,"line_start":1570,"line_end":1570,"column_start":1,"column_end":26}},{"value":"/ let b = load_unaligned_m128d(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547510,"byte_end":9547547,"line_start":1571,"line_end":1571,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547548,"byte_end":9547608,"line_start":1572,"line_end":1572,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547609,"byte_end":9547616,"line_start":1573,"line_end":1573,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547617,"byte_end":9547628,"line_start":1574,"line_end":1574,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547629,"byte_end":9547646,"line_start":1575,"line_end":1575,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548356,"byte_end":9548376,"line_start":1596,"line_end":1596,"column_start":8,"column_end":28},"name":"load_unaligned_m128i","qualname":"::x86_x64::sse2::load_unaligned_m128i","value":"pub fn load_unaligned_m128i(&[u8; ]) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547828,"byte_end":9547868,"line_start":1581,"line_end":1581,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547869,"byte_end":9547872,"line_start":1582,"line_end":1582,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547873,"byte_end":9547951,"line_start":1583,"line_end":1583,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is less","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9547952,"byte_end":9548025,"line_start":1584,"line_end":1584,"column_start":1,"column_end":74}},{"value":"/ aligned.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548026,"byte_end":9548038,"line_start":1585,"line_end":1585,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548039,"byte_end":9548046,"line_start":1586,"line_end":1586,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548047,"byte_end":9548070,"line_start":1587,"line_end":1587,"column_start":1,"column_end":24}},{"value":"/ let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548071,"byte_end":9548139,"line_start":1588,"line_end":1588,"column_start":1,"column_end":69}},{"value":"/ let b = load_unaligned_m128i(&a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548140,"byte_end":9548177,"line_start":1589,"line_end":1589,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, <[u8; 16]>::from(b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548178,"byte_end":9548217,"line_start":1590,"line_end":1590,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548218,"byte_end":9548225,"line_start":1591,"line_end":1591,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548226,"byte_end":9548237,"line_start":1592,"line_end":1592,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548238,"byte_end":9548255,"line_start":1593,"line_end":1593,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548256,"byte_end":9548292,"line_start":1594,"line_end":1594,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548957,"byte_end":9548985,"line_start":1612,"line_end":1612,"column_start":8,"column_end":36},"name":"mul_i16_horizontal_add_m128i","qualname":"::x86_x64::sse2::mul_i16_horizontal_add_m128i","value":"pub fn mul_i16_horizontal_add_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`\n values to produce the final output.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();\n assert_eq!(c, [17, 53, 67, -81]);\n ```\n","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548481,"byte_end":9548559,"line_start":1600,"line_end":1600,"column_start":1,"column_end":79}},{"value":"/ values to produce the final output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548560,"byte_end":9548599,"line_start":1601,"line_end":1601,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548600,"byte_end":9548607,"line_start":1602,"line_end":1602,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548608,"byte_end":9548631,"line_start":1603,"line_end":1603,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548632,"byte_end":9548690,"line_start":1604,"line_end":1604,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548691,"byte_end":9548752,"line_start":1605,"line_end":1605,"column_start":1,"column_end":62}},{"value":"/ let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548753,"byte_end":9548817,"line_start":1606,"line_end":1606,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(c, [17, 53, 67, -81]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548818,"byte_end":9548855,"line_start":1607,"line_end":1607,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548856,"byte_end":9548863,"line_start":1608,"line_end":1608,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548864,"byte_end":9548875,"line_start":1609,"line_end":1609,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9548876,"byte_end":9548893,"line_start":1610,"line_end":1610,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549547,"byte_end":9549559,"line_start":1627,"line_end":1627,"column_start":8,"column_end":20},"name":"max_u8_m128i","qualname":"::x86_x64::sse2::max_u8_m128i","value":"pub fn max_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = max_u8_m128i(a, b).into();\n assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `u8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549065,"byte_end":9549109,"line_start":1616,"line_end":1616,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549110,"byte_end":9549117,"line_start":1617,"line_end":1617,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549118,"byte_end":9549141,"line_start":1618,"line_end":1618,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549142,"byte_end":9549225,"line_start":1619,"line_end":1619,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549226,"byte_end":9549315,"line_start":1620,"line_end":1620,"column_start":1,"column_end":90}},{"value":"/ let c: [u8; 16] = max_u8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549316,"byte_end":9549364,"line_start":1621,"line_end":1621,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549365,"byte_end":9549445,"line_start":1622,"line_end":1622,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549446,"byte_end":9549453,"line_start":1623,"line_end":1623,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549454,"byte_end":9549465,"line_start":1624,"line_end":1624,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549466,"byte_end":9549483,"line_start":1625,"line_end":1625,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550040,"byte_end":9550053,"line_start":1642,"line_end":1642,"column_start":8,"column_end":21},"name":"max_i16_m128i","qualname":"::x86_x64::sse2::max_i16_m128i","value":"pub fn max_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = max_i16_m128i(a, b).into();\n assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `i16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549637,"byte_end":9549682,"line_start":1631,"line_end":1631,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549683,"byte_end":9549690,"line_start":1632,"line_end":1632,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549691,"byte_end":9549714,"line_start":1633,"line_end":1633,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549715,"byte_end":9549773,"line_start":1634,"line_end":1634,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549774,"byte_end":9549835,"line_start":1635,"line_end":1635,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = max_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549836,"byte_end":9549885,"line_start":1636,"line_end":1636,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549886,"byte_end":9549938,"line_start":1637,"line_end":1637,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549939,"byte_end":9549946,"line_start":1638,"line_end":1638,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549947,"byte_end":9549958,"line_start":1639,"line_end":1639,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9549959,"byte_end":9549976,"line_start":1640,"line_end":1640,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550448,"byte_end":9550457,"line_start":1657,"line_end":1657,"column_start":8,"column_end":17},"name":"max_m128d","qualname":"::x86_x64::sse2::max_m128d","value":"pub fn max_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([5.0, 2.0]);\n let b = m128d::from_array([1.0, 6.0]);\n let c = max_m128d(a, b).to_array();\n assert_eq!(c, [5.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550132,"byte_end":9550157,"line_start":1646,"line_end":1646,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550158,"byte_end":9550165,"line_start":1647,"line_end":1647,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550166,"byte_end":9550189,"line_start":1648,"line_end":1648,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([5.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550190,"byte_end":9550232,"line_start":1649,"line_end":1649,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550233,"byte_end":9550275,"line_start":1650,"line_end":1650,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550276,"byte_end":9550315,"line_start":1651,"line_end":1651,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [5.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550316,"byte_end":9550346,"line_start":1652,"line_end":1652,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550347,"byte_end":9550354,"line_start":1653,"line_end":1653,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550355,"byte_end":9550366,"line_start":1654,"line_end":1654,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550367,"byte_end":9550384,"line_start":1655,"line_end":1655,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550876,"byte_end":9550887,"line_start":1672,"line_end":1672,"column_start":8,"column_end":19},"name":"max_m128d_s","qualname":"::x86_x64::sse2::max_m128d_s","value":"pub fn max_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = max_m128d_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550533,"byte_end":9550581,"line_start":1661,"line_end":1661,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550582,"byte_end":9550589,"line_start":1662,"line_end":1662,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550590,"byte_end":9550613,"line_start":1663,"line_end":1663,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550614,"byte_end":9550657,"line_start":1664,"line_end":1664,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550658,"byte_end":9550700,"line_start":1665,"line_end":1665,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550701,"byte_end":9550742,"line_start":1666,"line_end":1666,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [5.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550743,"byte_end":9550774,"line_start":1667,"line_end":1667,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550775,"byte_end":9550782,"line_start":1668,"line_end":1668,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550783,"byte_end":9550794,"line_start":1669,"line_end":1669,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550795,"byte_end":9550812,"line_start":1670,"line_end":1670,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551434,"byte_end":9551446,"line_start":1687,"line_end":1687,"column_start":8,"column_end":20},"name":"min_u8_m128i","qualname":"::x86_x64::sse2::min_u8_m128i","value":"pub fn min_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);\n let c: [u8; 16] = min_u8_m128i(a, b).into();\n assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `u8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9550963,"byte_end":9551007,"line_start":1676,"line_end":1676,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551008,"byte_end":9551015,"line_start":1677,"line_end":1677,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551016,"byte_end":9551039,"line_start":1678,"line_end":1678,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551040,"byte_end":9551123,"line_start":1679,"line_end":1679,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551124,"byte_end":9551208,"line_start":1680,"line_end":1680,"column_start":1,"column_end":85}},{"value":"/ let c: [u8; 16] = min_u8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551209,"byte_end":9551257,"line_start":1681,"line_end":1681,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551258,"byte_end":9551332,"line_start":1682,"line_end":1682,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551333,"byte_end":9551340,"line_start":1683,"line_end":1683,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551341,"byte_end":9551352,"line_start":1684,"line_end":1684,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551353,"byte_end":9551370,"line_start":1685,"line_end":1685,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551930,"byte_end":9551943,"line_start":1702,"line_end":1702,"column_start":8,"column_end":21},"name":"min_i16_m128i","qualname":"::x86_x64::sse2::min_i16_m128i","value":"pub fn min_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = min_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `i16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551524,"byte_end":9551569,"line_start":1691,"line_end":1691,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551570,"byte_end":9551577,"line_start":1692,"line_end":1692,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551578,"byte_end":9551601,"line_start":1693,"line_end":1693,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551602,"byte_end":9551660,"line_start":1694,"line_end":1694,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551661,"byte_end":9551722,"line_start":1695,"line_end":1695,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = min_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551723,"byte_end":9551772,"line_start":1696,"line_end":1696,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551773,"byte_end":9551828,"line_start":1697,"line_end":1697,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551829,"byte_end":9551836,"line_start":1698,"line_end":1698,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551837,"byte_end":9551848,"line_start":1699,"line_end":1699,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9551849,"byte_end":9551866,"line_start":1700,"line_end":1700,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552339,"byte_end":9552348,"line_start":1717,"line_end":1717,"column_start":8,"column_end":17},"name":"min_m128d","qualname":"::x86_x64::sse2::min_m128d","value":"pub fn min_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = min_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552022,"byte_end":9552047,"line_start":1706,"line_end":1706,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552048,"byte_end":9552055,"line_start":1707,"line_end":1707,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552056,"byte_end":9552079,"line_start":1708,"line_end":1708,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552080,"byte_end":9552123,"line_start":1709,"line_end":1709,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552124,"byte_end":9552166,"line_start":1710,"line_end":1710,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552167,"byte_end":9552206,"line_start":1711,"line_end":1711,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [1.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552207,"byte_end":9552237,"line_start":1712,"line_end":1712,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552238,"byte_end":9552245,"line_start":1713,"line_end":1713,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552246,"byte_end":9552257,"line_start":1714,"line_end":1714,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552258,"byte_end":9552275,"line_start":1715,"line_end":1715,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552767,"byte_end":9552778,"line_start":1732,"line_end":1732,"column_start":8,"column_end":19},"name":"min_m128d_s","qualname":"::x86_x64::sse2::min_m128d_s","value":"pub fn min_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([0.0, 6.0]);\n let c = min_m128d_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552424,"byte_end":9552472,"line_start":1721,"line_end":1721,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552473,"byte_end":9552480,"line_start":1722,"line_end":1722,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552481,"byte_end":9552504,"line_start":1723,"line_end":1723,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552505,"byte_end":9552548,"line_start":1724,"line_end":1724,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([0.0, 6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552549,"byte_end":9552591,"line_start":1725,"line_end":1725,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552592,"byte_end":9552633,"line_start":1726,"line_end":1726,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552634,"byte_end":9552665,"line_start":1727,"line_end":1727,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552666,"byte_end":9552673,"line_start":1728,"line_end":1728,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552674,"byte_end":9552685,"line_start":1729,"line_end":1729,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552686,"byte_end":9552703,"line_start":1730,"line_end":1730,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553163,"byte_end":9553179,"line_start":1746,"line_end":1746,"column_start":8,"column_end":24},"name":"copy_i64_m128i_s","qualname":"::x86_x64::sse2::copy_i64_m128i_s","value":"pub fn copy_i64_m128i_s(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Copy the low `i64` lane to a new register, upper bits 0.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = copy_i64_m128i_s(a);\n assert_eq!(<[i64; 2]>::from(b), [1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low `i64` lane to a new register, upper bits 0.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552854,"byte_end":9552914,"line_start":1736,"line_end":1736,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552915,"byte_end":9552922,"line_start":1737,"line_end":1737,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552923,"byte_end":9552946,"line_start":1738,"line_end":1738,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552947,"byte_end":9552983,"line_start":1739,"line_end":1739,"column_start":1,"column_end":37}},{"value":"/ let b = copy_i64_m128i_s(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9552984,"byte_end":9553016,"line_start":1740,"line_end":1740,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(b), [1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553017,"byte_end":9553061,"line_start":1741,"line_end":1741,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553062,"byte_end":9553069,"line_start":1742,"line_end":1742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553070,"byte_end":9553081,"line_start":1743,"line_end":1743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553082,"byte_end":9553099,"line_start":1744,"line_end":1744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553614,"byte_end":9553640,"line_start":1761,"line_end":1761,"column_start":8,"column_end":34},"name":"copy_replace_low_f64_m128d","qualname":"::x86_x64::sse2::copy_replace_low_f64_m128d","value":"pub fn copy_replace_low_f64_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copies the `a` value and replaces the low lane with the low `b` value.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let b = m128d::from([3.0, 4.0]);\n let c = copy_replace_low_f64_m128d(a, b);\n assert_eq!(c.to_array(), [3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copies the `a` value and replaces the low lane with the low `b` value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553244,"byte_end":9553318,"line_start":1750,"line_end":1750,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553319,"byte_end":9553326,"line_start":1751,"line_end":1751,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553327,"byte_end":9553350,"line_start":1752,"line_end":1752,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553351,"byte_end":9553387,"line_start":1753,"line_end":1753,"column_start":1,"column_end":37}},{"value":"/ let b = m128d::from([3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553388,"byte_end":9553424,"line_start":1754,"line_end":1754,"column_start":1,"column_end":37}},{"value":"/ let c = copy_replace_low_f64_m128d(a, b);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553425,"byte_end":9553470,"line_start":1755,"line_end":1755,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553471,"byte_end":9553512,"line_start":1756,"line_end":1756,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553513,"byte_end":9553520,"line_start":1757,"line_end":1757,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553521,"byte_end":9553532,"line_start":1758,"line_end":1758,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553533,"byte_end":9553550,"line_start":1759,"line_end":1759,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554131,"byte_end":9554149,"line_start":1777,"line_end":1777,"column_start":8,"column_end":26},"name":"move_mask_i8_m128i","qualname":"::x86_x64::sse2::move_mask_i8_m128i","value":"pub fn move_mask_i8_m128i(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the `i8` sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the `i8` sign bit of each lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553717,"byte_end":9553760,"line_start":1765,"line_end":1765,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553761,"byte_end":9553764,"line_start":1766,"line_end":1766,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553765,"byte_end":9553828,"line_start":1767,"line_end":1767,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553829,"byte_end":9553836,"line_start":1768,"line_end":1768,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553837,"byte_end":9553860,"line_start":1769,"line_end":1769,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, -11, -2, 13, 4, 15, -6, 17, 8, 19, -20, 21, 22, 23, -24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553861,"byte_end":9553955,"line_start":1770,"line_end":1770,"column_start":1,"column_end":95}},{"value":"/ let i = move_mask_i8_m128i(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553956,"byte_end":9553990,"line_start":1771,"line_end":1771,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(i, 0b0100010001000110);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9553991,"byte_end":9554029,"line_start":1772,"line_end":1772,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554030,"byte_end":9554037,"line_start":1773,"line_end":1773,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554038,"byte_end":9554049,"line_start":1774,"line_end":1774,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554050,"byte_end":9554067,"line_start":1775,"line_end":1775,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554539,"byte_end":9554554,"line_start":1793,"line_end":1793,"column_start":8,"column_end":23},"name":"move_mask_m128d","qualname":"::x86_x64::sse2::move_mask_m128d","value":"pub fn move_mask_m128d(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554208,"byte_end":9554246,"line_start":1781,"line_end":1781,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554247,"byte_end":9554250,"line_start":1782,"line_end":1782,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554251,"byte_end":9554303,"line_start":1783,"line_end":1783,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554304,"byte_end":9554311,"line_start":1784,"line_end":1784,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554312,"byte_end":9554335,"line_start":1785,"line_end":1785,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([-1.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554336,"byte_end":9554380,"line_start":1786,"line_end":1786,"column_start":1,"column_end":45}},{"value":"/ let i = move_mask_m128d(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554381,"byte_end":9554412,"line_start":1787,"line_end":1787,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(i, 0b01);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554413,"byte_end":9554437,"line_start":1788,"line_end":1788,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554438,"byte_end":9554445,"line_start":1789,"line_end":1789,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554446,"byte_end":9554457,"line_start":1790,"line_end":1790,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554458,"byte_end":9554475,"line_start":1791,"line_end":1791,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555041,"byte_end":9555064,"line_start":1809,"line_end":1809,"column_start":8,"column_end":31},"name":"mul_widen_u32_odd_m128i","qualname":"::x86_x64::sse2::mul_widen_u32_odd_m128i","value":"pub fn mul_widen_u32_odd_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","sig":null,"attributes":[{"value":"/ Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554611,"byte_end":9554684,"line_start":1797,"line_end":1797,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554685,"byte_end":9554688,"line_start":1798,"line_end":1798,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554689,"byte_end":9554696,"line_start":1799,"line_end":1799,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554697,"byte_end":9554720,"line_start":1800,"line_end":1800,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 7, u32::MAX, 7]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554721,"byte_end":9554766,"line_start":1801,"line_end":1801,"column_start":1,"column_end":46}},{"value":"/ let b = m128i::from([5, 7, u32::MAX, 7]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554767,"byte_end":9554812,"line_start":1802,"line_end":1802,"column_start":1,"column_end":46}},{"value":"/ let c: [u64; 2] = mul_widen_u32_odd_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554813,"byte_end":9554872,"line_start":1803,"line_end":1803,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [(1 * 5), (u32::MAX as u64 * u32::MAX as u64)]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554873,"byte_end":9554939,"line_start":1804,"line_end":1804,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554940,"byte_end":9554947,"line_start":1805,"line_end":1805,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554948,"byte_end":9554959,"line_start":1806,"line_end":1806,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9554960,"byte_end":9554977,"line_start":1807,"line_end":1807,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555466,"byte_end":9555475,"line_start":1824,"line_end":1824,"column_start":8,"column_end":17},"name":"mul_m128d","qualname":"::x86_x64::sse2::mul_m128d","value":"pub fn mul_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = mul_m128d(a, b).to_array();\n assert_eq!(c, [9200.0, -525.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555143,"byte_end":9555164,"line_start":1813,"line_end":1813,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555165,"byte_end":9555172,"line_start":1814,"line_end":1814,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555173,"byte_end":9555196,"line_start":1815,"line_end":1815,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555197,"byte_end":9555241,"line_start":1816,"line_end":1816,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555242,"byte_end":9555287,"line_start":1817,"line_end":1817,"column_start":1,"column_end":46}},{"value":"/ let c = mul_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555288,"byte_end":9555327,"line_start":1818,"line_end":1818,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [9200.0, -525.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555328,"byte_end":9555364,"line_start":1819,"line_end":1819,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555365,"byte_end":9555372,"line_start":1820,"line_end":1820,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555373,"byte_end":9555384,"line_start":1821,"line_end":1821,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555385,"byte_end":9555402,"line_start":1822,"line_end":1822,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555900,"byte_end":9555911,"line_start":1839,"line_end":1839,"column_start":8,"column_end":19},"name":"mul_m128d_s","qualname":"::x86_x64::sse2::mul_m128d_s","value":"pub fn mul_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a * b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = mul_m128d_s(a, b).to_array();\n assert_eq!(c, [9200.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a * b`, high lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555551,"byte_end":9555596,"line_start":1828,"line_end":1828,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555597,"byte_end":9555604,"line_start":1829,"line_end":1829,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555605,"byte_end":9555628,"line_start":1830,"line_end":1830,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555629,"byte_end":9555673,"line_start":1831,"line_end":1831,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555674,"byte_end":9555721,"line_start":1832,"line_end":1832,"column_start":1,"column_end":48}},{"value":"/ let c = mul_m128d_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555722,"byte_end":9555763,"line_start":1833,"line_end":1833,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [9200.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555764,"byte_end":9555798,"line_start":1834,"line_end":1834,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555799,"byte_end":9555806,"line_start":1835,"line_end":1835,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555807,"byte_end":9555818,"line_start":1836,"line_end":1836,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555819,"byte_end":9555836,"line_start":1837,"line_end":1837,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":736},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556456,"byte_end":9556479,"line_start":1855,"line_end":1855,"column_start":8,"column_end":31},"name":"mul_i16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_high_m128i","value":"pub fn mul_i16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9555987,"byte_end":9556060,"line_start":1843,"line_end":1843,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556061,"byte_end":9556079,"line_start":1844,"line_end":1844,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556080,"byte_end":9556087,"line_start":1845,"line_end":1845,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556088,"byte_end":9556111,"line_start":1846,"line_end":1846,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556112,"byte_end":9556177,"line_start":1847,"line_end":1847,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556178,"byte_end":9556246,"line_start":1848,"line_end":1848,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556247,"byte_end":9556306,"line_start":1849,"line_end":1849,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556307,"byte_end":9556354,"line_start":1850,"line_end":1850,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556355,"byte_end":9556362,"line_start":1851,"line_end":1851,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556363,"byte_end":9556374,"line_start":1852,"line_end":1852,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556375,"byte_end":9556392,"line_start":1853,"line_end":1853,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":737},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557031,"byte_end":9557054,"line_start":1871,"line_end":1871,"column_start":8,"column_end":31},"name":"mul_u16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_u16_keep_high_m128i","value":"pub fn mul_u16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);\n let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);\n let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556560,"byte_end":9556633,"line_start":1859,"line_end":1859,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556634,"byte_end":9556652,"line_start":1860,"line_end":1860,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556653,"byte_end":9556660,"line_start":1861,"line_end":1861,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556661,"byte_end":9556684,"line_start":1862,"line_end":1862,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556685,"byte_end":9556749,"line_start":1863,"line_end":1863,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556750,"byte_end":9556817,"line_start":1864,"line_end":1864,"column_start":1,"column_end":68}},{"value":"/ let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556818,"byte_end":9556877,"line_start":1865,"line_end":1865,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556878,"byte_end":9556929,"line_start":1866,"line_end":1866,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556930,"byte_end":9556937,"line_start":1867,"line_end":1867,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556938,"byte_end":9556949,"line_start":1868,"line_end":1868,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9556950,"byte_end":9556967,"line_start":1869,"line_end":1869,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":738},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557618,"byte_end":9557640,"line_start":1887,"line_end":1887,"column_start":8,"column_end":30},"name":"mul_i16_keep_low_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_low_m128i","value":"pub fn mul_i16_keep_low_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();\n assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557135,"byte_end":9557207,"line_start":1875,"line_end":1875,"column_start":1,"column_end":73}},{"value":"/ intermediates.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557208,"byte_end":9557226,"line_start":1876,"line_end":1876,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557227,"byte_end":9557234,"line_start":1877,"line_end":1877,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557235,"byte_end":9557258,"line_start":1878,"line_end":1878,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557259,"byte_end":9557324,"line_start":1879,"line_end":1879,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557325,"byte_end":9557393,"line_start":1880,"line_end":1880,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557394,"byte_end":9557452,"line_start":1881,"line_end":1881,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557453,"byte_end":9557516,"line_start":1882,"line_end":1882,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557517,"byte_end":9557524,"line_start":1883,"line_end":1883,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557525,"byte_end":9557536,"line_start":1884,"line_end":1884,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557537,"byte_end":9557554,"line_start":1885,"line_end":1885,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558034,"byte_end":9558045,"line_start":1902,"line_end":1902,"column_start":8,"column_end":19},"name":"bitor_m128d","qualname":"::x86_x64::sse2::bitor_m128d","value":"pub fn bitor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitor_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557721,"byte_end":9557741,"line_start":1891,"line_end":1891,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557742,"byte_end":9557749,"line_start":1892,"line_end":1892,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557750,"byte_end":9557773,"line_start":1893,"line_end":1893,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557774,"byte_end":9557816,"line_start":1894,"line_end":1894,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557817,"byte_end":9557859,"line_start":1895,"line_end":1895,"column_start":1,"column_end":43}},{"value":"/ let c = bitor_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557860,"byte_end":9557901,"line_start":1896,"line_end":1896,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557902,"byte_end":9557932,"line_start":1897,"line_end":1897,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557933,"byte_end":9557940,"line_start":1898,"line_end":1898,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557941,"byte_end":9557952,"line_start":1899,"line_end":1899,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9557953,"byte_end":9557970,"line_start":1900,"line_end":1900,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":740},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558433,"byte_end":9558444,"line_start":1917,"line_end":1917,"column_start":8,"column_end":19},"name":"bitor_m128i","qualname":"::x86_x64::sse2::bitor_m128i","value":"pub fn bitor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitor_m128i(a, b).into();\n assert_eq!(c, [1, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558120,"byte_end":9558140,"line_start":1906,"line_end":1906,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558141,"byte_end":9558148,"line_start":1907,"line_end":1907,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558149,"byte_end":9558172,"line_start":1908,"line_end":1908,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558173,"byte_end":9558211,"line_start":1909,"line_end":1909,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558212,"byte_end":9558250,"line_start":1910,"line_end":1910,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitor_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558251,"byte_end":9558298,"line_start":1911,"line_end":1911,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [1, 1, 1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558299,"byte_end":9558331,"line_start":1912,"line_end":1912,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558332,"byte_end":9558339,"line_start":1913,"line_end":1913,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558340,"byte_end":9558351,"line_start":1914,"line_end":1914,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558352,"byte_end":9558369,"line_start":1915,"line_end":1915,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":741},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558967,"byte_end":9558987,"line_start":1932,"line_end":1932,"column_start":8,"column_end":28},"name":"pack_i16_to_i8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_i8_m128i","value":"pub fn pack_i16_to_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `i8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);\n let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `i8`, and pack the values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558522,"byte_end":9558580,"line_start":1921,"line_end":1921,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558581,"byte_end":9558588,"line_start":1922,"line_end":1922,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558589,"byte_end":9558612,"line_start":1923,"line_end":1923,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558613,"byte_end":9558667,"line_start":1924,"line_end":1924,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558668,"byte_end":9558729,"line_start":1925,"line_end":1925,"column_start":1,"column_end":62}},{"value":"/ let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558730,"byte_end":9558786,"line_start":1926,"line_end":1926,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558787,"byte_end":9558865,"line_start":1927,"line_end":1927,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558866,"byte_end":9558873,"line_start":1928,"line_end":1928,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558874,"byte_end":9558885,"line_start":1929,"line_end":1929,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9558886,"byte_end":9558903,"line_start":1930,"line_end":1930,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":742},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559454,"byte_end":9559475,"line_start":1947,"line_end":1947,"column_start":8,"column_end":29},"name":"pack_i32_to_i16_m128i","qualname":"::x86_x64::sse2::pack_i32_to_i16_m128i","value":"pub fn pack_i32_to_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i32` to `i16`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i32, 2, 3, 4]);\n let b = m128i::from([5_i32, 6, 7, 8]);\n let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i32` to `i16`, and pack the values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559068,"byte_end":9559127,"line_start":1936,"line_end":1936,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559128,"byte_end":9559135,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559136,"byte_end":9559159,"line_start":1938,"line_end":1938,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559160,"byte_end":9559202,"line_start":1939,"line_end":1939,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([5_i32, 6, 7, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559203,"byte_end":9559245,"line_start":1940,"line_end":1940,"column_start":1,"column_end":43}},{"value":"/ let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559246,"byte_end":9559303,"line_start":1941,"line_end":1941,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559304,"byte_end":9559352,"line_start":1942,"line_end":1942,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559353,"byte_end":9559360,"line_start":1943,"line_end":1943,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559361,"byte_end":9559372,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559373,"byte_end":9559390,"line_start":1945,"line_end":1945,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560017,"byte_end":9560037,"line_start":1962,"line_end":1962,"column_start":8,"column_end":28},"name":"pack_i16_to_u8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_u8_m128i","value":"pub fn pack_i16_to_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `u8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);\n let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `u8`, and pack the values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559556,"byte_end":9559614,"line_start":1951,"line_end":1951,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559615,"byte_end":9559622,"line_start":1952,"line_end":1952,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559623,"byte_end":9559646,"line_start":1953,"line_end":1953,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559647,"byte_end":9559705,"line_start":1954,"line_end":1954,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559706,"byte_end":9559769,"line_start":1955,"line_end":1955,"column_start":1,"column_end":64}},{"value":"/ let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559770,"byte_end":9559826,"line_start":1956,"line_end":1956,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559827,"byte_end":9559915,"line_start":1957,"line_end":1957,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559916,"byte_end":9559923,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559924,"byte_end":9559935,"line_start":1959,"line_end":1959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9559936,"byte_end":9559953,"line_start":1960,"line_end":1960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":744},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560768,"byte_end":9560792,"line_start":1981,"line_end":1981,"column_start":8,"column_end":32},"name":"sum_of_u8_abs_diff_m128i","qualname":"::x86_x64::sse2::sum_of_u8_abs_diff_m128i","value":"pub fn sum_of_u8_abs_diff_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute \"sum of `u8` absolute differences\".","sig":null,"attributes":[{"value":"/ Compute \"sum of `u8` absolute differences\".","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560119,"byte_end":9560166,"line_start":1966,"line_end":1966,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560167,"byte_end":9560170,"line_start":1967,"line_end":1967,"column_start":1,"column_end":4}},{"value":"/ * `u8` lanewise `abs(a - b)`, producing `u8` intermediate values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560171,"byte_end":9560240,"line_start":1968,"line_end":1968,"column_start":1,"column_end":70}},{"value":"/ * Sum the first eight and second eight values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560241,"byte_end":9560291,"line_start":1969,"line_end":1969,"column_start":1,"column_end":51}},{"value":"/ * Place into the low 16 bits of two `u64` lanes.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560292,"byte_end":9560344,"line_start":1970,"line_end":1970,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560345,"byte_end":9560352,"line_start":1971,"line_end":1971,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560353,"byte_end":9560376,"line_start":1972,"line_end":1972,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560377,"byte_end":9560466,"line_start":1973,"line_end":1973,"column_start":1,"column_end":90}},{"value":"/ let b = m128i::from([20_u8, 110, 250, 103, 34, 105, 60, 217, 8, 19, 210, 201, 202, 203, 204, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560467,"byte_end":9560570,"line_start":1974,"line_end":1974,"column_start":1,"column_end":104}},{"value":"/ let c: [u64; 2] = sum_of_u8_abs_diff_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560571,"byte_end":9560631,"line_start":1975,"line_end":1975,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [831_u64, 910]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560632,"byte_end":9560666,"line_start":1976,"line_end":1976,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560667,"byte_end":9560674,"line_start":1977,"line_end":1977,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560675,"byte_end":9560686,"line_start":1978,"line_end":1978,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560687,"byte_end":9560704,"line_start":1979,"line_end":1979,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561369,"byte_end":9561381,"line_start":1997,"line_end":1997,"column_start":8,"column_end":20},"name":"set_i8_m128i","qualname":"::x86_x64::sse2::set_i8_m128i","value":"pub fn set_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                    i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560870,"byte_end":9560932,"line_start":1985,"line_end":1985,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560933,"byte_end":9560940,"line_start":1986,"line_end":1986,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560941,"byte_end":9560964,"line_start":1987,"line_end":1987,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9560965,"byte_end":9561048,"line_start":1988,"line_end":1988,"column_start":1,"column_end":84}},{"value":"/ let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561049,"byte_end":9561131,"line_start":1989,"line_end":1989,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561132,"byte_end":9561189,"line_start":1990,"line_end":1990,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561190,"byte_end":9561197,"line_start":1991,"line_end":1991,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561198,"byte_end":9561209,"line_start":1992,"line_end":1992,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561210,"byte_end":9561227,"line_start":1993,"line_end":1993,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561228,"byte_end":9561264,"line_start":1994,"line_end":1994,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561265,"byte_end":9561305,"line_start":1995,"line_end":1995,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562031,"byte_end":9562044,"line_start":2013,"line_end":2013,"column_start":8,"column_end":21},"name":"set_i16_m128i","qualname":"::x86_x64::sse2::set_i16_m128i","value":"pub fn set_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561589,"byte_end":9561651,"line_start":2001,"line_end":2001,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561652,"byte_end":9561659,"line_start":2002,"line_end":2002,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561660,"byte_end":9561683,"line_start":2003,"line_end":2003,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561684,"byte_end":9561738,"line_start":2004,"line_end":2004,"column_start":1,"column_end":55}},{"value":"/ let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561739,"byte_end":9561793,"line_start":2005,"line_end":2005,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561794,"byte_end":9561851,"line_start":2006,"line_end":2006,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561852,"byte_end":9561859,"line_start":2007,"line_end":2007,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561860,"byte_end":9561871,"line_start":2008,"line_end":2008,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561872,"byte_end":9561889,"line_start":2009,"line_end":2009,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561890,"byte_end":9561926,"line_start":2010,"line_end":2010,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9561927,"byte_end":9561967,"line_start":2011,"line_end":2011,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562513,"byte_end":9562526,"line_start":2027,"line_end":2027,"column_start":8,"column_end":21},"name":"set_i32_m128i","qualname":"::x86_x64::sse2::set_i32_m128i","value":"pub fn set_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([3, 2, 1, 0]);\n let b = set_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562181,"byte_end":9562243,"line_start":2017,"line_end":2017,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562244,"byte_end":9562251,"line_start":2018,"line_end":2018,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562252,"byte_end":9562275,"line_start":2019,"line_end":2019,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([3, 2, 1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562276,"byte_end":9562314,"line_start":2020,"line_end":2020,"column_start":1,"column_end":39}},{"value":"/ let b = set_i32_m128i(0, 1, 2, 3);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562315,"byte_end":9562353,"line_start":2021,"line_end":2021,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562354,"byte_end":9562411,"line_start":2022,"line_end":2022,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562412,"byte_end":9562419,"line_start":2023,"line_end":2023,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562420,"byte_end":9562431,"line_start":2024,"line_end":2024,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562432,"byte_end":9562449,"line_start":2025,"line_end":2025,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562943,"byte_end":9562956,"line_start":2041,"line_end":2041,"column_start":8,"column_end":21},"name":"set_i64_m128i","qualname":"::x86_x64::sse2::set_i64_m128i","value":"pub fn set_i64_m128i(i64, i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 0]);\n let b = set_i64_m128i(0, 1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562619,"byte_end":9562681,"line_start":2031,"line_end":2031,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562682,"byte_end":9562689,"line_start":2032,"line_end":2032,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562690,"byte_end":9562713,"line_start":2033,"line_end":2033,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562714,"byte_end":9562750,"line_start":2034,"line_end":2034,"column_start":1,"column_end":37}},{"value":"/ let b = set_i64_m128i(0, 1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562751,"byte_end":9562783,"line_start":2035,"line_end":2035,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562784,"byte_end":9562841,"line_start":2036,"line_end":2036,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562842,"byte_end":9562849,"line_start":2037,"line_end":2037,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562850,"byte_end":9562861,"line_start":2038,"line_end":2038,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9562862,"byte_end":9562879,"line_start":2039,"line_end":2039,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":749},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563344,"byte_end":9563353,"line_start":2055,"line_end":2055,"column_start":8,"column_end":17},"name":"set_m128d","qualname":"::x86_x64::sse2::set_m128d","value":"pub fn set_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the high lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563028,"byte_end":9563090,"line_start":2045,"line_end":2045,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563091,"byte_end":9563098,"line_start":2046,"line_end":2046,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563099,"byte_end":9563122,"line_start":2047,"line_end":2047,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563123,"byte_end":9563165,"line_start":2048,"line_end":2048,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d(0.0, 1.0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563166,"byte_end":9563198,"line_start":2049,"line_end":2049,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563199,"byte_end":9563242,"line_start":2050,"line_end":2050,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563243,"byte_end":9563250,"line_start":2051,"line_end":2051,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563251,"byte_end":9563262,"line_start":2052,"line_end":2052,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563263,"byte_end":9563280,"line_start":2053,"line_end":2053,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":750},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563721,"byte_end":9563732,"line_start":2069,"line_end":2069,"column_start":8,"column_end":19},"name":"set_m128d_s","qualname":"::x86_x64::sse2::set_m128d_s","value":"pub fn set_m128d_s(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into the low lane of a `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d_s(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into the low lane of a `m128d`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563421,"byte_end":9563470,"line_start":2059,"line_end":2059,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563471,"byte_end":9563478,"line_start":2060,"line_end":2060,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563479,"byte_end":9563502,"line_start":2061,"line_end":2061,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563503,"byte_end":9563545,"line_start":2062,"line_end":2062,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d_s(1.0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563546,"byte_end":9563575,"line_start":2063,"line_end":2063,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563576,"byte_end":9563619,"line_start":2064,"line_end":2064,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563620,"byte_end":9563627,"line_start":2065,"line_end":2065,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563628,"byte_end":9563639,"line_start":2066,"line_end":2066,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563640,"byte_end":9563657,"line_start":2067,"line_end":2067,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564095,"byte_end":9564110,"line_start":2083,"line_end":2083,"column_start":8,"column_end":23},"name":"set_splat_m128d","qualname":"::x86_x64::sse2::set_splat_m128d","value":"pub fn set_splat_m128d(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Splats the args into both lanes of the `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 1.0]);\n let b = set_splat_m128d(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Splats the args into both lanes of the `m128d`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563789,"byte_end":9563840,"line_start":2073,"line_end":2073,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563841,"byte_end":9563848,"line_start":2074,"line_end":2074,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563849,"byte_end":9563872,"line_start":2075,"line_end":2075,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563873,"byte_end":9563915,"line_start":2076,"line_end":2076,"column_start":1,"column_end":43}},{"value":"/ let b = set_splat_m128d(1.0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563916,"byte_end":9563949,"line_start":2077,"line_end":2077,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563950,"byte_end":9563993,"line_start":2078,"line_end":2078,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9563994,"byte_end":9564001,"line_start":2079,"line_end":2079,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564002,"byte_end":9564013,"line_start":2080,"line_end":2080,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564014,"byte_end":9564031,"line_start":2081,"line_end":2081,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564521,"byte_end":9564539,"line_start":2097,"line_end":2097,"column_start":8,"column_end":26},"name":"set_splat_i8_m128i","qualname":"::x86_x64::sse2::set_splat_i8_m128i","value":"pub fn set_splat_i8_m128i(i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i8` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i8_m128i(1);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i8` to all lanes of the `m128i`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564168,"byte_end":9564216,"line_start":2087,"line_end":2087,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564217,"byte_end":9564224,"line_start":2088,"line_end":2088,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564225,"byte_end":9564248,"line_start":2089,"line_end":2089,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564249,"byte_end":9564326,"line_start":2090,"line_end":2090,"column_start":1,"column_end":78}},{"value":"/ let b = set_splat_i8_m128i(1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564327,"byte_end":9564361,"line_start":2091,"line_end":2091,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564362,"byte_end":9564419,"line_start":2092,"line_end":2092,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564420,"byte_end":9564427,"line_start":2093,"line_end":2093,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564428,"byte_end":9564439,"line_start":2094,"line_end":2094,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564440,"byte_end":9564457,"line_start":2095,"line_end":2095,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564930,"byte_end":9564949,"line_start":2111,"line_end":2111,"column_start":8,"column_end":27},"name":"set_splat_i16_m128i","qualname":"::x86_x64::sse2::set_splat_i16_m128i","value":"pub fn set_splat_i16_m128i(i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i16` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i16_m128i(1);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i16` to all lanes of the `m128i`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564598,"byte_end":9564647,"line_start":2101,"line_end":2101,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564648,"byte_end":9564655,"line_start":2102,"line_end":2102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564656,"byte_end":9564679,"line_start":2103,"line_end":2103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564680,"byte_end":9564734,"line_start":2104,"line_end":2104,"column_start":1,"column_end":55}},{"value":"/ let b = set_splat_i16_m128i(1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564735,"byte_end":9564770,"line_start":2105,"line_end":2105,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564771,"byte_end":9564828,"line_start":2106,"line_end":2106,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564829,"byte_end":9564836,"line_start":2107,"line_end":2107,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564837,"byte_end":9564848,"line_start":2108,"line_end":2108,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9564849,"byte_end":9564866,"line_start":2109,"line_end":2109,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565326,"byte_end":9565345,"line_start":2125,"line_end":2125,"column_start":8,"column_end":27},"name":"set_splat_i32_m128i","qualname":"::x86_x64::sse2::set_splat_i32_m128i","value":"pub fn set_splat_i32_m128i(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i32` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 1, 1, 1]);\n let b = set_splat_i32_m128i(1);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i32` to all lanes of the `m128i`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565010,"byte_end":9565059,"line_start":2115,"line_end":2115,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565060,"byte_end":9565067,"line_start":2116,"line_end":2116,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565068,"byte_end":9565091,"line_start":2117,"line_end":2117,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 1, 1, 1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565092,"byte_end":9565130,"line_start":2118,"line_end":2118,"column_start":1,"column_end":39}},{"value":"/ let b = set_splat_i32_m128i(1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565131,"byte_end":9565166,"line_start":2119,"line_end":2119,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565167,"byte_end":9565224,"line_start":2120,"line_end":2120,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565225,"byte_end":9565232,"line_start":2121,"line_end":2121,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565233,"byte_end":9565244,"line_start":2122,"line_end":2122,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565245,"byte_end":9565262,"line_start":2123,"line_end":2123,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565721,"byte_end":9565740,"line_start":2139,"line_end":2139,"column_start":8,"column_end":27},"name":"set_splat_i64_m128i","qualname":"::x86_x64::sse2::set_splat_i64_m128i","value":"pub fn set_splat_i64_m128i(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i64` to both lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 1]);\n let b = set_splat_i64_m128i(1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i64` to both lanes of the `m128i`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565406,"byte_end":9565456,"line_start":2129,"line_end":2129,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565457,"byte_end":9565464,"line_start":2130,"line_end":2130,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565465,"byte_end":9565488,"line_start":2131,"line_end":2131,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565489,"byte_end":9565525,"line_start":2132,"line_end":2132,"column_start":1,"column_end":37}},{"value":"/ let b = set_splat_i64_m128i(1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565526,"byte_end":9565561,"line_start":2133,"line_end":2133,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565562,"byte_end":9565619,"line_start":2134,"line_end":2134,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565620,"byte_end":9565627,"line_start":2135,"line_end":2135,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565628,"byte_end":9565639,"line_start":2136,"line_end":2136,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565640,"byte_end":9565657,"line_start":2137,"line_end":2137,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":756},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566309,"byte_end":9566330,"line_start":2155,"line_end":2155,"column_start":8,"column_end":29},"name":"set_reversed_i8_m128i","qualname":"::x86_x64::sse2::set_reversed_i8_m128i","value":"pub fn set_reversed_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                             i8, i8, i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = set_reversed_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565802,"byte_end":9565863,"line_start":2143,"line_end":2143,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565864,"byte_end":9565871,"line_start":2144,"line_end":2144,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565872,"byte_end":9565895,"line_start":2145,"line_end":2145,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565896,"byte_end":9565979,"line_start":2146,"line_end":2146,"column_start":1,"column_end":84}},{"value":"/ let b = set_reversed_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9565980,"byte_end":9566071,"line_start":2147,"line_end":2147,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566072,"byte_end":9566129,"line_start":2148,"line_end":2148,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566130,"byte_end":9566137,"line_start":2149,"line_end":2149,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566138,"byte_end":9566149,"line_start":2150,"line_end":2150,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566150,"byte_end":9566167,"line_start":2151,"line_end":2151,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566168,"byte_end":9566204,"line_start":2152,"line_end":2152,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566205,"byte_end":9566245,"line_start":2153,"line_end":2153,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":757},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566989,"byte_end":9567011,"line_start":2171,"line_end":2171,"column_start":8,"column_end":30},"name":"set_reversed_i16_m128i","qualname":"::x86_x64::sse2::set_reversed_i16_m128i","value":"pub fn set_reversed_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);\n let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566539,"byte_end":9566600,"line_start":2159,"line_end":2159,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566601,"byte_end":9566608,"line_start":2160,"line_end":2160,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566609,"byte_end":9566632,"line_start":2161,"line_end":2161,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566633,"byte_end":9566687,"line_start":2162,"line_end":2162,"column_start":1,"column_end":55}},{"value":"/ let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566688,"byte_end":9566751,"line_start":2163,"line_end":2163,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566752,"byte_end":9566809,"line_start":2164,"line_end":2164,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566810,"byte_end":9566817,"line_start":2165,"line_end":2165,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566818,"byte_end":9566829,"line_start":2166,"line_end":2166,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566830,"byte_end":9566847,"line_start":2167,"line_end":2167,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566848,"byte_end":9566884,"line_start":2168,"line_end":2168,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9566885,"byte_end":9566925,"line_start":2169,"line_end":2169,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":758},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567489,"byte_end":9567511,"line_start":2185,"line_end":2185,"column_start":8,"column_end":30},"name":"set_reversed_i32_m128i","qualname":"::x86_x64::sse2::set_reversed_i32_m128i","value":"pub fn set_reversed_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0, 1, 2, 3]);\n let b = set_reversed_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567149,"byte_end":9567210,"line_start":2175,"line_end":2175,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567211,"byte_end":9567218,"line_start":2176,"line_end":2176,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567219,"byte_end":9567242,"line_start":2177,"line_end":2177,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, 1, 2, 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567243,"byte_end":9567281,"line_start":2178,"line_end":2178,"column_start":1,"column_end":39}},{"value":"/ let b = set_reversed_i32_m128i(0, 1, 2, 3);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567282,"byte_end":9567329,"line_start":2179,"line_end":2179,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567330,"byte_end":9567387,"line_start":2180,"line_end":2180,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567388,"byte_end":9567395,"line_start":2181,"line_end":2181,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567396,"byte_end":9567407,"line_start":2182,"line_end":2182,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567408,"byte_end":9567425,"line_start":2183,"line_end":2183,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":759},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567929,"byte_end":9567947,"line_start":2199,"line_end":2199,"column_start":8,"column_end":26},"name":"set_reversed_m128d","qualname":"::x86_x64::sse2::set_reversed_m128d","value":"pub fn set_reversed_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([0.0, 1.0]);\n let b = set_reversed_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the low lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567605,"byte_end":9567666,"line_start":2189,"line_end":2189,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567667,"byte_end":9567674,"line_start":2190,"line_end":2190,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567675,"byte_end":9567698,"line_start":2191,"line_end":2191,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567699,"byte_end":9567741,"line_start":2192,"line_end":2192,"column_start":1,"column_end":43}},{"value":"/ let b = set_reversed_m128d(0.0, 1.0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567742,"byte_end":9567783,"line_start":2193,"line_end":2193,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567784,"byte_end":9567827,"line_start":2194,"line_end":2194,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567828,"byte_end":9567835,"line_start":2195,"line_end":2195,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567836,"byte_end":9567847,"line_start":2196,"line_end":2196,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9567848,"byte_end":9567865,"line_start":2197,"line_end":2197,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568231,"byte_end":9568243,"line_start":2212,"line_end":2212,"column_start":8,"column_end":20},"name":"zeroed_m128i","qualname":"::x86_x64::sse2::zeroed_m128i","value":"pub fn zeroed_m128i() -> m128i","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128i();\n assert_eq!(u128::from(a), 0);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568016,"byte_end":9568035,"line_start":2203,"line_end":2203,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568036,"byte_end":9568043,"line_start":2204,"line_end":2204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568044,"byte_end":9568067,"line_start":2205,"line_end":2205,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128i();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568068,"byte_end":9568095,"line_start":2206,"line_end":2206,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(u128::from(a), 0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568096,"byte_end":9568129,"line_start":2207,"line_end":2207,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568130,"byte_end":9568137,"line_start":2208,"line_end":2208,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568138,"byte_end":9568149,"line_start":2209,"line_end":2209,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568150,"byte_end":9568167,"line_start":2210,"line_end":2210,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":761},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568524,"byte_end":9568536,"line_start":2225,"line_end":2225,"column_start":8,"column_end":20},"name":"zeroed_m128d","qualname":"::x86_x64::sse2::zeroed_m128d","value":"pub fn zeroed_m128d() -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Both lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128d();\n assert_eq!(a.to_array(), [0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Both lanes zero.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568300,"byte_end":9568320,"line_start":2216,"line_end":2216,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568321,"byte_end":9568328,"line_start":2217,"line_end":2217,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568329,"byte_end":9568352,"line_start":2218,"line_end":2218,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128d();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568353,"byte_end":9568380,"line_start":2219,"line_end":2219,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_array(), [0.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568381,"byte_end":9568422,"line_start":2220,"line_end":2220,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568423,"byte_end":9568430,"line_start":2221,"line_end":2221,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568431,"byte_end":9568442,"line_start":2222,"line_end":2222,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568443,"byte_end":9568460,"line_start":2223,"line_end":2223,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569043,"byte_end":9569067,"line_start":2244,"line_end":2244,"column_start":8,"column_end":32},"name":"shuffle_ai_f32_all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_f32_all_m128i","value":"pub fn shuffle_ai_f32_all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `i32` lanes in `$a` using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `i32` lanes in `$a` using an immediate","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568590,"byte_end":9568644,"line_start":2229,"line_end":2229,"column_start":1,"column_end":55}},{"value":"/ control value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568645,"byte_end":9568663,"line_start":2230,"line_end":2230,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568664,"byte_end":9568667,"line_start":2231,"line_end":2231,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568668,"byte_end":9568675,"line_start":2232,"line_end":2232,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568676,"byte_end":9568699,"line_start":2233,"line_end":2233,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([6, 7, 8, 9]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568700,"byte_end":9568738,"line_start":2234,"line_end":2234,"column_start":1,"column_end":39}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568739,"byte_end":9568745,"line_start":2235,"line_end":2235,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_ai_f32_all_m128i::<0b01_10_10_00>(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568746,"byte_end":9568803,"line_start":2236,"line_end":2236,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(<[i32; 4]>::from(c), [6, 8, 8, 7]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568804,"byte_end":9568854,"line_start":2237,"line_end":2237,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568855,"byte_end":9568862,"line_start":2238,"line_end":2238,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_epi32`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568863,"byte_end":9568905,"line_start":2239,"line_end":2239,"column_start":1,"column_end":43}},{"value":"/ * **Assembly:** `pshufd xmm, xmm, imm8`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568906,"byte_end":9568949,"line_start":2240,"line_end":2240,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568950,"byte_end":9568961,"line_start":2241,"line_end":2241,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9568962,"byte_end":9568979,"line_start":2242,"line_end":2242,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":764},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570156,"byte_end":9570181,"line_start":2272,"line_end":2272,"column_start":8,"column_end":33},"name":"shuffle_abi_f64_all_m128d","qualname":"::x86_x64::sse2::shuffle_abi_f64_all_m128d","value":"pub fn shuffle_abi_f64_all_m128d<const MASK: i32>(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `f64` lanes from `$a` and `$b` together using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `f64` lanes from `$a` and `$b` together using an immediate","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569158,"byte_end":9569232,"line_start":2248,"line_end":2248,"column_start":1,"column_end":75}},{"value":"/ control value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569233,"byte_end":9569251,"line_start":2249,"line_end":2249,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569252,"byte_end":9569255,"line_start":2250,"line_end":2250,"column_start":1,"column_end":4}},{"value":"/ The `a:` and `b:` prefixes on the index selection values are literal tokens","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569256,"byte_end":9569335,"line_start":2251,"line_end":2251,"column_start":1,"column_end":80}},{"value":"/ that you type. It helps keep clear what value comes from where. The first","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569336,"byte_end":9569413,"line_start":2252,"line_end":2252,"column_start":1,"column_end":78}},{"value":"/ two output lanes come from `$a`, the second two output lanes come from `$b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569414,"byte_end":9569494,"line_start":2253,"line_end":2253,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569495,"byte_end":9569498,"line_start":2254,"line_end":2254,"column_start":1,"column_end":4}},{"value":"/ You can pass the same value as both arguments, but if you want to swizzle","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569499,"byte_end":9569576,"line_start":2255,"line_end":2255,"column_start":1,"column_end":78}},{"value":"/ within only a single register and you have `avx` available consider using","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569577,"byte_end":9569654,"line_start":2256,"line_end":2256,"column_start":1,"column_end":78}},{"value":"/ [`shuffle_ai_f64_all_m128d`] instead. You'll get much better performance.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569655,"byte_end":9569732,"line_start":2257,"line_end":2257,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569733,"byte_end":9569740,"line_start":2258,"line_end":2258,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569741,"byte_end":9569764,"line_start":2259,"line_end":2259,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569765,"byte_end":9569807,"line_start":2260,"line_end":2260,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([3.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569808,"byte_end":9569850,"line_start":2261,"line_end":2261,"column_start":1,"column_end":43}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569851,"byte_end":9569857,"line_start":2262,"line_end":2262,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f64_all_m128d::<0b00>(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569858,"byte_end":9569921,"line_start":2263,"line_end":2263,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(c, [1.0, 3.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569922,"byte_end":9569952,"line_start":2264,"line_end":2264,"column_start":1,"column_end":31}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569953,"byte_end":9569959,"line_start":2265,"line_end":2265,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f64_all_m128d::<0b10>(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9569960,"byte_end":9570023,"line_start":2266,"line_end":2266,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(c, [1.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570024,"byte_end":9570054,"line_start":2267,"line_end":2267,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570055,"byte_end":9570062,"line_start":2268,"line_end":2268,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570063,"byte_end":9570074,"line_start":2269,"line_end":2269,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570075,"byte_end":9570092,"line_start":2270,"line_end":2270,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570765,"byte_end":9570792,"line_start":2288,"line_end":2288,"column_start":8,"column_end":35},"name":"shuffle_ai_i16_h64all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_i16_h64all_m128i","value":"pub fn shuffle_ai_i16_h64all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the high `i16` lanes in `$a` using an immediate control value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let c = shuffle_ai_i16_h64all_m128i::<0b01_00_10_11>(a);\n assert_eq!(<[i16; 8]>::from(c), [1_i16, 2, 3, 4, 8, 7, 5, 6]);\n ```\n * **Intrinsic:** [`_mm_shufflehi_epi16`]\n * **Assembly:** `pshufhw xmm, xmm, imm8`\n","sig":null,"attributes":[{"value":"/ Shuffle the high `i16` lanes in `$a` using an immediate control value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570284,"byte_end":9570358,"line_start":2276,"line_end":2276,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570359,"byte_end":9570366,"line_start":2277,"line_end":2277,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570367,"byte_end":9570390,"line_start":2278,"line_end":2278,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570391,"byte_end":9570445,"line_start":2279,"line_end":2279,"column_start":1,"column_end":55}},{"value":"/ let c = shuffle_ai_i16_h64all_m128i::<0b01_00_10_11>(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570446,"byte_end":9570506,"line_start":2280,"line_end":2280,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(<[i16; 8]>::from(c), [1_i16, 2, 3, 4, 8, 7, 5, 6]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570507,"byte_end":9570573,"line_start":2281,"line_end":2281,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570574,"byte_end":9570581,"line_start":2282,"line_end":2282,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shufflehi_epi16`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570582,"byte_end":9570626,"line_start":2283,"line_end":2283,"column_start":1,"column_end":45}},{"value":"/ * **Assembly:** `pshufhw xmm, xmm, imm8`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570627,"byte_end":9570671,"line_start":2284,"line_end":2284,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570672,"byte_end":9570683,"line_start":2285,"line_end":2285,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570684,"byte_end":9570701,"line_start":2286,"line_end":2286,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571372,"byte_end":9571399,"line_start":2305,"line_end":2305,"column_start":8,"column_end":35},"name":"shuffle_ai_i16_l64all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_i16_l64all_m128i","value":"pub fn shuffle_ai_i16_l64all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the low `i16` lanes in `$a` using an immediate control value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n //\n let c = shuffle_ai_i16_l64all_m128i::<0b01_11_10_00>(a);\n assert_eq!(<[i16; 8]>::from(c), [1_i16, 3, 4, 2, 5, 6, 7, 8]);\n ```\n * **Intrinsic:** [`_mm_shufflelo_epi16`]\n * **Assembly:** `pshuflw xmm, xmm, imm8`\n","sig":null,"attributes":[{"value":"/ Shuffle the low `i16` lanes in `$a` using an immediate control value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570885,"byte_end":9570958,"line_start":2292,"line_end":2292,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570959,"byte_end":9570966,"line_start":2293,"line_end":2293,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570967,"byte_end":9570990,"line_start":2294,"line_end":2294,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9570991,"byte_end":9571045,"line_start":2295,"line_end":2295,"column_start":1,"column_end":55}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571046,"byte_end":9571052,"line_start":2296,"line_end":2296,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_ai_i16_l64all_m128i::<0b01_11_10_00>(a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571053,"byte_end":9571113,"line_start":2297,"line_end":2297,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(<[i16; 8]>::from(c), [1_i16, 3, 4, 2, 5, 6, 7, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571114,"byte_end":9571180,"line_start":2298,"line_end":2298,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571181,"byte_end":9571188,"line_start":2299,"line_end":2299,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shufflelo_epi16`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571189,"byte_end":9571233,"line_start":2300,"line_end":2300,"column_start":1,"column_end":45}},{"value":"/ * **Assembly:** `pshuflw xmm, xmm, imm8`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571234,"byte_end":9571278,"line_start":2301,"line_end":2301,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571279,"byte_end":9571290,"line_start":2302,"line_end":2302,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571291,"byte_end":9571308,"line_start":2303,"line_end":2303,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":770},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571963,"byte_end":9571980,"line_start":2322,"line_end":2322,"column_start":8,"column_end":25},"name":"shl_all_u16_m128i","qualname":"::x86_x64::sse2::shl_all_u16_m128i","value":"pub fn shl_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571492,"byte_end":9571569,"line_start":2309,"line_end":2309,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571570,"byte_end":9571573,"line_start":2310,"line_end":2310,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571574,"byte_end":9571594,"line_start":2311,"line_end":2311,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571595,"byte_end":9571602,"line_start":2312,"line_end":2312,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571603,"byte_end":9571626,"line_start":2313,"line_end":2313,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571627,"byte_end":9571681,"line_start":2314,"line_end":2314,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571682,"byte_end":9571718,"line_start":2315,"line_end":2315,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shl_all_u16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571719,"byte_end":9571772,"line_start":2316,"line_end":2316,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571773,"byte_end":9571861,"line_start":2317,"line_end":2317,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571862,"byte_end":9571869,"line_start":2318,"line_end":2318,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571870,"byte_end":9571881,"line_start":2319,"line_end":2319,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9571882,"byte_end":9571899,"line_start":2320,"line_end":2320,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":771},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572490,"byte_end":9572507,"line_start":2339,"line_end":2339,"column_start":8,"column_end":25},"name":"shl_all_u32_m128i","qualname":"::x86_x64::sse2::shl_all_u32_m128i","value":"pub fn shl_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572067,"byte_end":9572144,"line_start":2326,"line_end":2326,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572145,"byte_end":9572148,"line_start":2327,"line_end":2327,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572149,"byte_end":9572169,"line_start":2328,"line_end":2328,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572170,"byte_end":9572177,"line_start":2329,"line_end":2329,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572178,"byte_end":9572201,"line_start":2330,"line_end":2330,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572202,"byte_end":9572244,"line_start":2331,"line_end":2331,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572245,"byte_end":9572281,"line_start":2332,"line_end":2332,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shl_all_u32_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572282,"byte_end":9572335,"line_start":2333,"line_end":2333,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572336,"byte_end":9572388,"line_start":2334,"line_end":2334,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572389,"byte_end":9572396,"line_start":2335,"line_end":2335,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572397,"byte_end":9572408,"line_start":2336,"line_end":2336,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572409,"byte_end":9572426,"line_start":2337,"line_end":2337,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":772},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572995,"byte_end":9573012,"line_start":2356,"line_end":2356,"column_start":8,"column_end":25},"name":"shl_all_u64_m128i","qualname":"::x86_x64::sse2::shl_all_u64_m128i","value":"pub fn shl_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572594,"byte_end":9572671,"line_start":2343,"line_end":2343,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572672,"byte_end":9572675,"line_start":2344,"line_end":2344,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572676,"byte_end":9572696,"line_start":2345,"line_end":2345,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572697,"byte_end":9572704,"line_start":2346,"line_end":2346,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572705,"byte_end":9572728,"line_start":2347,"line_end":2347,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572729,"byte_end":9572765,"line_start":2348,"line_end":2348,"column_start":1,"column_end":37}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572766,"byte_end":9572802,"line_start":2349,"line_end":2349,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_all_u64_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572803,"byte_end":9572856,"line_start":2350,"line_end":2350,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572857,"byte_end":9572893,"line_start":2351,"line_end":2351,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572894,"byte_end":9572901,"line_start":2352,"line_end":2352,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572902,"byte_end":9572913,"line_start":2353,"line_end":2353,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9572914,"byte_end":9572931,"line_start":2354,"line_end":2354,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":773},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573485,"byte_end":9573502,"line_start":2371,"line_end":2371,"column_start":8,"column_end":25},"name":"shl_imm_u16_m128i","qualname":"::x86_x64::sse2::shl_imm_u16_m128i","value":"pub fn shl_imm_u16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u16` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u16` lanes left by an immediate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573099,"byte_end":9573147,"line_start":2360,"line_end":2360,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573148,"byte_end":9573151,"line_start":2361,"line_end":2361,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573152,"byte_end":9573159,"line_start":2362,"line_end":2362,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573160,"byte_end":9573183,"line_start":2363,"line_end":2363,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573184,"byte_end":9573238,"line_start":2364,"line_end":2364,"column_start":1,"column_end":55}},{"value":"/ let c: [u16; 8] = shl_imm_u16_m128i::<3>(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573239,"byte_end":9573294,"line_start":2365,"line_end":2365,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573295,"byte_end":9573383,"line_start":2366,"line_end":2366,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573384,"byte_end":9573391,"line_start":2367,"line_end":2367,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573392,"byte_end":9573403,"line_start":2368,"line_end":2368,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573404,"byte_end":9573421,"line_start":2369,"line_end":2369,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":775},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573922,"byte_end":9573939,"line_start":2386,"line_end":2386,"column_start":8,"column_end":25},"name":"shl_imm_u32_m128i","qualname":"::x86_x64::sse2::shl_imm_u32_m128i","value":"pub fn shl_imm_u32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u32` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u32` lanes left by an immediate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573588,"byte_end":9573636,"line_start":2375,"line_end":2375,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573637,"byte_end":9573640,"line_start":2376,"line_end":2376,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573641,"byte_end":9573648,"line_start":2377,"line_end":2377,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573649,"byte_end":9573672,"line_start":2378,"line_end":2378,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573673,"byte_end":9573711,"line_start":2379,"line_end":2379,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = shl_imm_u32_m128i::<3>(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573712,"byte_end":9573767,"line_start":2380,"line_end":2380,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573768,"byte_end":9573820,"line_start":2381,"line_end":2381,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573821,"byte_end":9573828,"line_start":2382,"line_end":2382,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573829,"byte_end":9573840,"line_start":2383,"line_end":2383,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9573841,"byte_end":9573858,"line_start":2384,"line_end":2384,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":777},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574346,"byte_end":9574363,"line_start":2401,"line_end":2401,"column_start":8,"column_end":25},"name":"shl_imm_u64_m128i","qualname":"::x86_x64::sse2::shl_imm_u64_m128i","value":"pub fn shl_imm_u64_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts both `u64` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts both `u64` lanes left by an immediate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574025,"byte_end":9574074,"line_start":2390,"line_end":2390,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574075,"byte_end":9574078,"line_start":2391,"line_end":2391,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574079,"byte_end":9574086,"line_start":2392,"line_end":2392,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574087,"byte_end":9574110,"line_start":2393,"line_end":2393,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574111,"byte_end":9574147,"line_start":2394,"line_end":2394,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_imm_u64_m128i::<3>(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574148,"byte_end":9574203,"line_start":2395,"line_end":2395,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u64 << 3, 2 << 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574204,"byte_end":9574244,"line_start":2396,"line_end":2396,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574245,"byte_end":9574252,"line_start":2397,"line_end":2397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574253,"byte_end":9574264,"line_start":2398,"line_end":2398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574265,"byte_end":9574282,"line_start":2399,"line_end":2399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574720,"byte_end":9574730,"line_start":2415,"line_end":2415,"column_start":8,"column_end":18},"name":"sqrt_m128d","qualname":"::x86_x64::sse2::sqrt_m128d","value":"pub fn sqrt_m128d(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([25.0, 16.0]);\n let b = sqrt_m128d(a).to_array();\n assert_eq!(b, [5.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574449,"byte_end":9574472,"line_start":2405,"line_end":2405,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574473,"byte_end":9574480,"line_start":2406,"line_end":2406,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574481,"byte_end":9574504,"line_start":2407,"line_end":2407,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([25.0, 16.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574505,"byte_end":9574549,"line_start":2408,"line_end":2408,"column_start":1,"column_end":45}},{"value":"/ let b = sqrt_m128d(a).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574550,"byte_end":9574587,"line_start":2409,"line_end":2409,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [5.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574588,"byte_end":9574618,"line_start":2410,"line_end":2410,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574619,"byte_end":9574626,"line_start":2411,"line_end":2411,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574627,"byte_end":9574638,"line_start":2412,"line_end":2412,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574639,"byte_end":9574656,"line_start":2413,"line_end":2413,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":780},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575144,"byte_end":9575156,"line_start":2430,"line_end":2430,"column_start":8,"column_end":20},"name":"sqrt_m128d_s","qualname":"::x86_x64::sse2::sqrt_m128d_s","value":"pub fn sqrt_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(b)`, upper lane is unchanged from `a`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = m128d::from_array([25.0, 4.0]);\n let c = sqrt_m128d_s(a, b);\n assert_eq!(c.to_array(), [5.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(b)`, upper lane is unchanged from `a`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574792,"byte_end":9574849,"line_start":2419,"line_end":2419,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574850,"byte_end":9574857,"line_start":2420,"line_end":2420,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574858,"byte_end":9574881,"line_start":2421,"line_end":2421,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574882,"byte_end":9574924,"line_start":2422,"line_end":2422,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([25.0, 4.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574925,"byte_end":9574968,"line_start":2423,"line_end":2423,"column_start":1,"column_end":44}},{"value":"/ let c = sqrt_m128d_s(a, b);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9574969,"byte_end":9575000,"line_start":2424,"line_end":2424,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c.to_array(), [5.0, 2.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575001,"byte_end":9575042,"line_start":2425,"line_end":2425,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575043,"byte_end":9575050,"line_start":2426,"line_end":2426,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575051,"byte_end":9575062,"line_start":2427,"line_end":2427,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575063,"byte_end":9575080,"line_start":2428,"line_end":2428,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575723,"byte_end":9575740,"line_start":2447,"line_end":2447,"column_start":8,"column_end":25},"name":"shr_all_i16_m128i","qualname":"::x86_x64::sse2::shr_all_i16_m128i","value":"pub fn shr_all_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575233,"byte_end":9575311,"line_start":2434,"line_end":2434,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575312,"byte_end":9575315,"line_start":2435,"line_end":2435,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575316,"byte_end":9575346,"line_start":2436,"line_end":2436,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575347,"byte_end":9575354,"line_start":2437,"line_end":2437,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575355,"byte_end":9575378,"line_start":2438,"line_end":2438,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575379,"byte_end":9575437,"line_start":2439,"line_end":2439,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575438,"byte_end":9575474,"line_start":2440,"line_end":2440,"column_start":1,"column_end":37}},{"value":"/ let c: [i16; 8] = shr_all_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575475,"byte_end":9575528,"line_start":2441,"line_end":2441,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575529,"byte_end":9575621,"line_start":2442,"line_end":2442,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575622,"byte_end":9575629,"line_start":2443,"line_end":2443,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575630,"byte_end":9575641,"line_start":2444,"line_end":2444,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575642,"byte_end":9575659,"line_start":2445,"line_end":2445,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576265,"byte_end":9576282,"line_start":2464,"line_end":2464,"column_start":8,"column_end":25},"name":"shr_all_i32_m128i","qualname":"::x86_x64::sse2::shr_all_i32_m128i","value":"pub fn shr_all_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575827,"byte_end":9575905,"line_start":2451,"line_end":2451,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575906,"byte_end":9575909,"line_start":2452,"line_end":2452,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575910,"byte_end":9575940,"line_start":2453,"line_end":2453,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575941,"byte_end":9575948,"line_start":2454,"line_end":2454,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575949,"byte_end":9575972,"line_start":2455,"line_end":2455,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9575973,"byte_end":9576017,"line_start":2456,"line_end":2456,"column_start":1,"column_end":45}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576018,"byte_end":9576054,"line_start":2457,"line_end":2457,"column_start":1,"column_end":37}},{"value":"/ let c: [i32; 4] = shr_all_i32_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576055,"byte_end":9576108,"line_start":2458,"line_end":2458,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576109,"byte_end":9576163,"line_start":2459,"line_end":2459,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576164,"byte_end":9576171,"line_start":2460,"line_end":2460,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576172,"byte_end":9576183,"line_start":2461,"line_end":2461,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576184,"byte_end":9576201,"line_start":2462,"line_end":2462,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576799,"byte_end":9576816,"line_start":2481,"line_end":2481,"column_start":8,"column_end":25},"name":"shr_imm_i16_m128i","qualname":"::x86_x64::sse2::shr_imm_i16_m128i","value":"pub fn shr_imm_i16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `i16` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `i16` lanes right by an immediate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576369,"byte_end":9576418,"line_start":2468,"line_end":2468,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576419,"byte_end":9576422,"line_start":2469,"line_end":2469,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576423,"byte_end":9576453,"line_start":2470,"line_end":2470,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576454,"byte_end":9576457,"line_start":2471,"line_end":2471,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576458,"byte_end":9576465,"line_start":2472,"line_end":2472,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576466,"byte_end":9576489,"line_start":2473,"line_end":2473,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576490,"byte_end":9576548,"line_start":2474,"line_end":2474,"column_start":1,"column_end":59}},{"value":"/ let c: [i16; 8] = shr_imm_i16_m128i::<3>(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576549,"byte_end":9576604,"line_start":2475,"line_end":2475,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576605,"byte_end":9576697,"line_start":2476,"line_end":2476,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576698,"byte_end":9576705,"line_start":2477,"line_end":2477,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576706,"byte_end":9576717,"line_start":2478,"line_end":2478,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576718,"byte_end":9576735,"line_start":2479,"line_end":2479,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577276,"byte_end":9577293,"line_start":2498,"line_end":2498,"column_start":8,"column_end":25},"name":"shr_imm_i32_m128i","qualname":"::x86_x64::sse2::shr_imm_i32_m128i","value":"pub fn shr_imm_i32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `i32` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `i32` lanes right by an immediate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576902,"byte_end":9576951,"line_start":2485,"line_end":2485,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576952,"byte_end":9576955,"line_start":2486,"line_end":2486,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576956,"byte_end":9576986,"line_start":2487,"line_end":2487,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576987,"byte_end":9576990,"line_start":2488,"line_end":2488,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576991,"byte_end":9576998,"line_start":2489,"line_end":2489,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9576999,"byte_end":9577022,"line_start":2490,"line_end":2490,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577023,"byte_end":9577063,"line_start":2491,"line_end":2491,"column_start":1,"column_end":41}},{"value":"/ let c: [i32; 4] = shr_imm_i32_m128i::<3>(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577064,"byte_end":9577119,"line_start":2492,"line_end":2492,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577120,"byte_end":9577174,"line_start":2493,"line_end":2493,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577175,"byte_end":9577182,"line_start":2494,"line_end":2494,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577183,"byte_end":9577194,"line_start":2495,"line_end":2495,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577195,"byte_end":9577212,"line_start":2496,"line_end":2496,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577847,"byte_end":9577864,"line_start":2514,"line_end":2514,"column_start":8,"column_end":25},"name":"shr_all_u16_m128i","qualname":"::x86_x64::sse2::shr_all_u16_m128i","value":"pub fn shr_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577379,"byte_end":9577457,"line_start":2502,"line_end":2502,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577458,"byte_end":9577461,"line_start":2503,"line_end":2503,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577462,"byte_end":9577469,"line_start":2504,"line_end":2504,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577470,"byte_end":9577493,"line_start":2505,"line_end":2505,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577494,"byte_end":9577556,"line_start":2506,"line_end":2506,"column_start":1,"column_end":63}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577557,"byte_end":9577593,"line_start":2507,"line_end":2507,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shr_all_u16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577594,"byte_end":9577647,"line_start":2508,"line_end":2508,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_u16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, 100 >> 3, 200 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577648,"byte_end":9577745,"line_start":2509,"line_end":2509,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577746,"byte_end":9577753,"line_start":2510,"line_end":2510,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577754,"byte_end":9577765,"line_start":2511,"line_end":2511,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577766,"byte_end":9577783,"line_start":2512,"line_end":2512,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":788},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578363,"byte_end":9578380,"line_start":2530,"line_end":2530,"column_start":8,"column_end":25},"name":"shr_all_u32_m128i","qualname":"::x86_x64::sse2::shr_all_u32_m128i","value":"pub fn shr_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9577951,"byte_end":9578029,"line_start":2518,"line_end":2518,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578030,"byte_end":9578033,"line_start":2519,"line_end":2519,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578034,"byte_end":9578041,"line_start":2520,"line_end":2520,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578042,"byte_end":9578065,"line_start":2521,"line_end":2521,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 300, 400]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578066,"byte_end":9578112,"line_start":2522,"line_end":2522,"column_start":1,"column_end":47}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578113,"byte_end":9578149,"line_start":2523,"line_end":2523,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shr_all_u32_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578150,"byte_end":9578203,"line_start":2524,"line_end":2524,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578204,"byte_end":9578261,"line_start":2525,"line_end":2525,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578262,"byte_end":9578269,"line_start":2526,"line_end":2526,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578270,"byte_end":9578281,"line_start":2527,"line_end":2527,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578282,"byte_end":9578299,"line_start":2528,"line_end":2528,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578871,"byte_end":9578888,"line_start":2547,"line_end":2547,"column_start":8,"column_end":25},"name":"shr_all_u64_m128i","qualname":"::x86_x64::sse2::shr_all_u64_m128i","value":"pub fn shr_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578467,"byte_end":9578545,"line_start":2534,"line_end":2534,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578546,"byte_end":9578549,"line_start":2535,"line_end":2535,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578550,"byte_end":9578570,"line_start":2536,"line_end":2536,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578571,"byte_end":9578578,"line_start":2537,"line_end":2537,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578579,"byte_end":9578602,"line_start":2538,"line_end":2538,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 56]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578603,"byte_end":9578640,"line_start":2539,"line_end":2539,"column_start":1,"column_end":38}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578641,"byte_end":9578677,"line_start":2540,"line_end":2540,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shr_all_u64_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578678,"byte_end":9578731,"line_start":2541,"line_end":2541,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 56 >> 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578732,"byte_end":9578769,"line_start":2542,"line_end":2542,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578770,"byte_end":9578777,"line_start":2543,"line_end":2543,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578778,"byte_end":9578789,"line_start":2544,"line_end":2544,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578790,"byte_end":9578807,"line_start":2545,"line_end":2545,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579482,"byte_end":9579499,"line_start":2566,"line_end":2566,"column_start":8,"column_end":25},"name":"shr_imm_u16_m128i","qualname":"::x86_x64::sse2::shr_imm_u16_m128i","value":"pub fn shr_imm_u16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u16` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u16` lanes right by an immediate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9578975,"byte_end":9579024,"line_start":2551,"line_end":2551,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579025,"byte_end":9579028,"line_start":2552,"line_end":2552,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579029,"byte_end":9579049,"line_start":2553,"line_end":2553,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579050,"byte_end":9579053,"line_start":2554,"line_end":2554,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579054,"byte_end":9579061,"line_start":2555,"line_end":2555,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579062,"byte_end":9579085,"line_start":2556,"line_end":2556,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579086,"byte_end":9579148,"line_start":2557,"line_end":2557,"column_start":1,"column_end":63}},{"value":"/ let c: [u16; 8] = shr_imm_u16_m128i::<3>(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579149,"byte_end":9579204,"line_start":2558,"line_end":2558,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, 100 >> 3, 200 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579205,"byte_end":9579302,"line_start":2559,"line_end":2559,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579303,"byte_end":9579310,"line_start":2560,"line_end":2560,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi16`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579311,"byte_end":9579350,"line_start":2561,"line_end":2561,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrlw xmm, imm8`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579351,"byte_end":9579388,"line_start":2562,"line_end":2562,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579389,"byte_end":9579400,"line_start":2563,"line_end":2563,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579401,"byte_end":9579418,"line_start":2564,"line_end":2564,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580006,"byte_end":9580023,"line_start":2583,"line_end":2583,"column_start":8,"column_end":25},"name":"shr_imm_u32_m128i","qualname":"::x86_x64::sse2::shr_imm_u32_m128i","value":"pub fn shr_imm_u32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u32` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u32` lanes right by an immediate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579585,"byte_end":9579634,"line_start":2570,"line_end":2570,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579635,"byte_end":9579638,"line_start":2571,"line_end":2571,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579639,"byte_end":9579646,"line_start":2572,"line_end":2572,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579647,"byte_end":9579670,"line_start":2573,"line_end":2573,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 300, 400]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579671,"byte_end":9579713,"line_start":2574,"line_end":2574,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = shr_imm_u32_m128i::<3>(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579714,"byte_end":9579769,"line_start":2575,"line_end":2575,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579770,"byte_end":9579826,"line_start":2576,"line_end":2576,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579827,"byte_end":9579834,"line_start":2577,"line_end":2577,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi32`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579835,"byte_end":9579874,"line_start":2578,"line_end":2578,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrld xmm, imm8`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579875,"byte_end":9579912,"line_start":2579,"line_end":2579,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579913,"byte_end":9579924,"line_start":2580,"line_end":2580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9579925,"byte_end":9579942,"line_start":2581,"line_end":2581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":794},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580513,"byte_end":9580530,"line_start":2600,"line_end":2600,"column_start":8,"column_end":25},"name":"shr_imm_u64_m128i","qualname":"::x86_x64::sse2::shr_imm_u64_m128i","value":"pub fn shr_imm_u64_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts both `u64` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts both `u64` lanes right by an immediate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580109,"byte_end":9580159,"line_start":2587,"line_end":2587,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580160,"byte_end":9580163,"line_start":2588,"line_end":2588,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580164,"byte_end":9580171,"line_start":2589,"line_end":2589,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580172,"byte_end":9580195,"line_start":2590,"line_end":2590,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 200]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580196,"byte_end":9580234,"line_start":2591,"line_end":2591,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = shr_imm_u64_m128i::<3>(a).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580235,"byte_end":9580290,"line_start":2592,"line_end":2592,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u64 >> 3, 200 >> 3]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580291,"byte_end":9580333,"line_start":2593,"line_end":2593,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580334,"byte_end":9580341,"line_start":2594,"line_end":2594,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi64`]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580342,"byte_end":9580381,"line_start":2595,"line_end":2595,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrlq xmm, imm8`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580382,"byte_end":9580419,"line_start":2596,"line_end":2596,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580420,"byte_end":9580431,"line_start":2597,"line_end":2597,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580432,"byte_end":9580449,"line_start":2598,"line_end":2598,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":796},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580946,"byte_end":9580957,"line_start":2615,"line_end":2615,"column_start":8,"column_end":19},"name":"store_m128d","qualname":"::x86_x64::sse2::store_m128d","value":"pub fn store_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580616,"byte_end":9580660,"line_start":2604,"line_end":2604,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580661,"byte_end":9580668,"line_start":2605,"line_end":2605,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580669,"byte_end":9580692,"line_start":2606,"line_end":2606,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580693,"byte_end":9580737,"line_start":2607,"line_end":2607,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580738,"byte_end":9580769,"line_start":2608,"line_end":2608,"column_start":1,"column_end":32}},{"value":"/ store_m128d(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580770,"byte_end":9580797,"line_start":2609,"line_end":2609,"column_start":1,"column_end":28}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580798,"byte_end":9580823,"line_start":2610,"line_end":2610,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580824,"byte_end":9580856,"line_start":2611,"line_end":2611,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580857,"byte_end":9580864,"line_start":2612,"line_end":2612,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9580865,"byte_end":9580882,"line_start":2613,"line_end":2613,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":797},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581344,"byte_end":9581357,"line_start":2629,"line_end":2629,"column_start":8,"column_end":21},"name":"store_m128d_s","qualname":"::x86_x64::sse2::store_m128d_s","value":"pub fn store_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_m128d_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581048,"byte_end":9581101,"line_start":2619,"line_end":2619,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581102,"byte_end":9581109,"line_start":2620,"line_end":2620,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581110,"byte_end":9581133,"line_start":2621,"line_end":2621,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581134,"byte_end":9581178,"line_start":2622,"line_end":2622,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581179,"byte_end":9581199,"line_start":2623,"line_end":2623,"column_start":1,"column_end":21}},{"value":"/ store_m128d_s(&mut f, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581200,"byte_end":9581229,"line_start":2624,"line_end":2624,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581230,"byte_end":9581254,"line_start":2625,"line_end":2625,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581255,"byte_end":9581262,"line_start":2626,"line_end":2626,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581263,"byte_end":9581280,"line_start":2627,"line_end":2627,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581790,"byte_end":9581807,"line_start":2644,"line_end":2644,"column_start":8,"column_end":25},"name":"store_splat_m128d","qualname":"::x86_x64::sse2::store_splat_m128d","value":"pub fn store_splat_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_splat_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581432,"byte_end":9581498,"line_start":2633,"line_end":2633,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581499,"byte_end":9581506,"line_start":2634,"line_end":2634,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581507,"byte_end":9581530,"line_start":2635,"line_end":2635,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581531,"byte_end":9581575,"line_start":2636,"line_end":2636,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581576,"byte_end":9581607,"line_start":2637,"line_end":2637,"column_start":1,"column_end":32}},{"value":"/ store_splat_m128d(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581608,"byte_end":9581641,"line_start":2638,"line_end":2638,"column_start":1,"column_end":34}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581642,"byte_end":9581667,"line_start":2639,"line_end":2639,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581668,"byte_end":9581700,"line_start":2640,"line_end":2640,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581701,"byte_end":9581708,"line_start":2641,"line_end":2641,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581709,"byte_end":9581726,"line_start":2642,"line_end":2642,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582229,"byte_end":9582240,"line_start":2659,"line_end":2659,"column_start":8,"column_end":19},"name":"store_m128i","qualname":"::x86_x64::sse2::store_m128i","value":"pub fn store_m128i(&mut m128i, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let mut b = zeroed_m128i();\n store_m128i(&mut b, a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581899,"byte_end":9581943,"line_start":2648,"line_end":2648,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581944,"byte_end":9581951,"line_start":2649,"line_end":2649,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581952,"byte_end":9581975,"line_start":2650,"line_end":2650,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9581976,"byte_end":9582014,"line_start":2651,"line_end":2651,"column_start":1,"column_end":39}},{"value":"/ let mut b = zeroed_m128i();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582015,"byte_end":9582046,"line_start":2652,"line_end":2652,"column_start":1,"column_end":32}},{"value":"/ store_m128i(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582047,"byte_end":9582074,"line_start":2653,"line_end":2653,"column_start":1,"column_end":28}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582075,"byte_end":9582106,"line_start":2654,"line_end":2654,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582107,"byte_end":9582139,"line_start":2655,"line_end":2655,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582140,"byte_end":9582147,"line_start":2656,"line_end":2656,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582148,"byte_end":9582165,"line_start":2657,"line_end":2657,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582617,"byte_end":9582635,"line_start":2673,"line_end":2673,"column_start":8,"column_end":26},"name":"store_high_m128d_s","qualname":"::x86_x64::sse2::store_high_m128d_s","value":"pub fn store_high_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the high lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_high_m128d_s(&mut f, a);\n assert_eq!(f, 12.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the high lane value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582315,"byte_end":9582369,"line_start":2663,"line_end":2663,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582370,"byte_end":9582377,"line_start":2664,"line_end":2664,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582378,"byte_end":9582401,"line_start":2665,"line_end":2665,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582402,"byte_end":9582446,"line_start":2666,"line_end":2666,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582447,"byte_end":9582467,"line_start":2667,"line_end":2667,"column_start":1,"column_end":21}},{"value":"/ store_high_m128d_s(&mut f, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582468,"byte_end":9582502,"line_start":2668,"line_end":2668,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, 12.0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582503,"byte_end":9582527,"line_start":2669,"line_end":2669,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582528,"byte_end":9582535,"line_start":2670,"line_end":2670,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582536,"byte_end":9582553,"line_start":2671,"line_end":2671,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583034,"byte_end":9583051,"line_start":2688,"line_end":2688,"column_start":8,"column_end":25},"name":"store_i64_m128i_s","qualname":"::x86_x64::sse2::store_i64_m128i_s","value":"pub fn store_i64_m128i_s(&mut i64, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let mut b = 0_i64;\n store_i64_m128i_s(&mut b, a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582711,"byte_end":9582755,"line_start":2677,"line_end":2677,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582756,"byte_end":9582763,"line_start":2678,"line_end":2678,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582764,"byte_end":9582787,"line_start":2679,"line_end":2679,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582788,"byte_end":9582824,"line_start":2680,"line_end":2680,"column_start":1,"column_end":37}},{"value":"/ let mut b = 0_i64;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582825,"byte_end":9582847,"line_start":2681,"line_end":2681,"column_start":1,"column_end":23}},{"value":"/ store_i64_m128i_s(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582848,"byte_end":9582881,"line_start":2682,"line_end":2682,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582882,"byte_end":9582907,"line_start":2683,"line_end":2683,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582908,"byte_end":9582915,"line_start":2684,"line_end":2684,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582916,"byte_end":9582933,"line_start":2685,"line_end":2685,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9582934,"byte_end":9582970,"line_start":2686,"line_end":2686,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583485,"byte_end":9583505,"line_start":2703,"line_end":2703,"column_start":8,"column_end":28},"name":"store_reversed_m128d","qualname":"::x86_x64::sse2::store_reversed_m128d","value":"pub fn store_reversed_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_reversed_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583146,"byte_end":9583190,"line_start":2692,"line_end":2692,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583191,"byte_end":9583198,"line_start":2693,"line_end":2693,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583199,"byte_end":9583222,"line_start":2694,"line_end":2694,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583223,"byte_end":9583267,"line_start":2695,"line_end":2695,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583268,"byte_end":9583299,"line_start":2696,"line_end":2696,"column_start":1,"column_end":32}},{"value":"/ store_reversed_m128d(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583300,"byte_end":9583336,"line_start":2697,"line_end":2697,"column_start":1,"column_end":37}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583337,"byte_end":9583362,"line_start":2698,"line_end":2698,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [12.0, 10.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583363,"byte_end":9583395,"line_start":2699,"line_end":2699,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583396,"byte_end":9583403,"line_start":2700,"line_end":2700,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583404,"byte_end":9583421,"line_start":2701,"line_end":2701,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583907,"byte_end":9583928,"line_start":2717,"line_end":2717,"column_start":8,"column_end":29},"name":"store_unaligned_m128d","qualname":"::x86_x64::sse2::store_unaligned_m128d","value":"pub fn store_unaligned_m128d(&mut [f64; ], m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = [0.0, 0.0];\n store_unaligned_m128d(&mut b, a);\n assert_eq!(b, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583597,"byte_end":9583641,"line_start":2707,"line_end":2707,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583642,"byte_end":9583649,"line_start":2708,"line_end":2708,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583650,"byte_end":9583673,"line_start":2709,"line_end":2709,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583674,"byte_end":9583718,"line_start":2710,"line_end":2710,"column_start":1,"column_end":45}},{"value":"/ let mut b = [0.0, 0.0];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583719,"byte_end":9583746,"line_start":2711,"line_end":2711,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128d(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583747,"byte_end":9583784,"line_start":2712,"line_end":2712,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [10.0, 12.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583785,"byte_end":9583817,"line_start":2713,"line_end":2713,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583818,"byte_end":9583825,"line_start":2714,"line_end":2714,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9583826,"byte_end":9583843,"line_start":2715,"line_end":2715,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584404,"byte_end":9584425,"line_start":2731,"line_end":2731,"column_start":8,"column_end":29},"name":"store_unaligned_m128i","qualname":"::x86_x64::sse2::store_unaligned_m128i","value":"pub fn store_unaligned_m128i(&mut [u8; ], m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let mut b = [0_u8; 16];\n store_unaligned_m128i(&mut b, a);\n assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584010,"byte_end":9584054,"line_start":2721,"line_end":2721,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584055,"byte_end":9584062,"line_start":2722,"line_end":2722,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584063,"byte_end":9584086,"line_start":2723,"line_end":2723,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584087,"byte_end":9584170,"line_start":2724,"line_end":2724,"column_start":1,"column_end":84}},{"value":"/ let mut b = [0_u8; 16];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584171,"byte_end":9584198,"line_start":2725,"line_end":2725,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128i(&mut b, a);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584199,"byte_end":9584236,"line_start":2726,"line_end":2726,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584237,"byte_end":9584314,"line_start":2727,"line_end":2727,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584315,"byte_end":9584322,"line_start":2728,"line_end":2728,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584323,"byte_end":9584340,"line_start":2729,"line_end":2729,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585006,"byte_end":9585018,"line_start":2746,"line_end":2746,"column_start":8,"column_end":20},"name":"sub_i8_m128i","qualname":"::x86_x64::sse2::sub_i8_m128i","value":"pub fn sub_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = sub_i8_m128i(a, b).into();\n assert_eq!(c, [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584517,"byte_end":9584557,"line_start":2735,"line_end":2735,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584558,"byte_end":9584565,"line_start":2736,"line_end":2736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584566,"byte_end":9584589,"line_start":2737,"line_end":2737,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584590,"byte_end":9584673,"line_start":2738,"line_end":2738,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584674,"byte_end":9584765,"line_start":2739,"line_end":2739,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = sub_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584766,"byte_end":9584814,"line_start":2740,"line_end":2740,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584815,"byte_end":9584904,"line_start":2741,"line_end":2741,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584905,"byte_end":9584912,"line_start":2742,"line_end":2742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584913,"byte_end":9584924,"line_start":2743,"line_end":2743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9584925,"byte_end":9584942,"line_start":2744,"line_end":2744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585504,"byte_end":9585517,"line_start":2761,"line_end":2761,"column_start":8,"column_end":21},"name":"sub_i16_m128i","qualname":"::x86_x64::sse2::sub_i16_m128i","value":"pub fn sub_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585096,"byte_end":9585137,"line_start":2750,"line_end":2750,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585138,"byte_end":9585145,"line_start":2751,"line_end":2751,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585146,"byte_end":9585169,"line_start":2752,"line_end":2752,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585170,"byte_end":9585228,"line_start":2753,"line_end":2753,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585229,"byte_end":9585294,"line_start":2754,"line_end":2754,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585295,"byte_end":9585344,"line_start":2755,"line_end":2755,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585345,"byte_end":9585402,"line_start":2756,"line_end":2756,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585403,"byte_end":9585410,"line_start":2757,"line_end":2757,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585411,"byte_end":9585422,"line_start":2758,"line_end":2758,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585423,"byte_end":9585440,"line_start":2759,"line_end":2759,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585944,"byte_end":9585957,"line_start":2776,"line_end":2776,"column_start":8,"column_end":21},"name":"sub_i32_m128i","qualname":"::x86_x64::sse2::sub_i32_m128i","value":"pub fn sub_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([50, 60, 70, 87]);\n let c: [i32; 4] = sub_i32_m128i(a, b).into();\n assert_eq!(c, [-49, -58, -67, -83]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i32`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585596,"byte_end":9585637,"line_start":2765,"line_end":2765,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585638,"byte_end":9585645,"line_start":2766,"line_end":2766,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585646,"byte_end":9585669,"line_start":2767,"line_end":2767,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585670,"byte_end":9585708,"line_start":2768,"line_end":2768,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([50, 60, 70, 87]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585709,"byte_end":9585751,"line_start":2769,"line_end":2769,"column_start":1,"column_end":43}},{"value":"/ let c: [i32; 4] = sub_i32_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585752,"byte_end":9585801,"line_start":2770,"line_end":2770,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-49, -58, -67, -83]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585802,"byte_end":9585842,"line_start":2771,"line_end":2771,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585843,"byte_end":9585850,"line_start":2772,"line_end":2772,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585851,"byte_end":9585862,"line_start":2773,"line_end":2773,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9585863,"byte_end":9585880,"line_start":2774,"line_end":2774,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":810},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586372,"byte_end":9586385,"line_start":2791,"line_end":2791,"column_start":8,"column_end":21},"name":"sub_i64_m128i","qualname":"::x86_x64::sse2::sub_i64_m128i","value":"pub fn sub_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = sub_i64_m128i(a, b).into();\n assert_eq!(c, [9093, 86]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i64`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586036,"byte_end":9586077,"line_start":2780,"line_end":2780,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586078,"byte_end":9586085,"line_start":2781,"line_end":2781,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586086,"byte_end":9586109,"line_start":2782,"line_end":2782,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586110,"byte_end":9586148,"line_start":2783,"line_end":2783,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586149,"byte_end":9586189,"line_start":2784,"line_end":2784,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = sub_i64_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586190,"byte_end":9586239,"line_start":2785,"line_end":2785,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [9093, 86]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586240,"byte_end":9586270,"line_start":2786,"line_end":2786,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586271,"byte_end":9586278,"line_start":2787,"line_end":2787,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586279,"byte_end":9586290,"line_start":2788,"line_end":2788,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586291,"byte_end":9586308,"line_start":2789,"line_end":2789,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":811},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586783,"byte_end":9586792,"line_start":2806,"line_end":2806,"column_start":8,"column_end":17},"name":"sub_m128d","qualname":"::x86_x64::sse2::sub_m128d","value":"pub fn sub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = sub_m128d(a, b).to_array();\n assert_eq!(c, [-8.0, 93.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586464,"byte_end":9586485,"line_start":2795,"line_end":2795,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586486,"byte_end":9586493,"line_start":2796,"line_end":2796,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586494,"byte_end":9586517,"line_start":2797,"line_end":2797,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586518,"byte_end":9586562,"line_start":2798,"line_end":2798,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586563,"byte_end":9586608,"line_start":2799,"line_end":2799,"column_start":1,"column_end":46}},{"value":"/ let c = sub_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586609,"byte_end":9586648,"line_start":2800,"line_end":2800,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [-8.0, 93.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586649,"byte_end":9586681,"line_start":2801,"line_end":2801,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586682,"byte_end":9586689,"line_start":2802,"line_end":2802,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586690,"byte_end":9586701,"line_start":2803,"line_end":2803,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586702,"byte_end":9586719,"line_start":2804,"line_end":2804,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":812},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587215,"byte_end":9587226,"line_start":2821,"line_end":2821,"column_start":8,"column_end":19},"name":"sub_m128d_s","qualname":"::x86_x64::sse2::sub_m128d_s","value":"pub fn sub_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a - b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = sub_m128d_s(a, b).to_array();\n assert_eq!(c, [-8.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a - b`, high lane unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586868,"byte_end":9586913,"line_start":2810,"line_end":2810,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586914,"byte_end":9586921,"line_start":2811,"line_end":2811,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586922,"byte_end":9586945,"line_start":2812,"line_end":2812,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586946,"byte_end":9586990,"line_start":2813,"line_end":2813,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9586991,"byte_end":9587038,"line_start":2814,"line_end":2814,"column_start":1,"column_end":48}},{"value":"/ let c = sub_m128d_s(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587039,"byte_end":9587080,"line_start":2815,"line_end":2815,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-8.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587081,"byte_end":9587113,"line_start":2816,"line_end":2816,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587114,"byte_end":9587121,"line_start":2817,"line_end":2817,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587122,"byte_end":9587133,"line_start":2818,"line_end":2818,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587134,"byte_end":9587151,"line_start":2819,"line_end":2819,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":813},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587818,"byte_end":9587841,"line_start":2836,"line_end":2836,"column_start":8,"column_end":31},"name":"sub_saturating_i8_m128i","qualname":"::x86_x64::sse2::sub_saturating_i8_m128i","value":"pub fn sub_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);\n let b = m128i::from([0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();\n assert_eq!(c, [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587302,"byte_end":9587353,"line_start":2825,"line_end":2825,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587354,"byte_end":9587361,"line_start":2826,"line_end":2826,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587362,"byte_end":9587385,"line_start":2827,"line_end":2827,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587386,"byte_end":9587474,"line_start":2828,"line_end":2828,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587475,"byte_end":9587565,"line_start":2829,"line_end":2829,"column_start":1,"column_end":91}},{"value":"/ let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587566,"byte_end":9587625,"line_start":2830,"line_end":2830,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587626,"byte_end":9587716,"line_start":2831,"line_end":2831,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587717,"byte_end":9587724,"line_start":2832,"line_end":2832,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587725,"byte_end":9587736,"line_start":2833,"line_end":2833,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587737,"byte_end":9587754,"line_start":2834,"line_end":2834,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":814},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588359,"byte_end":9588383,"line_start":2851,"line_end":2851,"column_start":8,"column_end":32},"name":"sub_saturating_i16_m128i","qualname":"::x86_x64::sse2::sub_saturating_i16_m128i","value":"pub fn sub_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);\n let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587920,"byte_end":9587972,"line_start":2840,"line_end":2840,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587973,"byte_end":9587980,"line_start":2841,"line_end":2841,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9587981,"byte_end":9588004,"line_start":2842,"line_end":2842,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588005,"byte_end":9588063,"line_start":2843,"line_end":2843,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588064,"byte_end":9588134,"line_start":2844,"line_end":2844,"column_start":1,"column_end":71}},{"value":"/ let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588135,"byte_end":9588195,"line_start":2845,"line_end":2845,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588196,"byte_end":9588257,"line_start":2846,"line_end":2846,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588258,"byte_end":9588265,"line_start":2847,"line_end":2847,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588266,"byte_end":9588277,"line_start":2848,"line_end":2848,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588278,"byte_end":9588295,"line_start":2849,"line_end":2849,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":815},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588961,"byte_end":9588984,"line_start":2866,"line_end":2866,"column_start":8,"column_end":31},"name":"sub_saturating_u8_m128i","qualname":"::x86_x64::sse2::sub_saturating_u8_m128i","value":"pub fn sub_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);\n let b = m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();\n assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588463,"byte_end":9588514,"line_start":2855,"line_end":2855,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588515,"byte_end":9588522,"line_start":2856,"line_end":2856,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588523,"byte_end":9588546,"line_start":2857,"line_end":2857,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588547,"byte_end":9588634,"line_start":2858,"line_end":2858,"column_start":1,"column_end":88}},{"value":"/ let b = m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588635,"byte_end":9588723,"line_start":2859,"line_end":2859,"column_start":1,"column_end":89}},{"value":"/ let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588724,"byte_end":9588783,"line_start":2860,"line_end":2860,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588784,"byte_end":9588859,"line_start":2861,"line_end":2861,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588860,"byte_end":9588867,"line_start":2862,"line_end":2862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588868,"byte_end":9588879,"line_start":2863,"line_end":2863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9588880,"byte_end":9588897,"line_start":2864,"line_end":2864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":816},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589508,"byte_end":9589532,"line_start":2881,"line_end":2881,"column_start":8,"column_end":32},"name":"sub_saturating_u16_m128i","qualname":"::x86_x64::sse2::sub_saturating_u16_m128i","value":"pub fn sub_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);\n let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);\n let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u16`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589063,"byte_end":9589115,"line_start":2870,"line_end":2870,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589116,"byte_end":9589123,"line_start":2871,"line_end":2871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589124,"byte_end":9589147,"line_start":2872,"line_end":2872,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589148,"byte_end":9589218,"line_start":2873,"line_end":2873,"column_start":1,"column_end":71}},{"value":"/ let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589219,"byte_end":9589291,"line_start":2874,"line_end":2874,"column_start":1,"column_end":73}},{"value":"/ let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589292,"byte_end":9589352,"line_start":2875,"line_end":2875,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589353,"byte_end":9589406,"line_start":2876,"line_end":2876,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589407,"byte_end":9589414,"line_start":2877,"line_end":2877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589415,"byte_end":9589426,"line_start":2878,"line_end":2878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589427,"byte_end":9589444,"line_start":2879,"line_end":2879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":817},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590121,"byte_end":9590141,"line_start":2896,"line_end":2896,"column_start":8,"column_end":28},"name":"unpack_high_i8_m128i","qualname":"::x86_x64::sse2::unpack_high_i8_m128i","value":"pub fn unpack_high_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();\n assert_eq!(c, [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i8` lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589612,"byte_end":9589669,"line_start":2885,"line_end":2885,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589670,"byte_end":9589677,"line_start":2886,"line_end":2886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589678,"byte_end":9589701,"line_start":2887,"line_end":2887,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589702,"byte_end":9589785,"line_start":2888,"line_end":2888,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589786,"byte_end":9589877,"line_start":2889,"line_end":2889,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589878,"byte_end":9589934,"line_start":2890,"line_end":2890,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9589935,"byte_end":9590019,"line_start":2891,"line_end":2891,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590020,"byte_end":9590027,"line_start":2892,"line_end":2892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590028,"byte_end":9590039,"line_start":2893,"line_end":2893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590040,"byte_end":9590057,"line_start":2894,"line_end":2894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":818},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590651,"byte_end":9590672,"line_start":2911,"line_end":2911,"column_start":8,"column_end":29},"name":"unpack_high_i16_m128i","qualname":"::x86_x64::sse2::unpack_high_i16_m128i","value":"pub fn unpack_high_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();\n assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i16` lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590224,"byte_end":9590282,"line_start":2900,"line_end":2900,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590283,"byte_end":9590290,"line_start":2901,"line_end":2901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590291,"byte_end":9590314,"line_start":2902,"line_end":2902,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590315,"byte_end":9590373,"line_start":2903,"line_end":2903,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590374,"byte_end":9590435,"line_start":2904,"line_end":2904,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590436,"byte_end":9590493,"line_start":2905,"line_end":2905,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590494,"byte_end":9590549,"line_start":2906,"line_end":2906,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590550,"byte_end":9590557,"line_start":2907,"line_end":2907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590558,"byte_end":9590569,"line_start":2908,"line_end":2908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590570,"byte_end":9590587,"line_start":2909,"line_end":2909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":819},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591117,"byte_end":9591138,"line_start":2926,"line_end":2926,"column_start":8,"column_end":29},"name":"unpack_high_i32_m128i","qualname":"::x86_x64::sse2::unpack_high_i32_m128i","value":"pub fn unpack_high_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i32` lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590756,"byte_end":9590814,"line_start":2915,"line_end":2915,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590815,"byte_end":9590822,"line_start":2916,"line_end":2916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590823,"byte_end":9590846,"line_start":2917,"line_end":2917,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590847,"byte_end":9590885,"line_start":2918,"line_end":2918,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590886,"byte_end":9590924,"line_start":2919,"line_end":2919,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590925,"byte_end":9590982,"line_start":2920,"line_end":2920,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [3, 7, 4, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9590983,"byte_end":9591015,"line_start":2921,"line_end":2921,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591016,"byte_end":9591023,"line_start":2922,"line_end":2922,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591024,"byte_end":9591035,"line_start":2923,"line_end":2923,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591036,"byte_end":9591053,"line_start":2924,"line_end":2924,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":820},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591580,"byte_end":9591601,"line_start":2941,"line_end":2941,"column_start":8,"column_end":29},"name":"unpack_high_i64_m128i","qualname":"::x86_x64::sse2::unpack_high_i64_m128i","value":"pub fn unpack_high_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();\n assert_eq!(c, [87, 1]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i64` lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591222,"byte_end":9591280,"line_start":2930,"line_end":2930,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591281,"byte_end":9591288,"line_start":2931,"line_end":2931,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591289,"byte_end":9591312,"line_start":2932,"line_end":2932,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591313,"byte_end":9591351,"line_start":2933,"line_end":2933,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591352,"byte_end":9591392,"line_start":2934,"line_end":2934,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591393,"byte_end":9591450,"line_start":2935,"line_end":2935,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [87, 1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591451,"byte_end":9591478,"line_start":2936,"line_end":2936,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591479,"byte_end":9591486,"line_start":2937,"line_end":2937,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591487,"byte_end":9591498,"line_start":2938,"line_end":2938,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591499,"byte_end":9591516,"line_start":2939,"line_end":2939,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":821},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592043,"byte_end":9592060,"line_start":2956,"line_end":2956,"column_start":8,"column_end":25},"name":"unpack_high_m128d","qualname":"::x86_x64::sse2::unpack_high_m128d","value":"pub fn unpack_high_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_high_m128d(a, b).to_array();\n assert_eq!(c, [87.5, -6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591685,"byte_end":9591737,"line_start":2945,"line_end":2945,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591738,"byte_end":9591745,"line_start":2946,"line_end":2946,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591746,"byte_end":9591769,"line_start":2947,"line_end":2947,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591770,"byte_end":9591814,"line_start":2948,"line_end":2948,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591815,"byte_end":9591860,"line_start":2949,"line_end":2949,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_high_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591861,"byte_end":9591908,"line_start":2950,"line_end":2950,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [87.5, -6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591909,"byte_end":9591941,"line_start":2951,"line_end":2951,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591942,"byte_end":9591949,"line_start":2952,"line_end":2952,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591950,"byte_end":9591961,"line_start":2953,"line_end":2953,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9591962,"byte_end":9591979,"line_start":2954,"line_end":2954,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":822},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592644,"byte_end":9592663,"line_start":2971,"line_end":2971,"column_start":8,"column_end":27},"name":"unpack_low_i8_m128i","qualname":"::x86_x64::sse2::unpack_low_i8_m128i","value":"pub fn unpack_low_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i8` lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592141,"byte_end":9592197,"line_start":2960,"line_end":2960,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592198,"byte_end":9592205,"line_start":2961,"line_end":2961,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592206,"byte_end":9592229,"line_start":2962,"line_end":2962,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592230,"byte_end":9592313,"line_start":2963,"line_end":2963,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592314,"byte_end":9592409,"line_start":2964,"line_end":2964,"column_start":1,"column_end":96}},{"value":"/ let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592410,"byte_end":9592465,"line_start":2965,"line_end":2965,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592466,"byte_end":9592542,"line_start":2966,"line_end":2966,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592543,"byte_end":9592550,"line_start":2967,"line_end":2967,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592551,"byte_end":9592562,"line_start":2968,"line_end":2968,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592563,"byte_end":9592580,"line_start":2969,"line_end":2969,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":823},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593160,"byte_end":9593180,"line_start":2986,"line_end":2986,"column_start":8,"column_end":28},"name":"unpack_low_i16_m128i","qualname":"::x86_x64::sse2::unpack_low_i16_m128i","value":"pub fn unpack_low_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i16` lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592746,"byte_end":9592803,"line_start":2975,"line_end":2975,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592804,"byte_end":9592811,"line_start":2976,"line_end":2976,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592812,"byte_end":9592835,"line_start":2977,"line_end":2977,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592836,"byte_end":9592894,"line_start":2978,"line_end":2978,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592895,"byte_end":9592956,"line_start":2979,"line_end":2979,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9592957,"byte_end":9593013,"line_start":2980,"line_end":2980,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593014,"byte_end":9593058,"line_start":2981,"line_end":2981,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593059,"byte_end":9593066,"line_start":2982,"line_end":2982,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593067,"byte_end":9593078,"line_start":2983,"line_end":2983,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593079,"byte_end":9593096,"line_start":2984,"line_end":2984,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":824},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593623,"byte_end":9593643,"line_start":3001,"line_end":3001,"column_start":8,"column_end":28},"name":"unpack_low_i32_m128i","qualname":"::x86_x64::sse2::unpack_low_i32_m128i","value":"pub fn unpack_low_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i32` lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593264,"byte_end":9593321,"line_start":2990,"line_end":2990,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593322,"byte_end":9593329,"line_start":2991,"line_end":2991,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593330,"byte_end":9593353,"line_start":2992,"line_end":2992,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593354,"byte_end":9593392,"line_start":2993,"line_end":2993,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593393,"byte_end":9593431,"line_start":2994,"line_end":2994,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593432,"byte_end":9593488,"line_start":2995,"line_end":2995,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593489,"byte_end":9593521,"line_start":2996,"line_end":2996,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593522,"byte_end":9593529,"line_start":2997,"line_end":2997,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593530,"byte_end":9593541,"line_start":2998,"line_end":2998,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593542,"byte_end":9593559,"line_start":2999,"line_end":2999,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":825},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594087,"byte_end":9594107,"line_start":3016,"line_end":3016,"column_start":8,"column_end":28},"name":"unpack_low_i64_m128i","qualname":"::x86_x64::sse2::unpack_low_i64_m128i","value":"pub fn unpack_low_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();\n assert_eq!(c, [92, -9001]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i64` lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593727,"byte_end":9593784,"line_start":3005,"line_end":3005,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593785,"byte_end":9593792,"line_start":3006,"line_end":3006,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593793,"byte_end":9593816,"line_start":3007,"line_end":3007,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593817,"byte_end":9593855,"line_start":3008,"line_end":3008,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593856,"byte_end":9593896,"line_start":3009,"line_end":3009,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593897,"byte_end":9593953,"line_start":3010,"line_end":3010,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [92, -9001]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593954,"byte_end":9593985,"line_start":3011,"line_end":3011,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593986,"byte_end":9593993,"line_start":3012,"line_end":3012,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9593994,"byte_end":9594005,"line_start":3013,"line_end":3013,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594006,"byte_end":9594023,"line_start":3014,"line_end":3014,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":826},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594548,"byte_end":9594564,"line_start":3031,"line_end":3031,"column_start":8,"column_end":24},"name":"unpack_low_m128d","qualname":"::x86_x64::sse2::unpack_low_m128d","value":"pub fn unpack_low_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_low_m128d(a, b).to_array();\n assert_eq!(c, [92.0, 100.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594191,"byte_end":9594242,"line_start":3020,"line_end":3020,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594243,"byte_end":9594250,"line_start":3021,"line_end":3021,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594251,"byte_end":9594274,"line_start":3022,"line_end":3022,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594275,"byte_end":9594319,"line_start":3023,"line_end":3023,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594320,"byte_end":9594365,"line_start":3024,"line_end":3024,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_low_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594366,"byte_end":9594412,"line_start":3025,"line_end":3025,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [92.0, 100.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594413,"byte_end":9594446,"line_start":3026,"line_end":3026,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594447,"byte_end":9594454,"line_start":3027,"line_end":3027,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594455,"byte_end":9594466,"line_start":3028,"line_end":3028,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594467,"byte_end":9594484,"line_start":3029,"line_end":3029,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":827},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594959,"byte_end":9594971,"line_start":3046,"line_end":3046,"column_start":8,"column_end":20},"name":"bitxor_m128d","qualname":"::x86_x64::sse2::bitxor_m128d","value":"pub fn bitxor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitxor_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594645,"byte_end":9594665,"line_start":3035,"line_end":3035,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594666,"byte_end":9594673,"line_start":3036,"line_end":3036,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594674,"byte_end":9594697,"line_start":3037,"line_end":3037,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594698,"byte_end":9594740,"line_start":3038,"line_end":3038,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594741,"byte_end":9594783,"line_start":3039,"line_end":3039,"column_start":1,"column_end":43}},{"value":"/ let c = bitxor_m128d(a, b).to_array();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594784,"byte_end":9594826,"line_start":3040,"line_end":3040,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594827,"byte_end":9594857,"line_start":3041,"line_end":3041,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594858,"byte_end":9594865,"line_start":3042,"line_end":3042,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594866,"byte_end":9594877,"line_start":3043,"line_end":3043,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9594878,"byte_end":9594895,"line_start":3044,"line_end":3044,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":828},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595361,"byte_end":9595373,"line_start":3061,"line_end":3061,"column_start":8,"column_end":20},"name":"bitxor_m128i","qualname":"::x86_x64::sse2::bitxor_m128i","value":"pub fn bitxor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitxor_m128i(a, b).into();\n assert_eq!(c, [0, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595047,"byte_end":9595067,"line_start":3050,"line_end":3050,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595068,"byte_end":9595075,"line_start":3051,"line_end":3051,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595076,"byte_end":9595099,"line_start":3052,"line_end":3052,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595100,"byte_end":9595138,"line_start":3053,"line_end":3053,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595139,"byte_end":9595177,"line_start":3054,"line_end":3054,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitxor_m128i(a, b).into();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595178,"byte_end":9595226,"line_start":3055,"line_end":3055,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 1, 1, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595227,"byte_end":9595259,"line_start":3056,"line_end":3056,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595260,"byte_end":9595267,"line_start":3057,"line_end":3057,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595268,"byte_end":9595279,"line_start":3058,"line_end":3058,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9595280,"byte_end":9595297,"line_start":3059,"line_end":3059,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":10541,"byte_end":10563,"line_start":233,"line_end":233,"column_start":10,"column_end":32},"name":"read_timestamp_counter","qualname":"::x86_x64::read_timestamp_counter","value":"pub fn read_timestamp_counter() -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":11408,"byte_end":11432,"line_start":253,"line_end":253,"column_start":10,"column_end":34},"name":"read_timestamp_counter_p","qualname":"::x86_x64::read_timestamp_counter_p","value":"pub fn read_timestamp_counter_p(&mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value and store the processor signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":11723,"byte_end":11736,"line_start":265,"line_end":265,"column_start":10,"column_end":23},"name":"byte_swap_i32","qualname":"::x86_x64::byte_swap_i32","value":"pub fn byte_swap_i32(i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 32-bit value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":12067,"byte_end":12080,"line_start":278,"line_end":278,"column_start":10,"column_end":23},"name":"byte_swap_i64","qualname":"::x86_x64::byte_swap_i64","value":"pub fn byte_swap_i64(i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 64-bit value.","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":12029,"byte_end":12057,"line_start":277,"line_end":277,"column_start":3,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416643,"byte_end":9416647,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416710,"byte_end":9416714,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416800,"byte_end":9416804,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416814,"byte_end":9416818,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417836,"byte_end":9417840,"line_start":66,"line_end":66,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417935,"byte_end":9417939,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417961,"byte_end":9417965,"line_start":75,"line_end":75,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9418093,"byte_end":9418097,"line_start":83,"line_end":83,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9418695,"byte_end":9418699,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9419017,"byte_end":9419021,"line_start":121,"line_end":121,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9419380,"byte_end":9419384,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9419749,"byte_end":9419753,"line_start":149,"line_end":149,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9420074,"byte_end":9420078,"line_start":163,"line_end":163,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9420399,"byte_end":9420403,"line_start":177,"line_end":177,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9420772,"byte_end":9420776,"line_start":191,"line_end":191,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9421142,"byte_end":9421146,"line_start":205,"line_end":205,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422376,"byte_end":9422381,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422444,"byte_end":9422449,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422536,"byte_end":9422541,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422551,"byte_end":9422556,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423571,"byte_end":9423576,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423671,"byte_end":9423676,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423698,"byte_end":9423703,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423831,"byte_end":9423836,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9424436,"byte_end":9424441,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9424856,"byte_end":9424861,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9425307,"byte_end":9425312,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9425774,"byte_end":9425779,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9426194,"byte_end":9426199,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9426614,"byte_end":9426619,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9427087,"byte_end":9427092,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9427557,"byte_end":9427562,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429069,"byte_end":9429074,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429137,"byte_end":9429142,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429229,"byte_end":9429234,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429254,"byte_end":9429259,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429354,"byte_end":9429359,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429381,"byte_end":9429386,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429524,"byte_end":9429529,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429815,"byte_end":9429820,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9430117,"byte_end":9430122,"line_start":81,"line_end":81,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9430408,"byte_end":9430413,"line_start":97,"line_end":97,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9430710,"byte_end":9430715,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9431001,"byte_end":9431006,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9431303,"byte_end":9431308,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9431594,"byte_end":9431599,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9431893,"byte_end":9431898,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9432168,"byte_end":9432173,"line_start":199,"line_end":199,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9432508,"byte_end":9432513,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9432974,"byte_end":9432979,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9433473,"byte_end":9433478,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9433932,"byte_end":9433937,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9434403,"byte_end":9434408,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9434874,"byte_end":9434879,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9435337,"byte_end":9435342,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9435797,"byte_end":9435802,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437271,"byte_end":9437275,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437338,"byte_end":9437342,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437428,"byte_end":9437432,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437442,"byte_end":9437446,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438460,"byte_end":9438464,"line_start":64,"line_end":64,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438559,"byte_end":9438563,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438585,"byte_end":9438589,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438717,"byte_end":9438721,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9439319,"byte_end":9439323,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9439805,"byte_end":9439809,"line_start":124,"line_end":124,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9440310,"byte_end":9440314,"line_start":143,"line_end":143,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9440823,"byte_end":9440827,"line_start":162,"line_end":162,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9441308,"byte_end":9441312,"line_start":181,"line_end":181,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9441793,"byte_end":9441797,"line_start":200,"line_end":200,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9442310,"byte_end":9442314,"line_start":219,"line_end":219,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9442824,"byte_end":9442828,"line_start":238,"line_end":238,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444241,"byte_end":9444246,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444309,"byte_end":9444314,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444401,"byte_end":9444406,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444416,"byte_end":9444421,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445436,"byte_end":9445441,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445536,"byte_end":9445541,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445563,"byte_end":9445568,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445696,"byte_end":9445701,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9446301,"byte_end":9446306,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9446721,"byte_end":9446726,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9447172,"byte_end":9447177,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9447639,"byte_end":9447644,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9448059,"byte_end":9448064,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9448479,"byte_end":9448484,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9448952,"byte_end":9448957,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9449422,"byte_end":9449427,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450934,"byte_end":9450939,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451002,"byte_end":9451007,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451094,"byte_end":9451099,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451119,"byte_end":9451124,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451219,"byte_end":9451224,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451246,"byte_end":9451251,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451389,"byte_end":9451394,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451680,"byte_end":9451685,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451983,"byte_end":9451988,"line_start":81,"line_end":81,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9452277,"byte_end":9452282,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9452581,"byte_end":9452586,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9452872,"byte_end":9452877,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9453174,"byte_end":9453179,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9453465,"byte_end":9453470,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9453769,"byte_end":9453774,"line_start":183,"line_end":183,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9454059,"byte_end":9454064,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9454409,"byte_end":9454414,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9454887,"byte_end":9454892,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9455398,"byte_end":9455403,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9455869,"byte_end":9455874,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9456360,"byte_end":9456365,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9456851,"byte_end":9456856,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9457326,"byte_end":9457331,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9457798,"byte_end":9457803,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9497426,"byte_end":9497430,"line_start":1295,"line_end":1295,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9497574,"byte_end":9497578,"line_start":1303,"line_end":1303,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9497689,"byte_end":9497693,"line_start":1310,"line_end":1310,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9497846,"byte_end":9497850,"line_start":1318,"line_end":1318,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9497963,"byte_end":9497967,"line_start":1325,"line_end":1325,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498117,"byte_end":9498121,"line_start":1333,"line_end":1333,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498234,"byte_end":9498238,"line_start":1340,"line_end":1340,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498391,"byte_end":9498395,"line_start":1348,"line_end":1348,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498506,"byte_end":9498510,"line_start":1355,"line_end":1355,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498654,"byte_end":9498658,"line_start":1363,"line_end":1363,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498766,"byte_end":9498770,"line_start":1370,"line_end":1370,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498914,"byte_end":9498918,"line_start":1378,"line_end":1378,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9499026,"byte_end":9499030,"line_start":1385,"line_end":1385,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9499168,"byte_end":9499172,"line_start":1394,"line_end":1394,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9499535,"byte_end":9499539,"line_start":1408,"line_end":1408,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9499683,"byte_end":9499687,"line_start":1416,"line_end":1416,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9499801,"byte_end":9499805,"line_start":1423,"line_end":1423,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596104,"byte_end":9596109,"line_start":3078,"line_end":3078,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596254,"byte_end":9596259,"line_start":3086,"line_end":3086,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596370,"byte_end":9596375,"line_start":3093,"line_end":3093,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596529,"byte_end":9596534,"line_start":3101,"line_end":3101,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596647,"byte_end":9596652,"line_start":3108,"line_end":3108,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596803,"byte_end":9596808,"line_start":3116,"line_end":3116,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596921,"byte_end":9596926,"line_start":3123,"line_end":3123,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597080,"byte_end":9597085,"line_start":3131,"line_end":3131,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597196,"byte_end":9597201,"line_start":3138,"line_end":3138,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597346,"byte_end":9597351,"line_start":3146,"line_end":3146,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597459,"byte_end":9597464,"line_start":3153,"line_end":3153,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597609,"byte_end":9597614,"line_start":3161,"line_end":3161,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597722,"byte_end":9597727,"line_start":3168,"line_end":3168,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597867,"byte_end":9597872,"line_start":3177,"line_end":3177,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9598236,"byte_end":9598241,"line_start":3191,"line_end":3191,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9598386,"byte_end":9598391,"line_start":3199,"line_end":3199,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9598505,"byte_end":9598510,"line_start":3206,"line_end":3206,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9598920,"byte_end":9598925,"line_start":3219,"line_end":3219,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599079,"byte_end":9599084,"line_start":3227,"line_end":3227,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599197,"byte_end":9599202,"line_start":3234,"line_end":3234,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599353,"byte_end":9599358,"line_start":3242,"line_end":3242,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599471,"byte_end":9599476,"line_start":3249,"line_end":3249,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599630,"byte_end":9599635,"line_start":3257,"line_end":3257,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599746,"byte_end":9599751,"line_start":3264,"line_end":3264,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9600103,"byte_end":9600108,"line_start":3278,"line_end":3278,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9600452,"byte_end":9600457,"line_start":3288,"line_end":3288,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":7091,"byte_end":7109,"line_start":133,"line_end":133,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416643,"byte_end":9416647,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":218}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416710,"byte_end":9416714,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":315}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416800,"byte_end":9416804,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":382}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9416814,"byte_end":9416818,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":95},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417836,"byte_end":9417840,"line_start":66,"line_end":66,"column_start":16,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417935,"byte_end":9417939,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3029}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9417961,"byte_end":9417965,"line_start":75,"line_end":75,"column_start":18,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9418093,"byte_end":9418097,"line_start":83,"line_end":83,"column_start":25,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9418695,"byte_end":9418699,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9419017,"byte_end":9419021,"line_start":121,"line_end":121,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9419380,"byte_end":9419384,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9564}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9419749,"byte_end":9419753,"line_start":149,"line_end":149,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9572}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9420074,"byte_end":9420078,"line_start":163,"line_end":163,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9574}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9420399,"byte_end":9420403,"line_start":177,"line_end":177,"column_start":19,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9566}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9420772,"byte_end":9420776,"line_start":191,"line_end":191,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9568}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":9421142,"byte_end":9421146,"line_start":205,"line_end":205,"column_start":16,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9562}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422376,"byte_end":9422381,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":218}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422444,"byte_end":9422449,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":315}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422536,"byte_end":9422541,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":382}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9422551,"byte_end":9422556,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423571,"byte_end":9423576,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423671,"byte_end":9423676,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3029}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423698,"byte_end":9423703,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9423831,"byte_end":9423836,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9424436,"byte_end":9424441,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9424856,"byte_end":9424861,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9425307,"byte_end":9425312,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9564}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9425774,"byte_end":9425779,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9572}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9426194,"byte_end":9426199,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9574}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9426614,"byte_end":9426619,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9566}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9427087,"byte_end":9427092,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9568}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":9427557,"byte_end":9427562,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9562}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429069,"byte_end":9429074,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":218}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429137,"byte_end":9429142,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":315}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429229,"byte_end":9429234,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":382}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429254,"byte_end":9429259,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429354,"byte_end":9429359,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3029}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429381,"byte_end":9429386,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429524,"byte_end":9429529,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9429815,"byte_end":9429820,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9430117,"byte_end":9430122,"line_start":81,"line_end":81,"column_start":25,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9430408,"byte_end":9430413,"line_start":97,"line_end":97,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9430710,"byte_end":9430715,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9431001,"byte_end":9431006,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9431303,"byte_end":9431308,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9431594,"byte_end":9431599,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9431893,"byte_end":9431898,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9432168,"byte_end":9432173,"line_start":199,"line_end":199,"column_start":21,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9432508,"byte_end":9432513,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9432974,"byte_end":9432979,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9433473,"byte_end":9433478,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9564}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9433932,"byte_end":9433937,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9572}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9434403,"byte_end":9434408,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9574}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9434874,"byte_end":9434879,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9566}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9435337,"byte_end":9435342,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9568}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":9435797,"byte_end":9435802,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9562}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437271,"byte_end":9437275,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":218}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437338,"byte_end":9437342,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":315}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437428,"byte_end":9437432,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":382}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9437442,"byte_end":9437446,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438460,"byte_end":9438464,"line_start":64,"line_end":64,"column_start":16,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438559,"byte_end":9438563,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":3029}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438585,"byte_end":9438589,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9438717,"byte_end":9438721,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9439319,"byte_end":9439323,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9439805,"byte_end":9439809,"line_start":124,"line_end":124,"column_start":18,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9440310,"byte_end":9440314,"line_start":143,"line_end":143,"column_start":17,"column_end":21},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9564}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9440823,"byte_end":9440827,"line_start":162,"line_end":162,"column_start":19,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9572}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9441308,"byte_end":9441312,"line_start":181,"line_end":181,"column_start":19,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9574}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9441793,"byte_end":9441797,"line_start":200,"line_end":200,"column_start":19,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9566}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9442310,"byte_end":9442314,"line_start":219,"line_end":219,"column_start":19,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9568}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":9442824,"byte_end":9442828,"line_start":238,"line_end":238,"column_start":16,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9562}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444241,"byte_end":9444246,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":218}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444309,"byte_end":9444314,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":315}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444401,"byte_end":9444406,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":382}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9444416,"byte_end":9444421,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445436,"byte_end":9445441,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445536,"byte_end":9445541,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":3029}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445563,"byte_end":9445568,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9445696,"byte_end":9445701,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9446301,"byte_end":9446306,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9446721,"byte_end":9446726,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9447172,"byte_end":9447177,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9564}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9447639,"byte_end":9447644,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9572}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9448059,"byte_end":9448064,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9574}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9448479,"byte_end":9448484,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9566}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9448952,"byte_end":9448957,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9568}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":9449422,"byte_end":9449427,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9562}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9450934,"byte_end":9450939,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":218}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451002,"byte_end":9451007,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":315}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451094,"byte_end":9451099,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":382}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451119,"byte_end":9451124,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451219,"byte_end":9451224,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":3029}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451246,"byte_end":9451251,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451389,"byte_end":9451394,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451680,"byte_end":9451685,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9451983,"byte_end":9451988,"line_start":81,"line_end":81,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9452277,"byte_end":9452282,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9452581,"byte_end":9452586,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9452872,"byte_end":9452877,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9453174,"byte_end":9453179,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9453465,"byte_end":9453470,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9453769,"byte_end":9453774,"line_start":183,"line_end":183,"column_start":26,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9454059,"byte_end":9454064,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9454409,"byte_end":9454414,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9454887,"byte_end":9454892,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9455398,"byte_end":9455403,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9564}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9455869,"byte_end":9455874,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9572}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9456360,"byte_end":9456365,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9574}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9456851,"byte_end":9456856,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9566}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9457326,"byte_end":9457331,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9568}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":9457798,"byte_end":9457803,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9562}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9497426,"byte_end":9497430,"line_start":1295,"line_end":1295,"column_start":14,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9497574,"byte_end":9497578,"line_start":1303,"line_end":1303,"column_start":20,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9497689,"byte_end":9497693,"line_start":1310,"line_end":1310,"column_start":17,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3142}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9497846,"byte_end":9497850,"line_start":1318,"line_end":1318,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3169}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9497963,"byte_end":9497967,"line_start":1325,"line_end":1325,"column_start":16,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3147}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498117,"byte_end":9498121,"line_start":1333,"line_end":1333,"column_start":22,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3173}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498234,"byte_end":9498238,"line_start":1340,"line_end":1340,"column_start":17,"column_end":21},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3152}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498391,"byte_end":9498395,"line_start":1348,"line_end":1348,"column_start":23,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3177}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498506,"byte_end":9498510,"line_start":1355,"line_end":1355,"column_start":14,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3101}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498654,"byte_end":9498658,"line_start":1363,"line_end":1363,"column_start":20,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3129}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498766,"byte_end":9498770,"line_start":1370,"line_end":1370,"column_start":14,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3096}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9498914,"byte_end":9498918,"line_start":1378,"line_end":1378,"column_start":20,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3125}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9499026,"byte_end":9499030,"line_start":1385,"line_end":1385,"column_start":14,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3113}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9499168,"byte_end":9499172,"line_start":1394,"line_end":1394,"column_start":14,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3138}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9499535,"byte_end":9499539,"line_start":1408,"line_end":1408,"column_start":14,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9499683,"byte_end":9499687,"line_start":1416,"line_end":1416,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3121}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":9499801,"byte_end":9499805,"line_start":1423,"line_end":1423,"column_start":20,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596104,"byte_end":9596109,"line_start":3078,"line_end":3078,"column_start":14,"column_end":19},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596254,"byte_end":9596259,"line_start":3086,"line_end":3086,"column_start":20,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596370,"byte_end":9596375,"line_start":3093,"line_end":3093,"column_start":17,"column_end":22},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3142}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596529,"byte_end":9596534,"line_start":3101,"line_end":3101,"column_start":23,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3169}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596647,"byte_end":9596652,"line_start":3108,"line_end":3108,"column_start":16,"column_end":21},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3147}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596803,"byte_end":9596808,"line_start":3116,"line_end":3116,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3173}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9596921,"byte_end":9596926,"line_start":3123,"line_end":3123,"column_start":17,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3152}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597080,"byte_end":9597085,"line_start":3131,"line_end":3131,"column_start":23,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3177}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597196,"byte_end":9597201,"line_start":3138,"line_end":3138,"column_start":14,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3101}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597346,"byte_end":9597351,"line_start":3146,"line_end":3146,"column_start":20,"column_end":25},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3129}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597459,"byte_end":9597464,"line_start":3153,"line_end":3153,"column_start":14,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3096}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597609,"byte_end":9597614,"line_start":3161,"line_end":3161,"column_start":20,"column_end":25},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3125}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597722,"byte_end":9597727,"line_start":3168,"line_end":3168,"column_start":14,"column_end":19},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3113}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9597867,"byte_end":9597872,"line_start":3177,"line_end":3177,"column_start":14,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3138}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9598236,"byte_end":9598241,"line_start":3191,"line_end":3191,"column_start":14,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3091}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9598386,"byte_end":9598391,"line_start":3199,"line_end":3199,"column_start":20,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3121}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9598505,"byte_end":9598510,"line_start":3206,"line_end":3206,"column_start":20,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9598920,"byte_end":9598925,"line_start":3219,"line_end":3219,"column_start":17,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3142}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599079,"byte_end":9599084,"line_start":3227,"line_end":3227,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3169}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599197,"byte_end":9599202,"line_start":3234,"line_end":3234,"column_start":16,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3147}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599353,"byte_end":9599358,"line_start":3242,"line_end":3242,"column_start":22,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3173}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599471,"byte_end":9599476,"line_start":3249,"line_end":3249,"column_start":17,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3152}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599630,"byte_end":9599635,"line_start":3257,"line_end":3257,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3177}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9599746,"byte_end":9599751,"line_start":3264,"line_end":3264,"column_start":14,"column_end":19},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3138}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9600103,"byte_end":9600108,"line_start":3278,"line_end":3278,"column_start":20,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9600452,"byte_end":9600457,"line_start":3288,"line_end":3288,"column_start":13,"column_end":18},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2675}}]}