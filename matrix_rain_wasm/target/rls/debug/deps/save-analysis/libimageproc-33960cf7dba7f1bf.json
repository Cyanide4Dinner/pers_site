{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0","program":"/home/utkarsh_arch/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","imageproc","--edition=2018","/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"rayon\"","-C","metadata=33960cf7dba7f1bf","-C","extra-filename=-33960cf7dba7f1bf","--out-dir","/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps","-L","dependency=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps","--extern","approx=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/libapprox-4d5f5b4cd7b7064b.rmeta","--extern","conv=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/libconv-7823b0433b032107.rmeta","--extern","image=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/libimage-2e6e6db6d6854aea.rmeta","--extern","itertools=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/libitertools-10a9cc4d9d8a98c3.rmeta","--extern","nalgebra=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/libnalgebra-a625741bc8d6d15d.rmeta","--extern","num=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/libnum-e4e960f67d241e5e.rmeta","--extern","rand=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/librand-8ee72a2b147e4d68.rmeta","--extern","rand_distr=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/librand_distr-3c234a7822e3b7bd.rmeta","--extern","rayon=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/librayon-d3db476b6e96efef.rmeta","--extern","rusttype=/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/librusttype-212d93e66b2faaae.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/utkarsh_arch/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/utkarsh_arch/Projects/cfd/pers_site/matrix_rain_wasm/target/rls/debug/deps/libimageproc-33960cf7dba7f1bf.rmeta"},"prelude":{"crate_id":{"name":"imageproc","disambiguator":[14137767295463605037,0]},"crate_root":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src","external_crates":[{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14026078687029744792,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[135160560163186024,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5800521777261530329,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7095478770525139037,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17225897750877482818,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15613653607383163471,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12428323400248712701,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[11893279639181573711,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13583305032161054644,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16609837797022023111,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[18098459435141129808,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15244551393771456017,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[6576340271055396708,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15284510821186066958,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12982807908830018159,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":20,"id":{"name":"image","disambiguator":[11572947950622224496,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":21,"id":{"name":"exr","disambiguator":[11236084240830398547,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":22,"id":{"name":"smallvec","disambiguator":[2348492942480733509,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":23,"id":{"name":"half","disambiguator":[9546535355845374684,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":24,"id":{"name":"lebe","disambiguator":[11294292862365901156,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":25,"id":{"name":"deflate","disambiguator":[11898551080906330434,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":26,"id":{"name":"adler32","disambiguator":[9214762285076270716,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":27,"id":{"name":"inflate","disambiguator":[14675775291309597783,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":28,"id":{"name":"bit_field","disambiguator":[9152022449340262825,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":29,"id":{"name":"threadpool","disambiguator":[17316743140132040442,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":30,"id":{"name":"num_cpus","disambiguator":[16560888775637002780,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":31,"id":{"name":"libc","disambiguator":[12560105563294302132,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":32,"id":{"name":"flume","disambiguator":[1848688629785475602,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":33,"id":{"name":"nanorand","disambiguator":[7576395408945985697,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":34,"id":{"name":"getrandom","disambiguator":[15170520512018513196,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":35,"id":{"name":"cfg_if","disambiguator":[1004283514336169005,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":36,"id":{"name":"futures_core","disambiguator":[1150202532660626631,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":37,"id":{"name":"futures_sink","disambiguator":[10473663214796386033,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":38,"id":{"name":"pin_project","disambiguator":[8128051972995396437,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":39,"id":{"name":"pin_project_internal","disambiguator":[14750218360627862615,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":40,"id":{"name":"spin","disambiguator":[11917244109509819835,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":41,"id":{"name":"lock_api","disambiguator":[11994815419998842249,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":42,"id":{"name":"scopeguard","disambiguator":[6845241270465700697,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":43,"id":{"name":"tiff","disambiguator":[15798822091386156608,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":44,"id":{"name":"jpeg_decoder","disambiguator":[8504690428951283637,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","num":45,"id":{"name":"rayon","disambiguator":[3872816210701562059,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":46,"id":{"name":"either","disambiguator":[4415802574558717629,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":47,"id":{"name":"rayon_core","disambiguator":[4810061084519933890,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":48,"id":{"name":"crossbeam_channel","disambiguator":[7776731432217755517,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":49,"id":{"name":"crossbeam_utils","disambiguator":[6443536939578642150,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":50,"id":{"name":"lazy_static","disambiguator":[9708727071027780738,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":51,"id":{"name":"crossbeam_deque","disambiguator":[8156582553416666305,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":52,"id":{"name":"crossbeam_epoch","disambiguator":[7571158957769905963,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":53,"id":{"name":"memoffset","disambiguator":[18135763014048367315,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":54,"id":{"name":"weezl","disambiguator":[2877701607137587169,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":55,"id":{"name":"flate2","disambiguator":[10255814753519597677,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":56,"id":{"name":"crc32fast","disambiguator":[13555655307553806865,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":57,"id":{"name":"miniz_oxide","disambiguator":[2793976076699440696,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":58,"id":{"name":"adler","disambiguator":[15551326393850230296,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":59,"id":{"name":"num_traits","disambiguator":[11293099483745778842,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":60,"id":{"name":"byteorder","disambiguator":[13952539509813365488,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":61,"id":{"name":"gif","disambiguator":[3423929125194959962,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":62,"id":{"name":"color_quant","disambiguator":[3230523111030603819,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":63,"id":{"name":"num_rational","disambiguator":[8119259976891871489,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":64,"id":{"name":"num_bigint","disambiguator":[4757702811012735982,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":65,"id":{"name":"num_integer","disambiguator":[14287495311771682990,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":66,"id":{"name":"scoped_threadpool","disambiguator":[11422021602527162239,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":67,"id":{"name":"num_iter","disambiguator":[18364354704906706474,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":68,"id":{"name":"png","disambiguator":[5633454882991459045,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":69,"id":{"name":"bitflags","disambiguator":[15917436305182542096,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":70,"id":{"name":"bytemuck","disambiguator":[3824981217086855319,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","num":71,"id":{"name":"itertools","disambiguator":[11851320891404069593,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","num":72,"id":{"name":"num","disambiguator":[6676991532285511437,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","num":73,"id":{"name":"num_complex","disambiguator":[16738546276927905959,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","num":74,"id":{"name":"conv","disambiguator":[9372655618650286625,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","num":75,"id":{"name":"custom_derive","disambiguator":[3238397902329526582,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","num":76,"id":{"name":"rusttype","disambiguator":[15315676962001494572,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","num":77,"id":{"name":"owned_ttf_parser","disambiguator":[17215113802488148478,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","num":78,"id":{"name":"ttf_parser","disambiguator":[4112167070868177284,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","num":79,"id":{"name":"ab_glyph_rasterizer","disambiguator":[6833230066403171368,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","num":80,"id":{"name":"approx","disambiguator":[9653540207363211104,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","num":81,"id":{"name":"nalgebra","disambiguator":[13413609127648550774,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","num":82,"id":{"name":"simba","disambiguator":[5246184284164883713,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","num":83,"id":{"name":"wide","disambiguator":[6629867440009337672,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","num":84,"id":{"name":"safe_arch","disambiguator":[4313320000628576337,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","num":85,"id":{"name":"paste","disambiguator":[11498652375329378097,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","num":86,"id":{"name":"typenum","disambiguator":[9280503260711882713,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","num":87,"id":{"name":"matrixmultiply","disambiguator":[5600692098965159319,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","num":88,"id":{"name":"rawpointer","disambiguator":[13254074305892187495,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","num":89,"id":{"name":"rand","disambiguator":[8732410930065207302,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","num":90,"id":{"name":"rand_core","disambiguator":[1254329273019770659,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","num":91,"id":{"name":"getrandom","disambiguator":[1051522897861090644,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","num":92,"id":{"name":"rand_chacha","disambiguator":[9264139976838712767,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","num":93,"id":{"name":"ppv_lite86","disambiguator":[2933753580364552420,0]}},{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","num":94,"id":{"name":"rand_distr","disambiguator":[16331565591189967842,0]}}],"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":0,"byte_end":1562,"line_start":1,"line_end":66,"column_start":1,"column_end":16}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":407},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99175,"byte_end":99198,"line_start":7,"line_end":7,"column_start":24,"column_end":47},"alias_span":null,"name":"draw_cubic_bezier_curve","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":409},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99200,"byte_end":99227,"line_start":7,"line_end":7,"column_start":49,"column_end":76},"alias_span":null,"name":"draw_cubic_bezier_curve_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":444},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99266,"byte_end":99271,"line_start":10,"line_end":10,"column_start":24,"column_end":29},"alias_span":null,"name":"Blend","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":445},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99266,"byte_end":99271,"line_start":10,"line_end":10,"column_start":24,"column_end":29},"alias_span":null,"name":"Blend","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":431},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99273,"byte_end":99279,"line_start":10,"line_end":10,"column_start":31,"column_end":37},"alias_span":null,"name":"Canvas","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":505},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99323,"byte_end":99341,"line_start":14,"line_end":14,"column_start":5,"column_end":23},"alias_span":null,"name":"draw_filled_circle","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":503},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99343,"byte_end":99365,"line_start":14,"line_end":14,"column_start":25,"column_end":47},"alias_span":null,"name":"draw_filled_circle_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":492},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99367,"byte_end":99386,"line_start":14,"line_end":14,"column_start":49,"column_end":68},"alias_span":null,"name":"draw_filled_ellipse","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":494},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99388,"byte_end":99411,"line_start":14,"line_end":14,"column_start":70,"column_end":93},"alias_span":null,"name":"draw_filled_ellipse_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":499},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99417,"byte_end":99435,"line_start":15,"line_end":15,"column_start":5,"column_end":23},"alias_span":null,"name":"draw_hollow_circle","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":501},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99437,"byte_end":99459,"line_start":15,"line_end":15,"column_start":25,"column_end":47},"alias_span":null,"name":"draw_hollow_circle_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":487},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99461,"byte_end":99480,"line_start":15,"line_end":15,"column_start":49,"column_end":68},"alias_span":null,"name":"draw_hollow_ellipse","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":489},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99482,"byte_end":99505,"line_start":15,"line_end":15,"column_start":70,"column_end":93},"alias_span":null,"name":"draw_hollow_ellipse_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":549},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99544,"byte_end":99554,"line_start":19,"line_end":19,"column_start":23,"column_end":33},"alias_span":null,"name":"draw_cross","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":2301},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99556,"byte_end":99570,"line_start":19,"line_end":19,"column_start":35,"column_end":49},"alias_span":null,"name":"draw_cross_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":641},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99610,"byte_end":99639,"line_start":23,"line_end":23,"column_start":5,"column_end":34},"alias_span":null,"name":"draw_antialiased_line_segment","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":644},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99641,"byte_end":99674,"line_start":23,"line_end":23,"column_start":36,"column_end":69},"alias_span":null,"name":"draw_antialiased_line_segment_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":636},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99676,"byte_end":99693,"line_start":23,"line_end":23,"column_start":71,"column_end":88},"alias_span":null,"name":"draw_line_segment","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":638},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99699,"byte_end":99720,"line_start":24,"line_end":24,"column_start":5,"column_end":26},"alias_span":null,"name":"draw_line_segment_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":588},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99722,"byte_end":99739,"line_start":24,"line_end":24,"column_start":28,"column_end":45},"alias_span":null,"name":"BresenhamLineIter","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":605},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99741,"byte_end":99763,"line_start":24,"line_end":24,"column_start":47,"column_end":69},"alias_span":null,"name":"BresenhamLinePixelIter","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":620},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99765,"byte_end":99790,"line_start":24,"line_end":24,"column_start":71,"column_end":96},"alias_span":null,"name":"BresenhamLinePixelIterMut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":723},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99833,"byte_end":99845,"line_start":28,"line_end":28,"column_start":25,"column_end":37},"alias_span":null,"name":"draw_polygon","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":725},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99847,"byte_end":99863,"line_start":28,"line_end":28,"column_start":39,"column_end":55},"alias_span":null,"name":"draw_polygon_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":762},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99903,"byte_end":99919,"line_start":32,"line_end":32,"column_start":5,"column_end":21},"alias_span":null,"name":"draw_filled_rect","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":764},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99921,"byte_end":99941,"line_start":32,"line_end":32,"column_start":23,"column_end":43},"alias_span":null,"name":"draw_filled_rect_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":758},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99943,"byte_end":99959,"line_start":32,"line_end":32,"column_start":45,"column_end":61},"alias_span":null,"name":"draw_hollow_rect","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":760},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99961,"byte_end":99981,"line_start":32,"line_end":32,"column_start":63,"column_end":83},"alias_span":null,"name":"draw_hollow_rect_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":840},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":100018,"byte_end":100027,"line_start":36,"line_end":36,"column_start":22,"column_end":31},"alias_span":null,"name":"draw_text","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":835},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":100029,"byte_end":100042,"line_start":36,"line_end":36,"column_start":33,"column_end":46},"alias_span":null,"name":"draw_text_mut","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":833},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":100044,"byte_end":100053,"line_start":36,"line_end":36,"column_start":48,"column_end":57},"alias_span":null,"name":"text_size","value":"","parent":{"krate":0,"index":383}},{"kind":"Use","ref_id":{"krate":0,"index":914},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162194,"byte_end":162207,"line_start":4,"line_end":4,"column_start":23,"column_end":36},"alias_span":null,"name":"median_filter","value":"","parent":{"krate":0,"index":895}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162246,"byte_end":162247,"line_start":7,"line_end":7,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":895}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":0,"byte_end":1562,"line_start":1,"line_end":66,"column_start":1,"column_end":16},"name":"","qualname":"::","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":122},{"krate":0,"index":155},{"krate":0,"index":212},{"krate":0,"index":255},{"krate":0,"index":302},{"krate":0,"index":383},{"krate":0,"index":855},{"krate":0,"index":895},{"krate":0,"index":1091},{"krate":0,"index":1238},{"krate":0,"index":1293},{"krate":0,"index":1351},{"krate":0,"index":1411},{"krate":0,"index":1521},{"krate":0,"index":1562},{"krate":0,"index":1638},{"krate":0,"index":1657},{"krate":0,"index":1769},{"krate":0,"index":1780},{"krate":0,"index":1808},{"krate":0,"index":1856},{"krate":0,"index":1876},{"krate":0,"index":1930},{"krate":0,"index":1952},{"krate":0,"index":1978},{"krate":0,"index":2025},{"krate":0,"index":2074},{"krate":0,"index":2107},{"krate":0,"index":2141}],"decl_id":null,"docs":" An image processing library based on the\n [image] crate.","sig":null,"attributes":[{"value":"/ An image processing library based on the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":0,"byte_end":44,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/ [image] crate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":45,"byte_end":63,"line_start":2,"line_end":2,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":64,"byte_end":67,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Note that the image crate contains some image","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":68,"byte_end":117,"line_start":4,"line_end":4,"column_start":1,"column_end":50}},{"value":"/ processing functions (including image resizing) in its","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":118,"byte_end":176,"line_start":5,"line_end":5,"column_start":1,"column_end":59}},{"value":"/ `imageops` module, so check there if you cannot find","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":177,"byte_end":233,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ a standard image processing function in this crate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":234,"byte_end":289,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":290,"byte_end":293,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [image]: https://github.com/image-rs/image","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":294,"byte_end":340,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"deny(missing_docs)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":341,"byte_end":363,"line_start":10,"line_end":10,"column_start":1,"column_end":23}},{"value":"allow(clippy :: cast_lossless, clippy :: too_many_arguments, clippy ::\n        needless_range_loop, clippy :: useless_let_if_seq, clippy ::\n        match_wild_err_arm, clippy :: needless_doctest_main, clippy ::\n        range_plus_one, clippy :: trivially_copy_pass_by_ref, clippy ::\n        nonminimal_bool, clippy :: expect_fun_call, clippy ::\n        many_single_char_names)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":398,"byte_end":762,"line_start":12,"line_end":24,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":65},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":88},{"krate":0,"index":98},{"krate":0,"index":107},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":118}],"decl_id":null,"docs":" Utils for testing and debugging.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":854,"byte_end":866,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/ Utils for testing and debugging.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":1564,"byte_end":1600,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":11168,"byte_end":11186,"line_start":324,"line_end":324,"column_start":8,"column_end":26},"name":"pixel_diff_summary","qualname":"::utils::pixel_diff_summary","value":"pub fn pixel_diff_summary<I, J, P>(&I, &J) -> Option<String> where P: Pixel +\nPartialEq, P::Subpixel: fmt::Debug, I: GenericImage<Pixel = P>,\nJ: GenericImage<Pixel = P>","parent":null,"children":[],"decl_id":null,"docs":" Human readable description of some of the pixels that differ\n between left and right, or None if all pixels match.\n","sig":null,"attributes":[{"value":"/ Human readable description of some of the pixels that differ","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":11039,"byte_end":11103,"line_start":322,"line_end":322,"column_start":1,"column_end":65}},{"value":"/ between left and right, or None if all pixels match.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":11104,"byte_end":11160,"line_start":323,"line_end":323,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":11617,"byte_end":11647,"line_start":337,"line_end":337,"column_start":8,"column_end":38},"name":"significant_pixel_diff_summary","qualname":"::utils::significant_pixel_diff_summary","value":"pub fn significant_pixel_diff_summary<I, J, F, P>(&I, &J, F) -> Option<String>\nwhere P: Pixel, P::Subpixel: fmt::Debug, I: GenericImage<Pixel = P>,\nJ: GenericImage<Pixel = P>, F: Fn((u32, u32, I::Pixel), (u32, u32, J::Pixel))\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Human readable description of some of the pixels that differ\n signifcantly (according to provided function) between left\n and right, or None if all pixels match.\n","sig":null,"attributes":[{"value":"/ Human readable description of some of the pixels that differ","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":11438,"byte_end":11502,"line_start":334,"line_end":334,"column_start":1,"column_end":65}},{"value":"/ signifcantly (according to provided function) between left","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":11503,"byte_end":11565,"line_start":335,"line_end":335,"column_start":1,"column_end":63}},{"value":"/ and right, or None if all pixels match.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":11566,"byte_end":11609,"line_start":336,"line_end":336,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":14632,"byte_end":14643,"line_start":436,"line_end":436,"column_start":8,"column_end":19},"name":"pixel_diffs","qualname":"::utils::pixel_diffs","value":"pub fn pixel_diffs<I, J, F, P>(&I, &J, F) -> Vec<Diff<I::Pixel>> where\nP: Pixel, I: GenericImage<Pixel = P>, J: GenericImage<Pixel = P>,\nF: Fn((u32, u32, I::Pixel), (u32, u32, J::Pixel)) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Lists pixels that differ between left and right images.\n","sig":null,"attributes":[{"value":"/ Lists pixels that differ between left and right images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":14565,"byte_end":14624,"line_start":435,"line_end":435,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15673,"byte_end":15677,"line_start":470,"line_end":470,"column_start":12,"column_end":16},"name":"Diff","qualname":"::utils::Diff","value":"Diff { x, y, expected, actual }","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"decl_id":null,"docs":" A difference between two images\n","sig":null,"attributes":[{"value":"/ A difference between two images","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15626,"byte_end":15661,"line_start":469,"line_end":469,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":84},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15721,"byte_end":15722,"line_start":472,"line_end":472,"column_start":9,"column_end":10},"name":"x","qualname":"::utils::Diff::x","value":"u32","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" x-coordinate of diff.\n","sig":null,"attributes":[{"value":"/ x-coordinate of diff.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15687,"byte_end":15712,"line_start":471,"line_end":471,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":85},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15767,"byte_end":15768,"line_start":474,"line_end":474,"column_start":9,"column_end":10},"name":"y","qualname":"::utils::Diff::y","value":"u32","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" y-coordinate of diff.\n","sig":null,"attributes":[{"value":"/ y-coordinate of diff.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15733,"byte_end":15758,"line_start":473,"line_end":473,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":86},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15822,"byte_end":15830,"line_start":476,"line_end":476,"column_start":9,"column_end":17},"name":"expected","qualname":"::utils::Diff::expected","value":"P","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Pixel value in expected image.\n","sig":null,"attributes":[{"value":"/ Pixel value in expected image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15779,"byte_end":15813,"line_start":475,"line_end":475,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":87},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15880,"byte_end":15886,"line_start":478,"line_end":478,"column_start":9,"column_end":15},"name":"actual","qualname":"::utils::Diff::actual","value":"P","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Pixel value in actual image.\n","sig":null,"attributes":[{"value":"/ Pixel value in actual image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15839,"byte_end":15871,"line_start":477,"line_end":477,"column_start":5,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15985,"byte_end":16005,"line_start":482,"line_end":482,"column_start":8,"column_end":28},"name":"describe_pixel_diffs","qualname":"::utils::describe_pixel_diffs","value":"pub fn describe_pixel_diffs<I, J, P>(&I, &J, &[Diff<P>]) -> String where\nP: Pixel, P::Subpixel: fmt::Debug, I: GenericImage<Pixel = P>,\nJ: GenericImage<Pixel = P>","parent":null,"children":[],"decl_id":null,"docs":" Gives a summary description of a list of pixel diffs for use in error messages.\n","sig":null,"attributes":[{"value":"/ Gives a summary description of a list of pixel diffs for use in error messages.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":15894,"byte_end":15977,"line_start":481,"line_end":481,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":115},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":21388,"byte_end":21407,"line_start":653,"line_end":653,"column_start":8,"column_end":27},"name":"load_image_or_panic","qualname":"::utils::load_image_or_panic","value":"pub fn load_image_or_panic<P: AsRef<Path> + fmt::Debug>(P) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Loads image at given path, panicking on failure.\n","sig":null,"attributes":[{"value":"/ Loads image at given path, panicking on failure.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":21328,"byte_end":21380,"line_start":652,"line_end":652,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":117},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":21733,"byte_end":21749,"line_start":660,"line_end":660,"column_start":8,"column_end":24},"name":"gray_bench_image","qualname":"::utils::gray_bench_image","value":"pub fn gray_bench_image(u32, u32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Gray image to use in benchmarks. This is neither noise nor\n similar to natural images - it's just a convenience method\n to produce an image that's not constant.\n","sig":null,"attributes":[{"value":"/ Gray image to use in benchmarks. This is neither noise nor","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":21555,"byte_end":21617,"line_start":657,"line_end":657,"column_start":1,"column_end":63}},{"value":"/ similar to natural images - it's just a convenience method","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":21618,"byte_end":21680,"line_start":658,"line_end":658,"column_start":1,"column_end":63}},{"value":"/ to produce an image that's not constant.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":21681,"byte_end":21725,"line_start":659,"line_end":659,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":118},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":22122,"byte_end":22137,"line_start":672,"line_end":672,"column_start":8,"column_end":23},"name":"rgb_bench_image","qualname":"::utils::rgb_bench_image","value":"pub fn rgb_bench_image(u32, u32) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" RGB image to use in benchmarks. See comment on `gray_bench_image`.\n","sig":null,"attributes":[{"value":"/ RGB image to use in benchmarks. See comment on `gray_bench_image`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/utils.rs","byte_start":22044,"byte_end":22114,"line_start":671,"line_end":671,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":122},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"contours","qualname":"::contours","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":2158},{"krate":0,"index":2163},{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2174},{"krate":0,"index":2179},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":151},{"krate":0,"index":154}],"decl_id":null,"docs":" Functions for finding border contours within binary images.\n","sig":null,"attributes":[{"value":"/ Functions for finding border contours within binary images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":23814,"byte_end":23877,"line_start":1,"line_end":1,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2159},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24329,"byte_end":24334,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Outer","qualname":"::contours::BorderType::Outer","value":"BorderType::Outer","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" A border between a foreground region and the backround region enclosing it.\n All points in the border lie within the foreground region.\n","sig":null,"attributes":[{"value":"/ A border between a foreground region and the backround region enclosing it.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24178,"byte_end":24257,"line_start":11,"line_end":11,"column_start":5,"column_end":84}},{"value":"/ All points in the border lie within the foreground region.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24262,"byte_end":24324,"line_start":12,"line_end":12,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2161},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24497,"byte_end":24501,"line_start":16,"line_end":16,"column_start":5,"column_end":9},"name":"Hole","qualname":"::contours::BorderType::Hole","value":"BorderType::Hole","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" A border between a foreground region and a background region contained within it.\n All points in the border lie within the foreground region.\n","sig":null,"attributes":[{"value":"/ A border between a foreground region and a background region contained within it.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24340,"byte_end":24425,"line_start":14,"line_end":14,"column_start":5,"column_end":90}},{"value":"/ All points in the border lie within the foreground region.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24430,"byte_end":24492,"line_start":15,"line_end":15,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":2158},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24161,"byte_end":24171,"line_start":10,"line_end":10,"column_start":10,"column_end":20},"name":"BorderType","qualname":"::contours::BorderType","value":"pub enum BorderType { Outer, Hole, }","parent":null,"children":[{"krate":0,"index":2159},{"krate":0,"index":2161}],"decl_id":null,"docs":" Whether a border of a foreground region borders an enclosing background region or a contained background region.\n","sig":null,"attributes":[{"value":"/ Whether a border of a foreground region borders an enclosing background region or a contained background region.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":23990,"byte_end":24106,"line_start":8,"line_end":8,"column_start":1,"column_end":117}}]},{"kind":"Struct","id":{"krate":0,"index":2174},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24584,"byte_end":24591,"line_start":21,"line_end":21,"column_start":12,"column_end":19},"name":"Contour","qualname":"::contours::Contour","value":"Contour { points, border_type, parent }","parent":null,"children":[{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178}],"decl_id":null,"docs":" A border of an 8-connected foreground region.\n","sig":null,"attributes":[{"value":"/ A border of an 8-connected foreground region.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24506,"byte_end":24555,"line_start":19,"line_end":19,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2176},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24639,"byte_end":24645,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"name":"points","qualname":"::contours::Contour::points","value":"std::vec::Vec<point::Point<T>>","parent":{"krate":0,"index":2174},"children":[],"decl_id":null,"docs":" The points in the border.\n","sig":null,"attributes":[{"value":"/ The points in the border.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24601,"byte_end":24630,"line_start":22,"line_end":22,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":2177},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24728,"byte_end":24739,"line_start":25,"line_end":25,"column_start":9,"column_end":20},"name":"border_type","qualname":"::contours::Contour::border_type","value":"contours::BorderType","parent":{"krate":0,"index":2174},"children":[],"decl_id":null,"docs":" Whether this is an outer border or a hole border.\n","sig":null,"attributes":[{"value":"/ Whether this is an outer border or a hole border.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24666,"byte_end":24719,"line_start":24,"line_end":24,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2178},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24962,"byte_end":24968,"line_start":28,"line_end":28,"column_start":9,"column_end":15},"name":"parent","qualname":"::contours::Contour::parent","value":"std::option::Option<usize>","parent":{"krate":0,"index":2174},"children":[],"decl_id":null,"docs":" Calls to `find_contours` and `find_contours_with_threshold` return a `Vec` of all borders\n in an image. This field provides the index for the parent of the current border in that `Vec`.\n","sig":null,"attributes":[{"value":"/ Calls to `find_contours` and `find_contours_with_threshold` return a `Vec` of all borders","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24757,"byte_end":24850,"line_start":26,"line_end":26,"column_start":5,"column_end":98}},{"value":"/ in an image. This field provides the index for the parent of the current border in that `Vec`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24855,"byte_end":24953,"line_start":27,"line_end":27,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25049,"byte_end":25052,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Contour<T>>::new","value":"pub fn new(Vec<Point<T>>, BorderType, Option<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a contour.\n","sig":null,"attributes":[{"value":"/ Construct a contour.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25013,"byte_end":25037,"line_start":32,"line_end":32,"column_start":5,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":145},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25511,"byte_end":25524,"line_start":47,"line_end":47,"column_start":8,"column_end":21},"name":"find_contours","qualname":"::contours::find_contours","value":"pub fn find_contours<T>(&GrayImage) -> Vec<Contour<T>> where T: Num +\nNumCast + Copy + PartialEq + Eq","parent":null,"children":[],"decl_id":null,"docs":" Finds all borders of foreground regions in an image. All non-zero pixels are\n treated as belonging to the foreground.","sig":null,"attributes":[{"value":"/ Finds all borders of foreground regions in an image. All non-zero pixels are","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25236,"byte_end":25316,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ treated as belonging to the foreground.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25317,"byte_end":25360,"line_start":43,"line_end":43,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25361,"byte_end":25364,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Based on the algorithm proposed by Suzuki and Abe: Topological Structural","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25365,"byte_end":25442,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ Analysis of Digitized Binary Images by Border Following.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25443,"byte_end":25503,"line_start":46,"line_end":46,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":147},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25981,"byte_end":26009,"line_start":59,"line_end":59,"column_start":8,"column_end":36},"name":"find_contours_with_threshold","qualname":"::contours::find_contours_with_threshold","value":"pub fn find_contours_with_threshold<T>(&GrayImage, u8) -> Vec<Contour<T>>\nwhere T: Num + NumCast + Copy + PartialEq + Eq","parent":null,"children":[],"decl_id":null,"docs":" Finds all borders of foreground regions in an image. All pixels with intensity strictly greater\n than `threshold` are treated as belonging to the foreground.","sig":null,"attributes":[{"value":"/ Finds all borders of foreground regions in an image. All pixels with intensity strictly greater","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25666,"byte_end":25765,"line_start":54,"line_end":54,"column_start":1,"column_end":100}},{"value":"/ than `threshold` are treated as belonging to the foreground.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25766,"byte_end":25830,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25831,"byte_end":25834,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Based on the algorithm proposed by Suzuki and Abe: Topological Structural","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25835,"byte_end":25912,"line_start":57,"line_end":57,"column_start":1,"column_end":78}},{"value":"/ Analysis of Digitized Binary Images by Border Following.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":25913,"byte_end":25973,"line_start":58,"line_end":58,"column_start":1,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":155},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"contrast","qualname":"::contrast","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":210},{"krate":0,"index":211}],"decl_id":null,"docs":" Functions for manipulating the contrast of images.\n","sig":null,"attributes":[{"value":"/ Functions for manipulating the contrast of images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":39172,"byte_end":39226,"line_start":1,"line_end":1,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":39849,"byte_end":39867,"line_start":16,"line_end":16,"column_start":8,"column_end":26},"name":"adaptive_threshold","qualname":"::contrast::adaptive_threshold","value":"pub fn adaptive_threshold(&GrayImage, u32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Applies an adaptive threshold to an image.","sig":null,"attributes":[{"value":"/ Applies an adaptive threshold to an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":39509,"byte_end":39555,"line_start":11,"line_end":11,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":39556,"byte_end":39559,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This algorithm compares each pixel's brightness with the average brightness of the pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":39560,"byte_end":39653,"line_start":13,"line_end":13,"column_start":1,"column_end":94}},{"value":"/ in the (2 * `block_radius` + 1) square block centered on it. If the pixel is at least as bright","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":39654,"byte_end":39753,"line_start":14,"line_end":14,"column_start":1,"column_end":100}},{"value":"/ as the threshold then it will have a value of 255 in the output image, otherwise 0.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":39754,"byte_end":39841,"line_start":15,"line_end":15,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":196},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":41174,"byte_end":41184,"line_start":49,"line_end":49,"column_start":8,"column_end":18},"name":"otsu_level","qualname":"::contrast::otsu_level","value":"pub fn otsu_level(&GrayImage) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the [Otsu threshold level] of an 8bpp image.","sig":null,"attributes":[{"value":"/ Returns the [Otsu threshold level] of an 8bpp image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":41032,"byte_end":41088,"line_start":46,"line_end":46,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":41089,"byte_end":41092,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ [Otsu threshold level]: https://en.wikipedia.org/wiki/Otsu%27s_method","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":41093,"byte_end":41166,"line_start":48,"line_end":48,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":198},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43547,"byte_end":43556,"line_start":125,"line_end":125,"column_start":8,"column_end":17},"name":"threshold","qualname":"::contrast::threshold","value":"pub fn threshold(&GrayImage, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a binarized image from an input 8bpp grayscale image\n obtained by applying the given threshold. Pixels with intensity\n equal to the threshold are assigned to the background.","sig":null,"attributes":[{"value":"/ Returns a binarized image from an input 8bpp grayscale image","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":42953,"byte_end":43017,"line_start":102,"line_end":102,"column_start":1,"column_end":65}},{"value":"/ obtained by applying the given threshold. Pixels with intensity","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43018,"byte_end":43085,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"/ equal to the threshold are assigned to the background.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43086,"byte_end":43144,"line_start":104,"line_end":104,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43145,"byte_end":43148,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43149,"byte_end":43163,"line_start":106,"line_end":106,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43164,"byte_end":43171,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43172,"byte_end":43197,"line_start":108,"line_end":108,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43198,"byte_end":43216,"line_start":109,"line_end":109,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43217,"byte_end":43246,"line_start":110,"line_end":110,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43247,"byte_end":43264,"line_start":111,"line_end":111,"column_start":1,"column_end":18}},{"value":"/ use imageproc::contrast::threshold;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43265,"byte_end":43304,"line_start":112,"line_end":112,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43305,"byte_end":43308,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43309,"byte_end":43337,"line_start":114,"line_end":114,"column_start":1,"column_end":29}},{"value":"/     10, 80, 20;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43338,"byte_end":43357,"line_start":115,"line_end":115,"column_start":1,"column_end":20}},{"value":"/     50, 90, 70);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43358,"byte_end":43378,"line_start":116,"line_end":116,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43379,"byte_end":43382,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ let thresholded = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43383,"byte_end":43417,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"/     0, 255,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43418,"byte_end":43438,"line_start":119,"line_end":119,"column_start":1,"column_end":21}},{"value":"/     0, 255, 255);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43439,"byte_end":43460,"line_start":120,"line_end":120,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43461,"byte_end":43464,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(threshold(&image, 50), thresholded);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43465,"byte_end":43523,"line_start":122,"line_end":122,"column_start":1,"column_end":59}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43524,"byte_end":43531,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43532,"byte_end":43539,"line_start":124,"line_end":124,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":199},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44296,"byte_end":44309,"line_start":156,"line_end":156,"column_start":8,"column_end":21},"name":"threshold_mut","qualname":"::contrast::threshold_mut","value":"pub fn threshold_mut(&mut GrayImage, u8)","parent":null,"children":[],"decl_id":null,"docs":" Mutates given image to form a binarized version produced by applying\n the given threshold. Pixels with intensity\n equal to the threshold are assigned to the background.","sig":null,"attributes":[{"value":"/ Mutates given image to form a binarized version produced by applying","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43684,"byte_end":43756,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ the given threshold. Pixels with intensity","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43757,"byte_end":43803,"line_start":132,"line_end":132,"column_start":1,"column_end":47}},{"value":"/ equal to the threshold are assigned to the background.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43804,"byte_end":43862,"line_start":133,"line_end":133,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43863,"byte_end":43866,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43867,"byte_end":43881,"line_start":135,"line_end":135,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43882,"byte_end":43889,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43890,"byte_end":43915,"line_start":137,"line_end":137,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43916,"byte_end":43934,"line_start":138,"line_end":138,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43935,"byte_end":43964,"line_start":139,"line_end":139,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43965,"byte_end":43982,"line_start":140,"line_end":140,"column_start":1,"column_end":18}},{"value":"/ use imageproc::contrast::threshold_mut;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":43983,"byte_end":44026,"line_start":141,"line_end":141,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44027,"byte_end":44030,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ let mut image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44031,"byte_end":44063,"line_start":143,"line_end":143,"column_start":1,"column_end":33}},{"value":"/     10, 80, 20;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44064,"byte_end":44083,"line_start":144,"line_end":144,"column_start":1,"column_end":20}},{"value":"/     50, 90, 70);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44084,"byte_end":44104,"line_start":145,"line_end":145,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44105,"byte_end":44108,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ let thresholded = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44109,"byte_end":44143,"line_start":147,"line_end":147,"column_start":1,"column_end":35}},{"value":"/     0, 255,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44144,"byte_end":44164,"line_start":148,"line_end":148,"column_start":1,"column_end":21}},{"value":"/     0, 255, 255);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44165,"byte_end":44186,"line_start":149,"line_end":149,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44187,"byte_end":44190,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ threshold_mut(&mut image, 50);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44191,"byte_end":44225,"line_start":151,"line_end":151,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44226,"byte_end":44229,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(image, thresholded);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44230,"byte_end":44272,"line_start":153,"line_end":153,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44273,"byte_end":44280,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44281,"byte_end":44288,"line_start":155,"line_end":155,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44614,"byte_end":44636,"line_start":164,"line_end":164,"column_start":8,"column_end":30},"name":"equalize_histogram_mut","qualname":"::contrast::equalize_histogram_mut","value":"pub fn equalize_histogram_mut(&mut GrayImage)","parent":null,"children":[],"decl_id":null,"docs":" Equalises the histogram of an 8bpp grayscale image in place. See also\n [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).\n","sig":null,"attributes":[{"value":"/ Equalises the histogram of an 8bpp grayscale image in place. See also","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44437,"byte_end":44510,"line_start":162,"line_end":162,"column_start":1,"column_end":74}},{"value":"/ [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":44511,"byte_end":44606,"line_start":163,"line_end":163,"column_start":1,"column_end":96}}]},{"kind":"Function","id":{"krate":0,"index":202},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":45556,"byte_end":45574,"line_start":187,"line_end":187,"column_start":8,"column_end":26},"name":"equalize_histogram","qualname":"::contrast::equalize_histogram","value":"pub fn equalize_histogram(&GrayImage) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Equalises the histogram of an 8bpp grayscale image. See also\n [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).\n","sig":null,"attributes":[{"value":"/ Equalises the histogram of an 8bpp grayscale image. See also","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":45388,"byte_end":45452,"line_start":185,"line_end":185,"column_start":1,"column_end":65}},{"value":"/ [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":45453,"byte_end":45548,"line_start":186,"line_end":186,"column_start":1,"column_end":96}}]},{"kind":"Function","id":{"krate":0,"index":203},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":45834,"byte_end":45853,"line_start":195,"line_end":195,"column_start":8,"column_end":27},"name":"match_histogram_mut","qualname":"::contrast::match_histogram_mut","value":"pub fn match_histogram_mut(&mut GrayImage, &GrayImage)","parent":null,"children":[],"decl_id":null,"docs":" Adjusts contrast of an 8bpp grayscale image in place so that its\n histogram is as close as possible to that of the target image.\n","sig":null,"attributes":[{"value":"/ Adjusts contrast of an 8bpp grayscale image in place so that its","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":45691,"byte_end":45759,"line_start":193,"line_end":193,"column_start":1,"column_end":69}},{"value":"/ histogram is as close as possible to that of the target image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":45760,"byte_end":45826,"line_start":194,"line_end":194,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":204},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":46298,"byte_end":46313,"line_start":207,"line_end":207,"column_start":8,"column_end":23},"name":"match_histogram","qualname":"::contrast::match_histogram","value":"pub fn match_histogram(&GrayImage, &GrayImage) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Adjusts contrast of an 8bpp grayscale image so that its\n histogram is as close as possible to that of the target image.\n","sig":null,"attributes":[{"value":"/ Adjusts contrast of an 8bpp grayscale image so that its","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":46164,"byte_end":46223,"line_start":205,"line_end":205,"column_start":1,"column_end":60}},{"value":"/ histogram is as close as possible to that of the target image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":46224,"byte_end":46290,"line_start":206,"line_end":206,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":210},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48623,"byte_end":48639,"line_start":281,"line_end":281,"column_start":8,"column_end":24},"name":"stretch_contrast","qualname":"::contrast::stretch_contrast","value":"pub fn stretch_contrast(&GrayImage, u8, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Linearly stretches the contrast in an image, sending `lower` to `0u8` and `upper` to `2558u8`.","sig":null,"attributes":[{"value":"/ Linearly stretches the contrast in an image, sending `lower` to `0u8` and `upper` to `2558u8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47643,"byte_end":47741,"line_start":249,"line_end":249,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47742,"byte_end":47745,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ Is it common to choose `upper` and `lower` values using image percentiles - see [`percentile`](../stats/fn.percentile.html).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47746,"byte_end":47874,"line_start":251,"line_end":251,"column_start":1,"column_end":129}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47875,"byte_end":47878,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47879,"byte_end":47893,"line_start":253,"line_end":253,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47894,"byte_end":47901,"line_start":254,"line_end":254,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47902,"byte_end":47927,"line_start":255,"line_end":255,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47928,"byte_end":47946,"line_start":256,"line_end":256,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47947,"byte_end":47976,"line_start":257,"line_end":257,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47977,"byte_end":47994,"line_start":258,"line_end":258,"column_start":1,"column_end":18}},{"value":"/ use imageproc::contrast::stretch_contrast;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":47995,"byte_end":48041,"line_start":259,"line_end":259,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48042,"byte_end":48045,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48046,"byte_end":48074,"line_start":261,"line_end":261,"column_start":1,"column_end":29}},{"value":"/      0,   20,  50;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48075,"byte_end":48097,"line_start":262,"line_end":262,"column_start":1,"column_end":23}},{"value":"/     80,  100, 255);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48098,"byte_end":48121,"line_start":263,"line_end":263,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48122,"byte_end":48125,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ let lower = 20;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48126,"byte_end":48145,"line_start":265,"line_end":265,"column_start":1,"column_end":20}},{"value":"/ let upper = 100;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48146,"byte_end":48166,"line_start":266,"line_end":266,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48167,"byte_end":48170,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ // Pixel intensities between 20 and 100 are linearly","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48171,"byte_end":48227,"line_start":268,"line_end":268,"column_start":1,"column_end":57}},{"value":"/ // scaled so that 20 is mapped to 0 and 100 is mapped to 255.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48228,"byte_end":48293,"line_start":269,"line_end":269,"column_start":1,"column_end":66}},{"value":"/ // Pixel intensities less than 20 are sent to 0 and pixel","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48294,"byte_end":48355,"line_start":270,"line_end":270,"column_start":1,"column_end":62}},{"value":"/ // intensities greater than 100 are sent to 255.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48356,"byte_end":48408,"line_start":271,"line_end":271,"column_start":1,"column_end":53}},{"value":"/ let stretched = stretch_contrast(&image, lower, upper);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48409,"byte_end":48468,"line_start":272,"line_end":272,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48469,"byte_end":48472,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48473,"byte_end":48504,"line_start":274,"line_end":274,"column_start":1,"column_end":32}},{"value":"/       0,   0,  95;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48505,"byte_end":48527,"line_start":275,"line_end":275,"column_start":1,"column_end":23}},{"value":"/     191, 255, 255);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48528,"byte_end":48551,"line_start":276,"line_end":276,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48552,"byte_end":48555,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(stretched, expected);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48556,"byte_end":48599,"line_start":278,"line_end":278,"column_start":1,"column_end":44}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48600,"byte_end":48607,"line_start":279,"line_end":279,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48608,"byte_end":48615,"line_start":280,"line_end":280,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":211},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48992,"byte_end":49012,"line_start":290,"line_end":290,"column_start":8,"column_end":28},"name":"stretch_contrast_mut","qualname":"::contrast::stretch_contrast_mut","value":"pub fn stretch_contrast_mut(&mut GrayImage, u8, u8)","parent":null,"children":[],"decl_id":null,"docs":" Linearly stretches the contrast in an image in place, sending `lower` to `0u8` and `upper` to `2558u8`.","sig":null,"attributes":[{"value":"/ Linearly stretches the contrast in an image in place, sending `lower` to `0u8` and `upper` to `2558u8`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48790,"byte_end":48897,"line_start":287,"line_end":287,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48898,"byte_end":48901,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ See the [`stretch_contrast`](fn.stretch_contrast.html) documentation for more.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contrast.rs","byte_start":48902,"byte_end":48984,"line_start":289,"line_end":289,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":212},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"corners","qualname":"::corners","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":2182},{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2189},{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252}],"decl_id":null,"docs":" Functions for detecting corners, also known as interest points.\n","sig":null,"attributes":[{"value":"/ Functions for detecting corners, also known as interest points.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57250,"byte_end":57317,"line_start":1,"line_end":1,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2182},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57583,"byte_end":57589,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Corner","qualname":"::corners::Corner","value":"Corner { x, y, score }","parent":null,"children":[{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185}],"decl_id":null,"docs":" A location and score for a detected corner.\n The scores need not be comparable between different\n corner detectors.\n","sig":null,"attributes":[{"value":"/ A location and score for a detected corner.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57405,"byte_end":57452,"line_start":6,"line_end":6,"column_start":1,"column_end":48}},{"value":"/ The scores need not be comparable between different","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57453,"byte_end":57508,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/ corner detectors.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57509,"byte_end":57530,"line_start":8,"line_end":8,"column_start":1,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":2183},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57636,"byte_end":57637,"line_start":12,"line_end":12,"column_start":9,"column_end":10},"name":"x","qualname":"::corners::Corner::x","value":"u32","parent":{"krate":0,"index":2182},"children":[],"decl_id":null,"docs":" x-coordinate of the corner.\n","sig":null,"attributes":[{"value":"/ x-coordinate of the corner.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57596,"byte_end":57627,"line_start":11,"line_end":11,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2184},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57688,"byte_end":57689,"line_start":14,"line_end":14,"column_start":9,"column_end":10},"name":"y","qualname":"::corners::Corner::y","value":"u32","parent":{"krate":0,"index":2182},"children":[],"decl_id":null,"docs":" y-coordinate of the corner.\n","sig":null,"attributes":[{"value":"/ y-coordinate of the corner.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57648,"byte_end":57679,"line_start":13,"line_end":13,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2185},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57742,"byte_end":57747,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"score","qualname":"::corners::Corner::score","value":"f32","parent":{"krate":0,"index":2182},"children":[],"decl_id":null,"docs":" Score of the detected corner.\n","sig":null,"attributes":[{"value":"/ Score of the detected corner.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57700,"byte_end":57733,"line_start":15,"line_end":15,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57838,"byte_end":57841,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<Corner>::new","value":"pub fn new(u32, u32, f32) -> Corner","parent":null,"children":[],"decl_id":null,"docs":" A corner at location (x, y) with score `score`.\n","sig":null,"attributes":[{"value":"/ A corner at location (x, y) with score `score`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57775,"byte_end":57826,"line_start":20,"line_end":20,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":235},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58883,"byte_end":58887,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"Nine","qualname":"::corners::Fast::Nine","value":"Fast::Nine","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Corners require a section of length as least nine.\n","sig":null,"attributes":[{"value":"/ Corners require a section of length as least nine.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58824,"byte_end":58878,"line_start":53,"line_end":53,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":237},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58954,"byte_end":58960,"line_start":56,"line_end":56,"column_start":5,"column_end":11},"name":"Twelve","qualname":"::corners::Fast::Twelve","value":"Fast::Twelve","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Corners require a section of length as least twelve.\n","sig":null,"attributes":[{"value":"/ Corners require a section of length as least twelve.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58893,"byte_end":58949,"line_start":55,"line_end":55,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":234},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58813,"byte_end":58817,"line_start":52,"line_end":52,"column_start":10,"column_end":14},"name":"Fast","qualname":"::corners::Fast","value":"pub enum Fast { Nine, Twelve, }","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":237}],"decl_id":null,"docs":" Variants of the [FAST](https://en.wikipedia.org/wiki/Features_from_accelerated_segment_test)\n corner detector. These classify a point based on its intensity relative to the 16 pixels\n in the Bresenham circle of radius 3 around it. A point P with intensity I is detected as a\n corner if all pixels in a sufficiently long contiguous section of this circle either\n all have intensity greater than I + t or all have intensity less than\n I - t, for some user-provided threshold t. The score of a corner is\n the greatest threshold for which the given pixel still qualifies as\n a corner.\n","sig":null,"attributes":[{"value":"/ Variants of the [FAST](https://en.wikipedia.org/wiki/Features_from_accelerated_segment_test)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58198,"byte_end":58294,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/ corner detector. These classify a point based on its intensity relative to the 16 pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58295,"byte_end":58387,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/ in the Bresenham circle of radius 3 around it. A point P with intensity I is detected as a","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58388,"byte_end":58482,"line_start":46,"line_end":46,"column_start":1,"column_end":95}},{"value":"/ corner if all pixels in a sufficiently long contiguous section of this circle either","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58483,"byte_end":58571,"line_start":47,"line_end":47,"column_start":1,"column_end":89}},{"value":"/ all have intensity greater than I + t or all have intensity less than","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58572,"byte_end":58645,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ I - t, for some user-provided threshold t. The score of a corner is","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58646,"byte_end":58717,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/ the greatest threshold for which the given pixel still qualifies as","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58718,"byte_end":58789,"line_start":50,"line_end":50,"column_start":1,"column_end":72}},{"value":"/ a corner.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58790,"byte_end":58803,"line_start":51,"line_end":51,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":239},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":59037,"byte_end":59051,"line_start":60,"line_end":60,"column_start":8,"column_end":22},"name":"corners_fast12","qualname":"::corners::corners_fast12","value":"pub fn corners_fast12(&GrayImage, u8) -> Vec<Corner>","parent":null,"children":[],"decl_id":null,"docs":" Finds corners using FAST-12 features. See comment on `Fast`.\n","sig":null,"attributes":[{"value":"/ Finds corners using FAST-12 features. See comment on `Fast`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58965,"byte_end":59029,"line_start":59,"line_end":59,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":59559,"byte_end":59572,"line_start":77,"line_end":77,"column_start":8,"column_end":21},"name":"corners_fast9","qualname":"::corners::corners_fast9","value":"pub fn corners_fast9(&GrayImage, u8) -> Vec<Corner>","parent":null,"children":[],"decl_id":null,"docs":" Finds corners using FAST-9 features. See comment on Fast enum.\n","sig":null,"attributes":[{"value":"/ Finds corners using FAST-9 features. See comment on Fast enum.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":59485,"byte_end":59551,"line_start":76,"line_end":76,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":60432,"byte_end":60449,"line_start":100,"line_end":100,"column_start":8,"column_end":25},"name":"fast_corner_score","qualname":"::corners::fast_corner_score","value":"pub fn fast_corner_score(&GrayImage, u8, u32, u32, Fast) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The score of a corner detected using the FAST\n detector is the largest threshold for which this\n pixel is still a corner. We input the threshold at which\n the corner was detected as a lower bound on the search.\n Note that the corner check uses a strict inequality, so if\n the smallest intensity difference between the center pixel\n and a corner pixel is n then the corner will have a score of n - 1.\n","sig":null,"attributes":[{"value":"/ The score of a corner detected using the FAST","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":60003,"byte_end":60052,"line_start":93,"line_end":93,"column_start":1,"column_end":50}},{"value":"/ detector is the largest threshold for which this","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":60053,"byte_end":60105,"line_start":94,"line_end":94,"column_start":1,"column_end":53}},{"value":"/ pixel is still a corner. We input the threshold at which","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":60106,"byte_end":60166,"line_start":95,"line_end":95,"column_start":1,"column_end":61}},{"value":"/ the corner was detected as a lower bound on the search.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":60167,"byte_end":60226,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/ Note that the corner check uses a strict inequality, so if","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":60227,"byte_end":60289,"line_start":97,"line_end":97,"column_start":1,"column_end":63}},{"value":"/ the smallest intensity difference between the center pixel","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":60290,"byte_end":60352,"line_start":98,"line_end":98,"column_start":1,"column_end":63}},{"value":"/ and a corner pixel is n then the corner will have a score of n - 1.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":60353,"byte_end":60424,"line_start":99,"line_end":99,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":255},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"definitions","qualname":"::definitions","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":2195},{"krate":0,"index":2197},{"krate":0,"index":2199},{"krate":0,"index":2201},{"krate":0,"index":2203},{"krate":0,"index":2205},{"krate":0,"index":2207},{"krate":0,"index":2209},{"krate":0,"index":2211},{"krate":0,"index":2214},{"krate":0,"index":2217},{"krate":0,"index":2220},{"krate":0,"index":2223},{"krate":0,"index":2225},{"krate":0,"index":2227},{"krate":0,"index":2229},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":2231},{"krate":0,"index":2233},{"krate":0,"index":2235},{"krate":0,"index":2237},{"krate":0,"index":2239},{"krate":0,"index":2241},{"krate":0,"index":2243},{"krate":0,"index":2245},{"krate":0,"index":2247},{"krate":0,"index":2249},{"krate":0,"index":2251},{"krate":0,"index":2253},{"krate":0,"index":2255},{"krate":0,"index":2257},{"krate":0,"index":2259},{"krate":0,"index":2261},{"krate":0,"index":2263},{"krate":0,"index":2265},{"krate":0,"index":2267},{"krate":0,"index":2269}],"decl_id":null,"docs":" Trait definitions and type aliases.\n","sig":null,"attributes":[{"value":"/ Trait definitions and type aliases.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":74568,"byte_end":74607,"line_start":1,"line_end":1,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":285},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75234,"byte_end":75239,"line_start":13,"line_end":13,"column_start":10,"column_end":15},"name":"Image","qualname":"::definitions::Image","value":"ImageBuffer<P, Vec<<P as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" An `ImageBuffer` containing Pixels of type P with storage `Vec<P::Subpixel>`.\n Most operations in this library only support inputs of type `Image`, rather\n than arbitrary `image::GenericImage`s. This is obviously less flexible, but\n has the advantage of allowing many functions to be more performant. We may want\n to add more flexibility later, but this should not be at the expense of performance.\n When specialisation lands we should be able to do this by defining traits for images\n with contiguous storage.\n","sig":null,"attributes":[{"value":"/ An `ImageBuffer` containing Pixels of type P with storage `Vec<P::Subpixel>`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":74692,"byte_end":74773,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"/ Most operations in this library only support inputs of type `Image`, rather","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":74774,"byte_end":74853,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ than arbitrary `image::GenericImage`s. This is obviously less flexible, but","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":74854,"byte_end":74933,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ has the advantage of allowing many functions to be more performant. We may want","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":74934,"byte_end":75017,"line_start":9,"line_end":9,"column_start":1,"column_end":84}},{"value":"/ to add more flexibility later, but this should not be at the expense of performance.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75018,"byte_end":75106,"line_start":10,"line_end":10,"column_start":1,"column_end":89}},{"value":"/ When specialisation lands we should be able to do this by defining traits for images","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75107,"byte_end":75195,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ with contiguous storage.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75196,"byte_end":75224,"line_start":12,"line_end":12,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":287},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75344,"byte_end":75352,"line_start":16,"line_end":16,"column_start":11,"column_end":19},"name":"HasBlack","qualname":"::definitions::HasBlack","value":"HasBlack","parent":null,"children":[{"krate":0,"index":288}],"decl_id":null,"docs":" Pixels which have a named Black value.\n","sig":null,"attributes":[{"value":"/ Pixels which have a named Black value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75291,"byte_end":75333,"line_start":15,"line_end":15,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75406,"byte_end":75411,"line_start":18,"line_end":18,"column_start":8,"column_end":13},"name":"black","qualname":"::definitions::HasBlack::black","value":"pub fn black() -> Self","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Returns a black pixel of this type.\n","sig":null,"attributes":[{"value":"/ Returns a black pixel of this type.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75359,"byte_end":75398,"line_start":17,"line_end":17,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":289},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75479,"byte_end":75487,"line_start":22,"line_end":22,"column_start":11,"column_end":19},"name":"HasWhite","qualname":"::definitions::HasWhite","value":"HasWhite","parent":null,"children":[{"krate":0,"index":290}],"decl_id":null,"docs":" Pixels which have a named White value.\n","sig":null,"attributes":[{"value":"/ Pixels which have a named White value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75426,"byte_end":75468,"line_start":21,"line_end":21,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75541,"byte_end":75546,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"white","qualname":"::definitions::HasWhite::white","value":"pub fn white() -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Returns a white pixel of this type.\n","sig":null,"attributes":[{"value":"/ Returns a white pixel of this type.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":75494,"byte_end":75533,"line_start":23,"line_end":23,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":292},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76651,"byte_end":76659,"line_start":69,"line_end":69,"column_start":11,"column_end":19},"name":"Position","qualname":"::definitions::Position","value":"Position","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294}],"decl_id":null,"docs":" Something with a 2d position.\n","sig":null,"attributes":[{"value":"/ Something with a 2d position.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76607,"byte_end":76640,"line_start":68,"line_end":68,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76691,"byte_end":76692,"line_start":71,"line_end":71,"column_start":8,"column_end":9},"name":"x","qualname":"::definitions::Position::x","value":"pub fn x(&Self) -> u32","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" x-coordinate.\n","sig":null,"attributes":[{"value":"/ x-coordinate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76666,"byte_end":76683,"line_start":70,"line_end":70,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76737,"byte_end":76738,"line_start":73,"line_end":73,"column_start":8,"column_end":9},"name":"y","qualname":"::definitions::Position::y","value":"pub fn y(&Self) -> u32","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" y-coordinate.\n","sig":null,"attributes":[{"value":"/ y-coordinate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76712,"byte_end":76729,"line_start":72,"line_end":72,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":295},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76795,"byte_end":76800,"line_start":77,"line_end":77,"column_start":11,"column_end":16},"name":"Score","qualname":"::definitions::Score","value":"Score","parent":null,"children":[{"krate":0,"index":296}],"decl_id":null,"docs":" Something with a score.\n","sig":null,"attributes":[{"value":"/ Something with a score.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76757,"byte_end":76784,"line_start":76,"line_end":76,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76838,"byte_end":76843,"line_start":79,"line_end":79,"column_start":8,"column_end":13},"name":"score","qualname":"::definitions::Score::score","value":"pub fn score(&Self) -> f32","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" Score of this item.\n","sig":null,"attributes":[{"value":"/ Score of this item.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76807,"byte_end":76830,"line_start":78,"line_end":78,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":297},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76990,"byte_end":76995,"line_start":84,"line_end":84,"column_start":11,"column_end":16},"name":"Clamp","qualname":"::definitions::Clamp","value":"Clamp<T>","parent":null,"children":[{"krate":0,"index":299}],"decl_id":null,"docs":" A type to which we can clamp a value of type T.\n Implementations are not required to handle `NaN`s gracefully.\n","sig":null,"attributes":[{"value":"/ A type to which we can clamp a value of type T.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76862,"byte_end":76913,"line_start":82,"line_end":82,"column_start":1,"column_end":52}},{"value":"/ Implementations are not required to handle `NaN`s gracefully.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":76914,"byte_end":76979,"line_start":83,"line_end":83,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":77058,"byte_end":77063,"line_start":86,"line_end":86,"column_start":8,"column_end":13},"name":"clamp","qualname":"::definitions::Clamp::clamp","value":"pub fn clamp(T) -> Self","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Clamp `x` to a valid value for this type.\n","sig":null,"attributes":[{"value":"/ Clamp `x` to a valid value for this type.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/definitions.rs","byte_start":77005,"byte_end":77050,"line_start":85,"line_end":85,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":302},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distance_transform","qualname":"::distance_transform","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":2271},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2279},{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":2287},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2299},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":352},{"krate":0,"index":356},{"krate":0,"index":360},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":374},{"krate":0,"index":378},{"krate":0,"index":381}],"decl_id":null,"docs":" Functions for computing distance transforms - the distance of each pixel in an\n image from the nearest pixel of interest.\n","sig":null,"attributes":[{"value":"/ Functions for computing distance transforms - the distance of each pixel in an","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":79579,"byte_end":79661,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"/ image from the nearest pixel of interest.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":79662,"byte_end":79707,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2272},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80796,"byte_end":80798,"line_start":25,"line_end":25,"column_start":5,"column_end":7},"name":"L1","qualname":"::distance_transform::Norm::L1","value":"Norm::L1","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" Defines d((x1, y1), (x2, y2)) to be abs(x1 - x2) + abs(y1 - y2).\n Also known as the Manhattan or city block norm.\n","sig":null,"attributes":[{"value":"/ Defines d((x1, y1), (x2, y2)) to be abs(x1 - x2) + abs(y1 - y2).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80667,"byte_end":80735,"line_start":23,"line_end":23,"column_start":5,"column_end":73}},{"value":"/ Also known as the Manhattan or city block norm.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80740,"byte_end":80791,"line_start":24,"line_end":24,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2274},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80924,"byte_end":80928,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"LInf","qualname":"::distance_transform::Norm::LInf","value":"Norm::LInf","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" Defines d((x1, y1), (x2, y2)) to be max(abs(x1 - x2), abs(y1 - y2)).\n Also known as the chessboard norm.\n","sig":null,"attributes":[{"value":"/ Defines d((x1, y1), (x2, y2)) to be max(abs(x1 - x2), abs(y1 - y2)).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80804,"byte_end":80876,"line_start":26,"line_end":26,"column_start":5,"column_end":77}},{"value":"/ Also known as the chessboard norm.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80881,"byte_end":80919,"line_start":27,"line_end":27,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":2271},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80656,"byte_end":80660,"line_start":22,"line_end":22,"column_start":10,"column_end":14},"name":"Norm","qualname":"::distance_transform::Norm","value":"pub enum Norm { L1, LInf, }","parent":null,"children":[{"krate":0,"index":2272},{"krate":0,"index":2274}],"decl_id":null,"docs":" How to measure distance between coordinates.\n See the [`distance_transform`](fn.distance_transform.html) documentation for examples.","sig":null,"attributes":[{"value":"/ How to measure distance between coordinates.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":79855,"byte_end":79903,"line_start":9,"line_end":9,"column_start":1,"column_end":49}},{"value":"/ See the [`distance_transform`](fn.distance_transform.html) documentation for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":79904,"byte_end":79994,"line_start":10,"line_end":10,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":79995,"byte_end":79998,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Note that this enum doesn't currently include the `L2` norm. As `Norm`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":79999,"byte_end":80073,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ is used by the [`morphology`](../morphology/index.html) functions, this means that we","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80074,"byte_end":80163,"line_start":13,"line_end":13,"column_start":1,"column_end":90}},{"value":"/ don't support using the `L2` norm for any of those functions.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80164,"byte_end":80229,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80230,"byte_end":80233,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This module does support calculating the `L2` distance function, via the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80234,"byte_end":80310,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ [`euclidean_squared_distance_transform`](fn.euclidean_squared_distance_transform.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80311,"byte_end":80401,"line_start":17,"line_end":17,"column_start":1,"column_end":91}},{"value":"/ function, but the signature of this function is not currently compatible with those for","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80402,"byte_end":80493,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ computing `L1` and `LInf` distance transforms. It would be nice to unify these functions","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80494,"byte_end":80586,"line_start":19,"line_end":19,"column_start":1,"column_end":93}},{"value":"/ in future.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80587,"byte_end":80601,"line_start":20,"line_end":20,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":332},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82202,"byte_end":82220,"line_start":76,"line_end":76,"column_start":8,"column_end":26},"name":"distance_transform","qualname":"::distance_transform::distance_transform","value":"pub fn distance_transform(&GrayImage, Norm) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns an image showing the distance of each pixel from a foreground pixel in the original image.","sig":null,"attributes":[{"value":"/ Returns an image showing the distance of each pixel from a foreground pixel in the original image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":80933,"byte_end":81035,"line_start":31,"line_end":31,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81036,"byte_end":81039,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A pixel belongs to the foreground if it has non-zero intensity. As the image","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81040,"byte_end":81120,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ has a bit-depth of 8, distances saturate at 255.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81121,"byte_end":81173,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81174,"byte_end":81177,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81178,"byte_end":81192,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81193,"byte_end":81200,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81201,"byte_end":81226,"line_start":38,"line_end":38,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81227,"byte_end":81245,"line_start":39,"line_end":39,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81246,"byte_end":81275,"line_start":40,"line_end":40,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81276,"byte_end":81293,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ use image::GrayImage;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81294,"byte_end":81319,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/ use imageproc::distance_transform::{distance_transform, Norm};","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81320,"byte_end":81386,"line_start":43,"line_end":43,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81387,"byte_end":81390,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81391,"byte_end":81419,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81420,"byte_end":81450,"line_start":46,"line_end":46,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81451,"byte_end":81481,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/     0,   0,   1,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81482,"byte_end":81512,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81513,"byte_end":81543,"line_start":49,"line_end":49,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81544,"byte_end":81573,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81574,"byte_end":81580,"line_start":51,"line_end":51,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81581,"byte_end":81584,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // L1 norm","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81585,"byte_end":81599,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ let l1_distances = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81600,"byte_end":81635,"line_start":54,"line_end":54,"column_start":1,"column_end":36}},{"value":"/     4,   3,   2,   3,   4;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81636,"byte_end":81666,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/     3,   2,   1,   2,   3;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81667,"byte_end":81697,"line_start":56,"line_end":56,"column_start":1,"column_end":31}},{"value":"/     2,   1,   0,   1,   2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81698,"byte_end":81728,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"/     3,   2,   1,   2,   3;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81729,"byte_end":81759,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"/     4,   3,   2,   3,   4","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81760,"byte_end":81789,"line_start":59,"line_end":59,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81790,"byte_end":81796,"line_start":60,"line_end":60,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81797,"byte_end":81800,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(distance_transform(&image, Norm::L1), l1_distances);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81801,"byte_end":81875,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81876,"byte_end":81879,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // LInf norm","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81880,"byte_end":81896,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/ let linf_distances = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81897,"byte_end":81934,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/     2,   2,   2,   2,   2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81935,"byte_end":81965,"line_start":66,"line_end":66,"column_start":1,"column_end":31}},{"value":"/     2,   1,   1,   1,   2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81966,"byte_end":81996,"line_start":67,"line_end":67,"column_start":1,"column_end":31}},{"value":"/     2,   1,   0,   1,   2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":81997,"byte_end":82027,"line_start":68,"line_end":68,"column_start":1,"column_end":31}},{"value":"/     2,   1,   1,   1,   2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82028,"byte_end":82058,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/     2,   2,   2,   2,   2","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82059,"byte_end":82088,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82089,"byte_end":82095,"line_start":71,"line_end":71,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82096,"byte_end":82099,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(distance_transform(&image, Norm::LInf), linf_distances);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82100,"byte_end":82178,"line_start":73,"line_end":73,"column_start":1,"column_end":79}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82179,"byte_end":82186,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82187,"byte_end":82194,"line_start":75,"line_end":75,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":333},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82713,"byte_end":82735,"line_start":88,"line_end":88,"column_start":8,"column_end":30},"name":"distance_transform_mut","qualname":"::distance_transform::distance_transform_mut","value":"pub fn distance_transform_mut(&mut GrayImage, Norm)","parent":null,"children":[],"decl_id":null,"docs":" Updates an image in place so that each pixel contains its distance from a foreground pixel in the original image.","sig":null,"attributes":[{"value":"/ Updates an image in place so that each pixel contains its distance from a foreground pixel in the original image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82355,"byte_end":82472,"line_start":82,"line_end":82,"column_start":1,"column_end":118}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82473,"byte_end":82476,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ A pixel belongs to the foreground if it has non-zero intensity. As the image has a bit-depth of 8,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82477,"byte_end":82579,"line_start":84,"line_end":84,"column_start":1,"column_end":103}},{"value":"/ distances saturate at 255.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82580,"byte_end":82610,"line_start":85,"line_end":85,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82611,"byte_end":82614,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ See the [`distance_transform`](fn.distance_transform.html) documentation for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":82615,"byte_end":82705,"line_start":87,"line_end":87,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":336},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":86135,"byte_end":86171,"line_start":184,"line_end":184,"column_start":8,"column_end":44},"name":"euclidean_squared_distance_transform","qualname":"::distance_transform::euclidean_squared_distance_transform","value":"pub fn euclidean_squared_distance_transform(&Image<Luma<u8>>)\n-> Image<Luma<f64>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the square of the `L2` (Euclidean) distance transform of `image`. Distances are to the\n nearest foreground pixel, where a pixel is counted as foreground if it has non-zero value.","sig":null,"attributes":[{"value":"/ Computes the square of the `L2` (Euclidean) distance transform of `image`. Distances are to the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":85707,"byte_end":85806,"line_start":177,"line_end":177,"column_start":1,"column_end":100}},{"value":"/ nearest foreground pixel, where a pixel is counted as foreground if it has non-zero value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":85807,"byte_end":85901,"line_start":178,"line_end":178,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":85902,"byte_end":85905,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ Uses the algorithm from [Distance Transforms of Sampled Functions] to achieve time linear","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":85906,"byte_end":85999,"line_start":180,"line_end":180,"column_start":1,"column_end":94}},{"value":"/ in the size of the image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":86000,"byte_end":86029,"line_start":181,"line_end":181,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":86030,"byte_end":86033,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ [Distance Transforms of Sampled Functions]: https://www.cs.cornell.edu/~dph/papers/dt.pdf","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":86034,"byte_end":86127,"line_start":183,"line_end":183,"column_start":1,"column_end":94}}]},{"kind":"Mod","id":{"krate":0,"index":383},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"drawing","qualname":"::drawing","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":461},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":672},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":779},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":847},{"krate":0,"index":850},{"krate":0,"index":853}],"decl_id":null,"docs":" Helpers for drawing basic shapes on images.","sig":null,"attributes":[{"value":"/ Helpers for drawing basic shapes on images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":98887,"byte_end":98934,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":98935,"byte_end":98938,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Every `draw_` function comes in two variants: one creates a new copy of the input image, one modifies the image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":98939,"byte_end":99064,"line_start":3,"line_end":3,"column_start":1,"column_end":126}},{"value":"/ The latter is more memory efficient, but you lose the original image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/mod.rs","byte_start":99065,"byte_end":99138,"line_start":4,"line_end":4,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":407},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/bezier.rs","byte_start":100769,"byte_end":100792,"line_start":12,"line_end":12,"column_start":8,"column_end":31},"name":"draw_cubic_bezier_curve","qualname":"::drawing::bezier::draw_cubic_bezier_curve","value":"pub fn draw_cubic_bezier_curve<I>(&I, (f32, f32), (f32, f32), (f32, f32),\n                                  (f32, f32), I::Pixel) -> Image<I::Pixel>\nwhere I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Draws a cubic Bézier curve on a new copy of an image.","sig":null,"attributes":[{"value":"/ Draws a cubic Bézier curve on a new copy of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/bezier.rs","byte_start":100575,"byte_end":100633,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/bezier.rs","byte_start":100634,"byte_end":100637,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Draws as much of the curve as lies within image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/bezier.rs","byte_start":100638,"byte_end":100697,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/bezier.rs","byte_start":100698,"byte_end":100761,"line_start":11,"line_end":11,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":409},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/bezier.rs","byte_start":101309,"byte_end":101336,"line_start":32,"line_end":32,"column_start":8,"column_end":35},"name":"draw_cubic_bezier_curve_mut","qualname":"::drawing::bezier::draw_cubic_bezier_curve_mut","value":"pub fn draw_cubic_bezier_curve_mut<C>(&mut C, (f32, f32), (f32, f32),\n                                      (f32, f32), (f32, f32), C::Pixel) where\nC: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws a cubic Bézier curve on an image in place.","sig":null,"attributes":[{"value":"/ Draws a cubic Bézier curve on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/bezier.rs","byte_start":101184,"byte_end":101237,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/bezier.rs","byte_start":101238,"byte_end":101241,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Draws as much of the curve as lies within image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/bezier.rs","byte_start":101242,"byte_end":101301,"line_start":31,"line_end":31,"column_start":1,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":431},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105923,"byte_end":105929,"line_start":50,"line_end":50,"column_start":11,"column_end":17},"name":"Canvas","qualname":"::drawing::canvas::Canvas","value":"Canvas","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437}],"decl_id":null,"docs":" A surface for drawing on - many drawing functions in this\n library are generic over a `Canvas` to allow the user to\n configure e.g. whether to use blending.","sig":null,"attributes":[{"value":"/ A surface for drawing on - many drawing functions in this","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104190,"byte_end":104251,"line_start":3,"line_end":3,"column_start":1,"column_end":62}},{"value":"/ library are generic over a `Canvas` to allow the user to","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104252,"byte_end":104312,"line_start":4,"line_end":4,"column_start":1,"column_end":61}},{"value":"/ configure e.g. whether to use blending.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104313,"byte_end":104356,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104357,"byte_end":104360,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ All instances of `GenericImage` implement `Canvas`, with","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104361,"byte_end":104421,"line_start":7,"line_end":7,"column_start":1,"column_end":61}},{"value":"/ the behaviour of `draw_pixel` being equivalent to calling","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104422,"byte_end":104483,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ `set_pixel` with the same arguments.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104484,"byte_end":104524,"line_start":9,"line_end":9,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104525,"byte_end":104528,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ See [`Blend`](struct.Blend.html) for another example implementation","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104529,"byte_end":104600,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ of this trait - its implementation of `draw_pixel` alpha-blends","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104601,"byte_end":104668,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/ the input value with the pixel's current value.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104669,"byte_end":104720,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104721,"byte_end":104724,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104725,"byte_end":104739,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104740,"byte_end":104747,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104748,"byte_end":104773,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104774,"byte_end":104792,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104793,"byte_end":104822,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104823,"byte_end":104840,"line_start":20,"line_end":20,"column_start":1,"column_end":18}},{"value":"/ use image::{Pixel, Rgba, RgbaImage};","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104841,"byte_end":104881,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/ use imageproc::drawing::{Canvas, Blend};","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104882,"byte_end":104926,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104927,"byte_end":104930,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // A trivial function which draws on a Canvas","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104931,"byte_end":104980,"line_start":24,"line_end":24,"column_start":1,"column_end":50}},{"value":"/ fn write_a_pixel<C: Canvas>(canvas: &mut C, c: C::Pixel) {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":104981,"byte_end":105043,"line_start":25,"line_end":25,"column_start":1,"column_end":63}},{"value":"/     canvas.draw_pixel(0, 0, c);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105044,"byte_end":105079,"line_start":26,"line_end":26,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105080,"byte_end":105085,"line_start":27,"line_end":27,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105086,"byte_end":105089,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Background color","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105090,"byte_end":105113,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/ let solid_blue = Rgba([0u8, 0u8, 255u8, 255u8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105114,"byte_end":105166,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105167,"byte_end":105170,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Drawing color","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105171,"byte_end":105191,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/ let translucent_red = Rgba([255u8, 0u8, 0u8, 127u8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105192,"byte_end":105249,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105250,"byte_end":105253,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ // Blended combination of background and drawing colors","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105254,"byte_end":105313,"line_start":35,"line_end":35,"column_start":1,"column_end":60}},{"value":"/ let mut alpha_blended = solid_blue;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105314,"byte_end":105353,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"/ alpha_blended.blend(&translucent_red);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105354,"byte_end":105396,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105397,"byte_end":105400,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ // The implementation of Canvas for GenericImage overwrites existing pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105401,"byte_end":105480,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ let mut image = RgbaImage::from_pixel(1, 1, solid_blue);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105481,"byte_end":105541,"line_start":40,"line_end":40,"column_start":1,"column_end":61}},{"value":"/ write_a_pixel(&mut image, translucent_red);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105542,"byte_end":105589,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(*image.get_pixel(0, 0), translucent_red);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105590,"byte_end":105646,"line_start":42,"line_end":42,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105647,"byte_end":105650,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // This behaviour can be customised by using a different Canvas type","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105651,"byte_end":105723,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/ let mut image = Blend(RgbaImage::from_pixel(1, 1, solid_blue));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105724,"byte_end":105791,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/ write_a_pixel(&mut image, translucent_red);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105792,"byte_end":105839,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(*image.0.get_pixel(0, 0), alpha_blended);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105840,"byte_end":105896,"line_start":47,"line_end":47,"column_start":1,"column_end":57}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105897,"byte_end":105904,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105905,"byte_end":105912,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":432},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106003,"byte_end":106008,"line_start":52,"line_end":52,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::drawing::canvas::Canvas::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" The type of `Pixel` that can be drawn on this canvas.\n","sig":null,"attributes":[{"value":"/ The type of `Pixel` that can be drawn on this canvas.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":105936,"byte_end":105993,"line_start":51,"line_end":51,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106070,"byte_end":106080,"line_start":55,"line_end":55,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::drawing::canvas::Canvas::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" The width and height of this canvas.\n","sig":null,"attributes":[{"value":"/ The width and height of this canvas.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106022,"byte_end":106062,"line_start":54,"line_end":54,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106145,"byte_end":106150,"line_start":58,"line_end":58,"column_start":8,"column_end":13},"name":"width","qualname":"::drawing::canvas::Canvas::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" The width of this canvas.\n","sig":null,"attributes":[{"value":"/ The width of this canvas.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106108,"byte_end":106137,"line_start":57,"line_end":57,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106244,"byte_end":106250,"line_start":63,"line_end":63,"column_start":8,"column_end":14},"name":"height","qualname":"::drawing::canvas::Canvas::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" The height of this canvas.\n","sig":null,"attributes":[{"value":"/ The height of this canvas.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106206,"byte_end":106236,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106354,"byte_end":106363,"line_start":68,"line_end":68,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::drawing::canvas::Canvas::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y).\n","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106306,"byte_end":106346,"line_start":67,"line_end":67,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106577,"byte_end":106587,"line_start":73,"line_end":73,"column_start":8,"column_end":18},"name":"draw_pixel","qualname":"::drawing::canvas::Canvas::draw_pixel","value":"pub fn draw_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" Draw a pixel at the given coordinates. `x` and `y`\n should be within `dimensions` - if not then panicking\n is a valid implementation behaviour.\n","sig":null,"attributes":[{"value":"/ Draw a pixel at the given coordinates. `x` and `y`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106408,"byte_end":106462,"line_start":70,"line_end":70,"column_start":5,"column_end":59}},{"value":"/ should be within `dimensions` - if not then panicking","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106467,"byte_end":106524,"line_start":71,"line_end":71,"column_start":5,"column_end":62}},{"value":"/ is a valid implementation behaviour.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106529,"byte_end":106569,"line_start":72,"line_end":72,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":444},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":107177,"byte_end":107182,"line_start":99,"line_end":99,"column_start":12,"column_end":17},"name":"Blend","qualname":"::drawing::canvas::Blend","value":"","parent":null,"children":[],"decl_id":null,"docs":" A canvas that blends pixels when drawing.","sig":null,"attributes":[{"value":"/ A canvas that blends pixels when drawing.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":107020,"byte_end":107065,"line_start":95,"line_end":95,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":107066,"byte_end":107069,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ See the documentation for [`Canvas`](trait.Canvas.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":107070,"byte_end":107129,"line_start":97,"line_end":97,"column_start":1,"column_end":60}},{"value":"/ for an example using this type.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":107130,"byte_end":107165,"line_start":98,"line_end":98,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":447},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":107186,"byte_end":107191,"line_start":99,"line_end":99,"column_start":21,"column_end":26},"name":"0","qualname":"::drawing::canvas::Blend::0","value":"I","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":487},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108380,"byte_end":108399,"line_start":20,"line_end":20,"column_start":8,"column_end":27},"name":"draw_hollow_ellipse","qualname":"::drawing::conics::draw_hollow_ellipse","value":"pub fn draw_hollow_ellipse<I>(&I, (i32, i32), i32, i32, I::Pixel)\n-> Image<I::Pixel> where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Draws the outline of an ellipse on a new copy of an image.","sig":null,"attributes":[{"value":"/ Draws the outline of an ellipse on a new copy of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":107840,"byte_end":107902,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":107903,"byte_end":107906,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Draws as much of an ellipse as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":107907,"byte_end":107971,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":107972,"byte_end":107975,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Uses the [Midpoint Ellipse Drawing Algorithm](https://web.archive.org/web/20160128020853/http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":107976,"byte_end":108129,"line_start":13,"line_end":13,"column_start":1,"column_end":154}},{"value":"/ (Modified from Bresenham's algorithm)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108130,"byte_end":108171,"line_start":14,"line_end":14,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108172,"byte_end":108175,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108176,"byte_end":108245,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108246,"byte_end":108249,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ (`x^2 / width_radius^2) + (y^2 / height_radius^2) = 1`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108250,"byte_end":108308,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108309,"byte_end":108372,"line_start":19,"line_end":19,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":109234,"byte_end":109257,"line_start":46,"line_end":46,"column_start":8,"column_end":31},"name":"draw_hollow_ellipse_mut","qualname":"::drawing::conics::draw_hollow_ellipse_mut","value":"pub fn draw_hollow_ellipse_mut<C>(&mut C, (i32, i32), i32, i32, C::Pixel)\nwhere C: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws the outline of an ellipse on an image in place.","sig":null,"attributes":[{"value":"/ Draws the outline of an ellipse on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108763,"byte_end":108820,"line_start":36,"line_end":36,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108821,"byte_end":108824,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Draws as much of an ellipse as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108825,"byte_end":108889,"line_start":38,"line_end":38,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108890,"byte_end":108893,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Uses the [Midpoint Ellipse Drawing Algorithm](https://web.archive.org/web/20160128020853/http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":108894,"byte_end":109047,"line_start":40,"line_end":40,"column_start":1,"column_end":154}},{"value":"/ (Modified from Bresenham's algorithm)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":109048,"byte_end":109089,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":109090,"byte_end":109093,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":109094,"byte_end":109163,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":109164,"byte_end":109167,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ `(x^2 / width_radius^2) + (y^2 / height_radius^2) = 1`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":109168,"byte_end":109226,"line_start":45,"line_end":45,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110567,"byte_end":110586,"line_start":82,"line_end":82,"column_start":8,"column_end":27},"name":"draw_filled_ellipse","qualname":"::drawing::conics::draw_filled_ellipse","value":"pub fn draw_filled_ellipse<I>(&I, (i32, i32), i32, i32, I::Pixel)\n-> Image<I::Pixel> where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Draws an ellipse and its contents on a new copy of the image.","sig":null,"attributes":[{"value":"/ Draws an ellipse and its contents on a new copy of the image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110006,"byte_end":110071,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110072,"byte_end":110075,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Draw as much of the ellipse and its contents as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110076,"byte_end":110157,"line_start":73,"line_end":73,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110158,"byte_end":110161,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Uses the [Midpoint Ellipse Drawing Algorithm](https://web.archive.org/web/20160128020853/http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110162,"byte_end":110315,"line_start":75,"line_end":75,"column_start":1,"column_end":154}},{"value":"/ (Modified from Bresenham's algorithm)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110316,"byte_end":110357,"line_start":76,"line_end":76,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110358,"byte_end":110361,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110362,"byte_end":110431,"line_start":78,"line_end":78,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110432,"byte_end":110435,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ `(x^2 / width_radius^2) + (y^2 / height_radius^2) <= 1`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110436,"byte_end":110495,"line_start":80,"line_end":80,"column_start":1,"column_end":60}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110496,"byte_end":110559,"line_start":81,"line_end":81,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":111441,"byte_end":111464,"line_start":108,"line_end":108,"column_start":8,"column_end":31},"name":"draw_filled_ellipse_mut","qualname":"::drawing::conics::draw_filled_ellipse_mut","value":"pub fn draw_filled_ellipse_mut<C>(&mut C, (i32, i32), i32, i32, C::Pixel)\nwhere C: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws an ellipse and its contents on an image in place.","sig":null,"attributes":[{"value":"/ Draws an ellipse and its contents on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":110950,"byte_end":111009,"line_start":98,"line_end":98,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":111010,"byte_end":111013,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Draw as much of the ellipse and its contents as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":111014,"byte_end":111095,"line_start":100,"line_end":100,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":111096,"byte_end":111099,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ Uses the [Midpoint Ellipse Drawing Algorithm](https://web.archive.org/web/20160128020853/http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":111100,"byte_end":111253,"line_start":102,"line_end":102,"column_start":1,"column_end":154}},{"value":"/ (Modified from Bresenham's algorithm)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":111254,"byte_end":111295,"line_start":103,"line_end":103,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":111296,"byte_end":111299,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":111300,"byte_end":111369,"line_start":105,"line_end":105,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":111370,"byte_end":111373,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ `(x^2 / width_radius^2) + (y^2 / height_radius^2) <= 1`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":111374,"byte_end":111433,"line_start":107,"line_end":107,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":113968,"byte_end":113986,"line_start":195,"line_end":195,"column_start":8,"column_end":26},"name":"draw_hollow_circle","qualname":"::drawing::conics::draw_hollow_circle","value":"pub fn draw_hollow_circle<I>(&I, (i32, i32), i32, I::Pixel) -> Image<I::Pixel>\nwhere I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Draws the outline of a circle on a new copy of an image.","sig":null,"attributes":[{"value":"/ Draws the outline of a circle on a new copy of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":113768,"byte_end":113828,"line_start":191,"line_end":191,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":113829,"byte_end":113832,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ Draw as much of the circle as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":113833,"byte_end":113896,"line_start":193,"line_end":193,"column_start":1,"column_end":64}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":113897,"byte_end":113960,"line_start":194,"line_end":194,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":114429,"byte_end":114451,"line_start":213,"line_end":213,"column_start":8,"column_end":30},"name":"draw_hollow_circle_mut","qualname":"::drawing::conics::draw_hollow_circle_mut","value":"pub fn draw_hollow_circle_mut<C>(&mut C, (i32, i32), i32, C::Pixel) where\nC: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws the outline of a circle on an image in place.","sig":null,"attributes":[{"value":"/ Draws the outline of a circle on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":114298,"byte_end":114353,"line_start":210,"line_end":210,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":114354,"byte_end":114357,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Draw as much of the circle as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":114358,"byte_end":114421,"line_start":212,"line_end":212,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":115451,"byte_end":115473,"line_start":246,"line_end":246,"column_start":8,"column_end":30},"name":"draw_filled_circle_mut","qualname":"::drawing::conics::draw_filled_circle_mut","value":"pub fn draw_filled_circle_mut<C>(&mut C, (i32, i32), i32, C::Pixel) where\nC: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws a circle and its contents on an image in place.","sig":null,"attributes":[{"value":"/ Draws a circle and its contents on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":115302,"byte_end":115359,"line_start":243,"line_end":243,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":115360,"byte_end":115363,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ Draws as much of a circle and its contents as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":115364,"byte_end":115443,"line_start":245,"line_end":245,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":116787,"byte_end":116805,"line_start":296,"line_end":296,"column_start":8,"column_end":26},"name":"draw_filled_circle","qualname":"::drawing::conics::draw_filled_circle","value":"pub fn draw_filled_circle<I>(&I, (i32, i32), i32, I::Pixel) -> Image<I::Pixel>\nwhere I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Draws a circle and its contents on a new copy of the image.","sig":null,"attributes":[{"value":"/ Draws a circle and its contents on a new copy of the image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":116568,"byte_end":116631,"line_start":292,"line_end":292,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":116632,"byte_end":116635,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ Draws as much of a circle and its contents as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":116636,"byte_end":116715,"line_start":294,"line_end":294,"column_start":1,"column_end":80}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/conics.rs","byte_start":116716,"byte_end":116779,"line_start":295,"line_end":295,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":2301},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/cross.rs","byte_start":119353,"byte_end":119367,"line_start":10,"line_end":10,"column_start":8,"column_end":22},"name":"draw_cross_mut","qualname":"::drawing::cross::draw_cross_mut","value":"pub fn draw_cross_mut<C>(&mut C, C::Pixel, i32, i32) where C: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws a colored cross on an image in place.","sig":null,"attributes":[{"value":"/ Draws a colored cross on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/cross.rs","byte_start":119231,"byte_end":119278,"line_start":6,"line_end":6,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/cross.rs","byte_start":119279,"byte_end":119282,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Handles coordinates outside image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/cross.rs","byte_start":119283,"byte_end":119328,"line_start":8,"line_end":8,"column_start":1,"column_end":46}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/cross.rs","byte_start":119329,"byte_end":119345,"line_start":9,"line_end":9,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/cross.rs","byte_start":120227,"byte_end":120237,"line_start":43,"line_end":43,"column_start":8,"column_end":18},"name":"draw_cross","qualname":"::drawing::cross::draw_cross","value":"pub fn draw_cross<I>(&I, I::Pixel, i32, i32) -> Image<I::Pixel> where\nI: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Draws a colored cross on a new copy of an image.","sig":null,"attributes":[{"value":"/ Draws a colored cross on a new copy of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/cross.rs","byte_start":120053,"byte_end":120105,"line_start":39,"line_end":39,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/cross.rs","byte_start":120106,"byte_end":120109,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Handles coordinates outside image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/cross.rs","byte_start":120110,"byte_end":120155,"line_start":41,"line_end":41,"column_start":1,"column_end":46}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/cross.rs","byte_start":120156,"byte_end":120219,"line_start":42,"line_end":42,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":588},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":123554,"byte_end":123571,"line_start":10,"line_end":10,"column_start":12,"column_end":29},"name":"BresenhamLineIter","qualname":"::drawing::line::BresenhamLineIter","value":"BresenhamLineIter {  }","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596}],"decl_id":null,"docs":" Iterates over the coordinates in a line segment using\n [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Iterates over the coordinates in a line segment using","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":123383,"byte_end":123440,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/ [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":123441,"byte_end":123542,"line_start":9,"line_end":9,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":123886,"byte_end":123889,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<BresenhamLineIter>::new","value":"pub fn new((f32, f32), (f32, f32)) -> BresenhamLineIter","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BresenhamLineIter`](struct.BresenhamLineIter.html) which will iterate over the integer coordinates\n between `start` and `end`.\n","sig":null,"attributes":[{"value":"/ Creates a [`BresenhamLineIter`](struct.BresenhamLineIter.html) which will iterate over the integer coordinates","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":123725,"byte_end":123839,"line_start":22,"line_end":22,"column_start":5,"column_end":119}},{"value":"/ between `start` and `end`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":123844,"byte_end":123874,"line_start":23,"line_end":23,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":605},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":125663,"byte_end":125685,"line_start":95,"line_end":95,"column_start":12,"column_end":34},"name":"BresenhamLinePixelIter","qualname":"::drawing::line::BresenhamLinePixelIter","value":"BresenhamLinePixelIter {  }","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"decl_id":null,"docs":" Iterates over the image pixels in a line segment using\n [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Iterates over the image pixels in a line segment using","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":125491,"byte_end":125549,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/ [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":125550,"byte_end":125651,"line_start":94,"line_end":94,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":125995,"byte_end":125998,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<BresenhamLinePixelIter>::new","value":"pub fn new(&Image<P>, (f32, f32), (f32, f32)) -> BresenhamLinePixelIter<, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BresenhamLinePixelIter`](struct.BresenhamLinePixelIter.html) which will iterate over\n the image pixels with coordinates between `start` and `end`.\n","sig":null,"attributes":[{"value":"/ Creates a [`BresenhamLinePixelIter`](struct.BresenhamLinePixelIter.html) which will iterate over","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":125814,"byte_end":125914,"line_start":101,"line_end":101,"column_start":5,"column_end":105}},{"value":"/ the image pixels with coordinates between `start` and `end`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":125919,"byte_end":125983,"line_start":102,"line_end":102,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":620},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":126841,"byte_end":126866,"line_start":129,"line_end":129,"column_start":12,"column_end":37},"name":"BresenhamLinePixelIterMut","qualname":"::drawing::line::BresenhamLinePixelIterMut","value":"BresenhamLinePixelIterMut {  }","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624}],"decl_id":null,"docs":" Iterates over the image pixels in a line segment using\n [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Iterates over the image pixels in a line segment using","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":126669,"byte_end":126727,"line_start":127,"line_end":127,"column_start":1,"column_end":59}},{"value":"/ [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":126728,"byte_end":126829,"line_start":128,"line_end":128,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":127189,"byte_end":127192,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<BresenhamLinePixelIterMut>::new","value":"pub fn new(&mut Image<P>, (f32, f32), (f32, f32))\n-> BresenhamLinePixelIterMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BresenhamLinePixelIterMut`](struct.BresenhamLinePixelIterMut.html) which will iterate over\n the image pixels with coordinates between `start` and `end`.\n","sig":null,"attributes":[{"value":"/ Creates a [`BresenhamLinePixelIterMut`](struct.BresenhamLinePixelIterMut.html) which will iterate over","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":127002,"byte_end":127108,"line_start":135,"line_end":135,"column_start":5,"column_end":111}},{"value":"/ the image pixels with coordinates between `start` and `end`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":127113,"byte_end":127177,"line_start":136,"line_end":136,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":128565,"byte_end":128582,"line_start":174,"line_end":174,"column_start":8,"column_end":25},"name":"draw_line_segment","qualname":"::drawing::line::draw_line_segment","value":"pub fn draw_line_segment<I>(&I, (f32, f32), (f32, f32), I::Pixel)\n-> Image<I::Pixel> where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Draws a line segment on a new copy of an image.","sig":null,"attributes":[{"value":"/ Draws a line segment on a new copy of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":128234,"byte_end":128285,"line_start":168,"line_end":168,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":128286,"byte_end":128289,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ Draws as much of the line segment between start and end as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":128290,"byte_end":128382,"line_start":170,"line_end":170,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":128383,"byte_end":128386,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ Uses [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":128387,"byte_end":128493,"line_start":172,"line_end":172,"column_start":1,"column_end":107}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":128494,"byte_end":128557,"line_start":173,"line_end":173,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129154,"byte_end":129175,"line_start":194,"line_end":194,"column_start":8,"column_end":29},"name":"draw_line_segment_mut","qualname":"::drawing::line::draw_line_segment_mut","value":"pub fn draw_line_segment_mut<C>(&mut C, (f32, f32), (f32, f32), C::Pixel)\nwhere C: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws a line segment on an image in place.","sig":null,"attributes":[{"value":"/ Draws a line segment on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":128892,"byte_end":128938,"line_start":189,"line_end":189,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":128939,"byte_end":128942,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ Draws as much of the line segment between start and end as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":128943,"byte_end":129035,"line_start":191,"line_end":191,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129036,"byte_end":129039,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ Uses [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129040,"byte_end":129146,"line_start":193,"line_end":193,"column_start":1,"column_end":107}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130143,"byte_end":130172,"line_start":222,"line_end":222,"column_start":8,"column_end":37},"name":"draw_antialiased_line_segment","qualname":"::drawing::line::draw_antialiased_line_segment","value":"pub fn draw_antialiased_line_segment<I,\n                                     B>(&I, (i32, i32), (i32, i32), I::Pixel,\n                                        B) -> Image<I::Pixel> where\nI: GenericImage, B: Fn(I::Pixel, I::Pixel, f32) -> I::Pixel","parent":null,"children":[],"decl_id":null,"docs":" Draws an antialised line segment on a new copy of an image.","sig":null,"attributes":[{"value":"/ Draws an antialised line segment on a new copy of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129656,"byte_end":129719,"line_start":213,"line_end":213,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129720,"byte_end":129723,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Draws as much of the line segment between `start` and `end` as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129724,"byte_end":129820,"line_start":215,"line_end":215,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129821,"byte_end":129824,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ The parameters of blend are (line color, original color, line weight).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129825,"byte_end":129899,"line_start":217,"line_end":217,"column_start":1,"column_end":75}},{"value":"/ Consider using [`interpolate`](fn.interpolate.html) for blend.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129900,"byte_end":129966,"line_start":218,"line_end":218,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129967,"byte_end":129970,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Uses [Xu's line drawing algorithm](https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":129971,"byte_end":130071,"line_start":220,"line_end":220,"column_start":1,"column_end":101}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130072,"byte_end":130135,"line_start":221,"line_end":221,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130985,"byte_end":131018,"line_start":248,"line_end":248,"column_start":8,"column_end":41},"name":"draw_antialiased_line_segment_mut","qualname":"::drawing::line::draw_antialiased_line_segment_mut","value":"pub fn draw_antialiased_line_segment_mut<I,\n                                         B>(&mut I, (i32, i32), (i32, i32),\n                                            I::Pixel, B) where\nI: GenericImage, B: Fn(I::Pixel, I::Pixel, f32) -> I::Pixel","parent":null,"children":[],"decl_id":null,"docs":" Draws an antialised line segment on an image in place.","sig":null,"attributes":[{"value":"/ Draws an antialised line segment on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130567,"byte_end":130625,"line_start":240,"line_end":240,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130626,"byte_end":130629,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ Draws as much of the line segment between `start` and `end` as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130630,"byte_end":130726,"line_start":242,"line_end":242,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130727,"byte_end":130730,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ The parameters of blend are (line color, original color, line weight).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130731,"byte_end":130805,"line_start":244,"line_end":244,"column_start":1,"column_end":75}},{"value":"/ Consider using [`interpolate`](fn.interpolate.html) for blend.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130806,"byte_end":130872,"line_start":245,"line_end":245,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130873,"byte_end":130876,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ Uses [Xu's line drawing algorithm](https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":130877,"byte_end":130977,"line_start":247,"line_end":247,"column_start":1,"column_end":101}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143445,"byte_end":143457,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"draw_polygon","qualname":"::drawing::polygon::draw_polygon","value":"pub fn draw_polygon<I>(&I, &[Point<i32>], I::Pixel) -> Image<I::Pixel> where\nI: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Draws a polygon and its contents on a new copy of an image.","sig":null,"attributes":[{"value":"/ Draws a polygon and its contents on a new copy of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143056,"byte_end":143119,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143120,"byte_end":143123,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Draws as much of a filled polygon as lies within image bounds. The provided","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143124,"byte_end":143203,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ list of points should be an open path, i.e. the first and last points must not be equal.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143204,"byte_end":143296,"line_start":13,"line_end":13,"column_start":1,"column_end":93}},{"value":"/ An implicit edge is added from the last to the first point in the slice.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143297,"byte_end":143373,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143374,"byte_end":143437,"line_start":15,"line_end":15,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":144042,"byte_end":144058,"line_start":31,"line_end":31,"column_start":8,"column_end":24},"name":"draw_polygon_mut","qualname":"::drawing::polygon::draw_polygon_mut","value":"pub fn draw_polygon_mut<C>(&mut C, &[Point<i32>], C::Pixel) where C: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws a polygon and its contents on an image in place.","sig":null,"attributes":[{"value":"/ Draws a polygon and its contents on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143722,"byte_end":143780,"line_start":26,"line_end":26,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143781,"byte_end":143784,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Draws as much of a filled polygon as lies within image bounds. The provided","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143785,"byte_end":143864,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ list of points should be an open path, i.e. the first and last points must not be equal.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143865,"byte_end":143957,"line_start":29,"line_end":29,"column_start":1,"column_end":93}},{"value":"/ An implicit edge is added from the last to the first point in the slice.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/polygon.rs","byte_start":143958,"byte_end":144034,"line_start":30,"line_end":30,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":758},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":147029,"byte_end":147045,"line_start":12,"line_end":12,"column_start":8,"column_end":24},"name":"draw_hollow_rect","qualname":"::drawing::rect::draw_hollow_rect","value":"pub fn draw_hollow_rect<I>(&I, Rect, I::Pixel) -> Image<I::Pixel> where\nI: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Draws the outline of a rectangle on a new copy of an image.","sig":null,"attributes":[{"value":"/ Draws the outline of a rectangle on a new copy of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":146806,"byte_end":146869,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":146870,"byte_end":146873,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Draws as much of the boundary of the rectangle as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":146874,"byte_end":146957,"line_start":10,"line_end":10,"column_start":1,"column_end":84}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":146958,"byte_end":147021,"line_start":11,"line_end":11,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":147459,"byte_end":147479,"line_start":25,"line_end":25,"column_start":8,"column_end":28},"name":"draw_hollow_rect_mut","qualname":"::drawing::rect::draw_hollow_rect_mut","value":"pub fn draw_hollow_rect_mut<C>(&mut C, Rect, C::Pixel) where C: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws the outline of a rectangle on an image in place.","sig":null,"attributes":[{"value":"/ Draws the outline of a rectangle on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":147305,"byte_end":147363,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":147364,"byte_end":147367,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Draws as much of the boundary of the rectangle as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":147368,"byte_end":147451,"line_start":24,"line_end":24,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":148213,"byte_end":148229,"line_start":44,"line_end":44,"column_start":8,"column_end":24},"name":"draw_filled_rect","qualname":"::drawing::rect::draw_filled_rect","value":"pub fn draw_filled_rect<I>(&I, Rect, I::Pixel) -> Image<I::Pixel> where\nI: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Draws a rectangle and its contents on a new copy of an image.","sig":null,"attributes":[{"value":"/ Draws a rectangle and its contents on a new copy of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":147987,"byte_end":148052,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":148053,"byte_end":148056,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Draws as much of the rectangle and its contents as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":148057,"byte_end":148141,"line_start":42,"line_end":42,"column_start":1,"column_end":85}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":148142,"byte_end":148205,"line_start":43,"line_end":43,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":764},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":148646,"byte_end":148666,"line_start":57,"line_end":57,"column_start":8,"column_end":28},"name":"draw_filled_rect_mut","qualname":"::drawing::rect::draw_filled_rect_mut","value":"pub fn draw_filled_rect_mut<C>(&mut C, Rect, C::Pixel) where C: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws a rectangle and its contents on an image in place.","sig":null,"attributes":[{"value":"/ Draws a rectangle and its contents on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":148489,"byte_end":148549,"line_start":54,"line_end":54,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":148550,"byte_end":148553,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Draws as much of the rectangle and its contents as lies inside the image bounds.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/rect.rs","byte_start":148554,"byte_end":148638,"line_start":56,"line_end":56,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":833},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":152920,"byte_end":152929,"line_start":36,"line_end":36,"column_start":8,"column_end":17},"name":"text_size","qualname":"::drawing::text::text_size","value":"pub fn text_size(Scale, &Font, &str) -> (i32, i32)","parent":null,"children":[],"decl_id":null,"docs":" Get the width and height of the given text, rendered with the given font and scale.","sig":null,"attributes":[{"value":"/ Get the width and height of the given text, rendered with the given font and scale.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":152737,"byte_end":152824,"line_start":33,"line_end":33,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":152825,"byte_end":152828,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Note that this function *does not* support newlines, you must do this manually.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":152829,"byte_end":152912,"line_start":35,"line_end":35,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":835},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":153256,"byte_end":153269,"line_start":45,"line_end":45,"column_start":8,"column_end":21},"name":"draw_text_mut","qualname":"::drawing::text::draw_text_mut","value":"pub fn draw_text_mut<'a,\n                     C>(&'a mut C, C::Pixel, i32, i32, Scale, &'a Font,\n                        &'a str) where C: Canvas,\n<C::Pixel as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Draws colored text on an image in place.","sig":null,"attributes":[{"value":"/ Draws colored text on an image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":153036,"byte_end":153080,"line_start":40,"line_end":40,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":153081,"byte_end":153084,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ `scale` is augmented font scaling on both the x and y axis (in pixels).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":153085,"byte_end":153160,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":153161,"byte_end":153164,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Note that this function *does not* support newlines, you must do this manually.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":153165,"byte_end":153248,"line_start":44,"line_end":44,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":840},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":154480,"byte_end":154489,"line_start":83,"line_end":83,"column_start":8,"column_end":17},"name":"draw_text","qualname":"::drawing::text::draw_text","value":"pub fn draw_text<'a, I>(&'a I, I::Pixel, i32, i32, Scale, &'a Font, &'a str)\n-> Image<I::Pixel> where I: GenericImage,\n<I::Pixel as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Draws colored text on a new copy of an image.","sig":null,"attributes":[{"value":"/ Draws colored text on a new copy of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":154191,"byte_end":154240,"line_start":77,"line_end":77,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":154241,"byte_end":154244,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ `scale` is augmented font scaling on both the x and y axis (in pixels).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":154245,"byte_end":154320,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":154321,"byte_end":154324,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ Note that this function *does not* support newlines, you must do this manually.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":154325,"byte_end":154408,"line_start":81,"line_end":81,"column_start":1,"column_end":84}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/text.rs","byte_start":154409,"byte_end":154472,"line_start":82,"line_end":82,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":855},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"edges","qualname":"::edges","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":863},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":870},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":889},{"krate":0,"index":892},{"krate":0,"index":894}],"decl_id":null,"docs":" Functions for detecting edges in images.\n","sig":null,"attributes":[{"value":"/ Functions for detecting edges in images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":154916,"byte_end":154960,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":889},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":156140,"byte_end":156145,"line_start":30,"line_end":30,"column_start":8,"column_end":13},"name":"canny","qualname":"::edges::canny","value":"pub fn canny(&GrayImage, f32, f32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Runs the canny edge detection algorithm.","sig":null,"attributes":[{"value":"/ Runs the canny edge detection algorithm.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155180,"byte_end":155224,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155225,"byte_end":155228,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Returns a binary image where edge pixels have a value of 255","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155229,"byte_end":155293,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/  and non-edge pixels a value of 0.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155294,"byte_end":155332,"line_start":12,"line_end":12,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155333,"byte_end":155336,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Params","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155337,"byte_end":155349,"line_start":14,"line_end":14,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155350,"byte_end":155353,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ - `low_threshold`: Low threshold for the hysteresis procedure.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155354,"byte_end":155420,"line_start":16,"line_end":16,"column_start":1,"column_end":67}},{"value":"/ Edges with a strength higher than the low threshold will appear","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155421,"byte_end":155488,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ in the output image, if there are strong edges nearby.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155489,"byte_end":155547,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/ - `high_threshold`: High threshold for the hysteresis procedure.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155548,"byte_end":155616,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ Edges with a strength higher than the high threshold will always","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155617,"byte_end":155685,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/ appear as edges in the output image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155686,"byte_end":155726,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155727,"byte_end":155730,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The greatest possible edge strength (and so largest sensible threshold)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155731,"byte_end":155806,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ is`sqrt(5) * 2 * 255`, or approximately 1140.39.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155807,"byte_end":155859,"line_start":24,"line_end":24,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155860,"byte_end":155863,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This odd looking value is the result of using a standard","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155864,"byte_end":155924,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/ definition of edge strength: the strength of an edge at a point `p` is","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":155925,"byte_end":155999,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ defined to be `sqrt(dx^2 + dy^2)`, where `dx` and `dy` are the values","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":156000,"byte_end":156073,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ of the horizontal and vertical Sobel gradients at `p`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/edges.rs","byte_start":156074,"byte_end":156132,"line_start":29,"line_end":29,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":895},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::filter","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":938},{"krate":0,"index":941},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":980},{"krate":0,"index":983},{"krate":0,"index":986},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1016},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1045},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1059},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1088}],"decl_id":null,"docs":" Functions for filtering images.\n","sig":null,"attributes":[{"value":"/ Functions for filtering images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162123,"byte_end":162158,"line_start":1,"line_end":1,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":914},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200334,"byte_end":200347,"line_start":109,"line_end":109,"column_start":8,"column_end":21},"name":"median_filter","qualname":"::filter::median::median_filter","value":"pub fn median_filter<P>(&Image<P>, u32, u32) -> Image<P> where\nP: Pixel<Subpixel = u8>","parent":null,"children":[],"decl_id":null,"docs":" Applies a median filter of given dimensions to an image. Each output pixel is the median\n of the pixels in a `(2 * x_radius + 1) * (2 * y_radius + 1)` kernel of pixels in the input image.","sig":null,"attributes":[{"value":"/ Applies a median filter of given dimensions to an image. Each output pixel is the median","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197442,"byte_end":197534,"line_start":5,"line_end":5,"column_start":1,"column_end":93}},{"value":"/ of the pixels in a `(2 * x_radius + 1) * (2 * y_radius + 1)` kernel of pixels in the input image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197535,"byte_end":197636,"line_start":6,"line_end":6,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197637,"byte_end":197640,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Pads by continuity. Performs O(max(x_radius, y_radius)) operations per pixel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197641,"byte_end":197722,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197723,"byte_end":197726,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197727,"byte_end":197741,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197742,"byte_end":197749,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197750,"byte_end":197775,"line_start":12,"line_end":12,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197776,"byte_end":197794,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197795,"byte_end":197824,"line_start":14,"line_end":14,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197825,"byte_end":197842,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/ use imageproc::filter::median_filter;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197843,"byte_end":197884,"line_start":16,"line_end":16,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197885,"byte_end":197888,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197889,"byte_end":197917,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/     1,   2,   3;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197918,"byte_end":197938,"line_start":19,"line_end":19,"column_start":1,"column_end":21}},{"value":"/   200,   6,   7;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197939,"byte_end":197959,"line_start":20,"line_end":20,"column_start":1,"column_end":21}},{"value":"/     9, 100,  11","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197960,"byte_end":197979,"line_start":21,"line_end":21,"column_start":1,"column_end":20}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197980,"byte_end":197986,"line_start":22,"line_end":22,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197987,"byte_end":197990,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Padding by continuity means that the values we use","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":197991,"byte_end":198048,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/ // for computing medians of boundary pixels are:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198049,"byte_end":198101,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198102,"byte_end":198108,"line_start":26,"line_end":26,"column_start":1,"column_end":7}},{"value":"/ //   1     1     2     3     3","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198109,"byte_end":198143,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/ //      -----------------","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198144,"byte_end":198173,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/ //   1 |   1     2     3 |   3","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198174,"byte_end":198208,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198209,"byte_end":198215,"line_start":30,"line_end":30,"column_start":1,"column_end":7}},{"value":"/ // 200 | 200     6     7 |   7","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198216,"byte_end":198250,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198251,"byte_end":198257,"line_start":32,"line_end":32,"column_start":1,"column_end":7}},{"value":"/ //   9 |   9   100    11 |  11","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198258,"byte_end":198292,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ //      -----------------","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198293,"byte_end":198322,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/ //   9     9   100    11    11","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198323,"byte_end":198357,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198358,"byte_end":198361,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let filtered = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198362,"byte_end":198393,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/     2,  3,  3;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198394,"byte_end":198412,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"/     9,  7,  7;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198413,"byte_end":198431,"line_start":39,"line_end":39,"column_start":1,"column_end":19}},{"value":"/     9, 11, 11","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198432,"byte_end":198449,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198450,"byte_end":198456,"line_start":41,"line_end":41,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198457,"byte_end":198460,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(median_filter(&image, 1, 1), filtered);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198461,"byte_end":198522,"line_start":43,"line_end":43,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198523,"byte_end":198530,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198531,"byte_end":198538,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198539,"byte_end":198542,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198543,"byte_end":198550,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198551,"byte_end":198576,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198577,"byte_end":198595,"line_start":49,"line_end":49,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198596,"byte_end":198625,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198626,"byte_end":198643,"line_start":51,"line_end":51,"column_start":1,"column_end":18}},{"value":"/ use imageproc::filter::median_filter;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198644,"byte_end":198685,"line_start":52,"line_end":52,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198686,"byte_end":198689,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Image channels are handled independently.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198690,"byte_end":198738,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"/ // This example sets the red channel to have the same","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198739,"byte_end":198796,"line_start":55,"line_end":55,"column_start":1,"column_end":58}},{"value":"/ // contents as the image from the grayscale example,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198797,"byte_end":198853,"line_start":56,"line_end":56,"column_start":1,"column_end":57}},{"value":"/ // the green channel to a vertically inverted copy of that","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198854,"byte_end":198916,"line_start":57,"line_end":57,"column_start":1,"column_end":63}},{"value":"/ // image and the blue channel to be constant.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198917,"byte_end":198966,"line_start":58,"line_end":58,"column_start":1,"column_end":50}},{"value":"/ //","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198967,"byte_end":198973,"line_start":59,"line_end":59,"column_start":1,"column_end":7}},{"value":"/ // See the grayscale image example for an explanation of how","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":198974,"byte_end":199038,"line_start":60,"line_end":60,"column_start":1,"column_end":65}},{"value":"/ // boundary conditions are handled.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199039,"byte_end":199078,"line_start":61,"line_end":61,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199079,"byte_end":199082,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199083,"byte_end":199110,"line_start":63,"line_end":63,"column_start":1,"column_end":28}},{"value":"/     [  1,   9, 10], [  2, 100,  10], [  3,  11,  10];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199111,"byte_end":199168,"line_start":64,"line_end":64,"column_start":1,"column_end":58}},{"value":"/     [200, 200, 10], [  6,   6,  10], [  7,   7,  10];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199169,"byte_end":199226,"line_start":65,"line_end":65,"column_start":1,"column_end":58}},{"value":"/     [  9,   1, 10], [100,   2,  10], [ 11,   3,  10]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199227,"byte_end":199283,"line_start":66,"line_end":66,"column_start":1,"column_end":57}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199284,"byte_end":199290,"line_start":67,"line_end":67,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199291,"byte_end":199294,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let filtered = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199295,"byte_end":199325,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/     [ 2,  9, 10], [ 3, 11, 10], [ 3, 11, 10];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199326,"byte_end":199375,"line_start":70,"line_end":70,"column_start":1,"column_end":50}},{"value":"/     [ 9,  9, 10], [ 7,  7, 10], [ 7,  7, 10];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199376,"byte_end":199425,"line_start":71,"line_end":71,"column_start":1,"column_end":50}},{"value":"/     [ 9,  2, 10], [11,  3, 10], [11,  3, 10]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199426,"byte_end":199474,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199475,"byte_end":199481,"line_start":73,"line_end":73,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199482,"byte_end":199485,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(median_filter(&image, 1, 1), filtered);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199486,"byte_end":199547,"line_start":75,"line_end":75,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199548,"byte_end":199555,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199556,"byte_end":199563,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199564,"byte_end":199567,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199568,"byte_end":199575,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199576,"byte_end":199601,"line_start":80,"line_end":80,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199602,"byte_end":199620,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199621,"byte_end":199650,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199651,"byte_end":199668,"line_start":83,"line_end":83,"column_start":1,"column_end":18}},{"value":"/ use imageproc::filter::median_filter;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199669,"byte_end":199710,"line_start":84,"line_end":84,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199711,"byte_end":199714,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // This example uses a kernel with x_radius sets to 2","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199715,"byte_end":199772,"line_start":86,"line_end":86,"column_start":1,"column_end":58}},{"value":"/ // and y_radius sets to 1, which leads to 5 * 3 kernel size.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199773,"byte_end":199837,"line_start":87,"line_end":87,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199838,"byte_end":199841,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199842,"byte_end":199870,"line_start":89,"line_end":89,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3, 4, 5;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199871,"byte_end":199893,"line_start":90,"line_end":90,"column_start":1,"column_end":23}},{"value":"/     255, 200, 4, 11, 7;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199894,"byte_end":199921,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"/     42, 17, 3, 2, 1;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199922,"byte_end":199946,"line_start":92,"line_end":92,"column_start":1,"column_end":25}},{"value":"/     9, 100, 11, 13, 14;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199947,"byte_end":199974,"line_start":93,"line_end":93,"column_start":1,"column_end":28}},{"value":"/     15, 87, 99, 21, 45","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":199975,"byte_end":200001,"line_start":94,"line_end":94,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200002,"byte_end":200008,"line_start":95,"line_end":95,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200009,"byte_end":200012,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ let filtered = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200013,"byte_end":200044,"line_start":97,"line_end":97,"column_start":1,"column_end":32}},{"value":"/     2, 3, 4, 5, 5;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200045,"byte_end":200067,"line_start":98,"line_end":98,"column_start":1,"column_end":23}},{"value":"/     17, 4, 4, 4, 4;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200068,"byte_end":200091,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/     42, 13, 11, 11, 7;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200092,"byte_end":200118,"line_start":100,"line_end":100,"column_start":1,"column_end":27}},{"value":"/     15, 15, 15, 14, 14;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200119,"byte_end":200146,"line_start":101,"line_end":101,"column_start":1,"column_end":28}},{"value":"/     15, 15, 21, 45, 45","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200147,"byte_end":200173,"line_start":102,"line_end":102,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200174,"byte_end":200180,"line_start":103,"line_end":103,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200181,"byte_end":200184,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(median_filter(&image, 2, 1), filtered);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200185,"byte_end":200246,"line_start":105,"line_end":105,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200247,"byte_end":200254,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200255,"byte_end":200262,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":200263,"byte_end":200326,"line_start":108,"line_end":108,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":971},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/sharpen.rs","byte_start":209993,"byte_end":210003,"line_start":10,"line_end":10,"column_start":8,"column_end":18},"name":"sharpen3x3","qualname":"::filter::sharpen::sharpen3x3","value":"pub fn sharpen3x3(&GrayImage) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sharpens a grayscale image by applying a 3x3 approximation to the Laplacian.\n","sig":null,"attributes":[{"value":"/ Sharpens a grayscale image by applying a 3x3 approximation to the Laplacian.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/sharpen.rs","byte_start":209841,"byte_end":209921,"line_start":8,"line_end":8,"column_start":1,"column_end":81}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/sharpen.rs","byte_start":209922,"byte_end":209985,"line_start":9,"line_end":9,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":972},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/sharpen.rs","byte_start":210518,"byte_end":210534,"line_start":21,"line_end":21,"column_start":8,"column_end":24},"name":"sharpen_gaussian","qualname":"::filter::sharpen::sharpen_gaussian","value":"pub fn sharpen_gaussian(&GrayImage, f32, f32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sharpens a grayscale image using a Gaussian as a low-pass filter.","sig":null,"attributes":[{"value":"/ Sharpens a grayscale image using a Gaussian as a low-pass filter.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/sharpen.rs","byte_start":210157,"byte_end":210226,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/sharpen.rs","byte_start":210227,"byte_end":210230,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * `sigma` is the standard deviation of the Gaussian filter used.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/sharpen.rs","byte_start":210231,"byte_end":210299,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ * `amount` controls the level of sharpening. `output = input + amount * edges`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/sharpen.rs","byte_start":210300,"byte_end":210383,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/sharpen.rs","byte_start":210447,"byte_end":210510,"line_start":20,"line_end":20,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":1045},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":164102,"byte_end":164118,"line_start":53,"line_end":53,"column_start":8,"column_end":24},"name":"bilateral_filter","qualname":"::filter::bilateral_filter","value":"pub fn bilateral_filter(&GrayImage, u32, f32, f32) -> Image<Luma<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Denoise 8-bit grayscale image using bilateral filtering.","sig":null,"attributes":[{"value":"/ Denoise 8-bit grayscale image using bilateral filtering.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162605,"byte_end":162665,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162666,"byte_end":162669,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162670,"byte_end":162685,"line_start":23,"line_end":23,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162686,"byte_end":162689,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ * `image` - Grayscale image to be filtered.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162690,"byte_end":162737,"line_start":25,"line_end":25,"column_start":1,"column_end":48}},{"value":"/ * `window_size` - Window size for filtering.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162738,"byte_end":162786,"line_start":26,"line_end":26,"column_start":1,"column_end":49}},{"value":"/ * `sigma_color` - Standard deviation for grayscale distance. A larger value results","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162787,"byte_end":162874,"line_start":27,"line_end":27,"column_start":1,"column_end":88}},{"value":"/     in averaging of pixels with larger grayscale differences.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162875,"byte_end":162940,"line_start":28,"line_end":28,"column_start":1,"column_end":66}},{"value":"/ * `sigma_spatial` - Standard deviation for range distance. A larger value results in","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":162941,"byte_end":163029,"line_start":29,"line_end":29,"column_start":1,"column_end":89}},{"value":"/     averaging of pixels separated by larger distances.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163030,"byte_end":163088,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163089,"byte_end":163092,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This is a denoising filter designed to preserve edges. It averages pixels based on their spatial","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163093,"byte_end":163193,"line_start":32,"line_end":32,"column_start":1,"column_end":101}},{"value":"/ closeness and radiometric similarity [1]. Spatial closeness is measured by the Gaussian function","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163194,"byte_end":163294,"line_start":33,"line_end":33,"column_start":1,"column_end":101}},{"value":"/ of the Euclidean distance between two pixels with user-specified standard deviation","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163295,"byte_end":163382,"line_start":34,"line_end":34,"column_start":1,"column_end":88}},{"value":"/ (`sigma_spatial`). Radiometric similarity is measured by the Gaussian function of the difference","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163383,"byte_end":163483,"line_start":35,"line_end":35,"column_start":1,"column_end":101}},{"value":"/ between two grayscale values with user-specified standard deviation (`sigma_color`).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163484,"byte_end":163572,"line_start":36,"line_end":36,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163573,"byte_end":163576,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # References","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163577,"byte_end":163593,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163594,"byte_end":163597,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/   [1] C. Tomasi and R. Manduchi. \"Bilateral Filtering for Gray and Color","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163598,"byte_end":163674,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/        Images.\" IEEE International Conference on Computer Vision (1998)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163675,"byte_end":163750,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/        839-846. DOI: 10.1109/ICCV.1998.710815","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163751,"byte_end":163800,"line_start":42,"line_end":42,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163801,"byte_end":163804,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163805,"byte_end":163819,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163820,"byte_end":163823,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163824,"byte_end":163831,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use imageproc::filter::bilateral_filter;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163832,"byte_end":163876,"line_start":47,"line_end":47,"column_start":1,"column_end":45}},{"value":"/ use imageproc::utils::gray_bench_image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163877,"byte_end":163920,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"/ let image = gray_bench_image(500, 500);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163921,"byte_end":163964,"line_start":49,"line_end":49,"column_start":1,"column_end":44}},{"value":"/ let filtered = bilateral_filter(&image, 10, 10., 3.);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":163965,"byte_end":164022,"line_start":50,"line_end":50,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":164023,"byte_end":164030,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":164031,"byte_end":164094,"line_start":52,"line_end":52,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":1052},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":169318,"byte_end":169328,"line_start":167,"line_end":167,"column_start":8,"column_end":18},"name":"box_filter","qualname":"::filter::box_filter","value":"pub fn box_filter(&GrayImage, u32, u32) -> Image<Luma<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an 8bpp grayscale image with a kernel of width (2 * `x_radius` + 1)\n and height (2 * `y_radius` + 1) whose entries are equal and\n sum to one. i.e. each output pixel is the unweighted mean of\n a rectangular region surrounding its corresponding input pixel.\n We handle locations where the kernel would extend past the image's\n boundary by treating the image as if its boundary pixels were\n repeated indefinitely.\n","sig":null,"attributes":[{"value":"/ Convolves an 8bpp grayscale image with a kernel of width (2 * `x_radius` + 1)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":168661,"byte_end":168742,"line_start":156,"line_end":156,"column_start":1,"column_end":82}},{"value":"/ and height (2 * `y_radius` + 1) whose entries are equal and","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":168743,"byte_end":168806,"line_start":157,"line_end":157,"column_start":1,"column_end":64}},{"value":"/ sum to one. i.e. each output pixel is the unweighted mean of","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":168807,"byte_end":168871,"line_start":158,"line_end":158,"column_start":1,"column_end":65}},{"value":"/ a rectangular region surrounding its corresponding input pixel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":168872,"byte_end":168939,"line_start":159,"line_end":159,"column_start":1,"column_end":68}},{"value":"/ We handle locations where the kernel would extend past the image's","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":168940,"byte_end":169010,"line_start":160,"line_end":160,"column_start":1,"column_end":71}},{"value":"/ boundary by treating the image as if its boundary pixels were","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":169011,"byte_end":169076,"line_start":161,"line_end":161,"column_start":1,"column_end":66}},{"value":"/ repeated indefinitely.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":169077,"byte_end":169103,"line_start":162,"line_end":162,"column_start":1,"column_end":27}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":169247,"byte_end":169310,"line_start":166,"line_end":166,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1053},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":171080,"byte_end":171086,"line_start":217,"line_end":217,"column_start":12,"column_end":18},"name":"Kernel","qualname":"::filter::Kernel","value":"Kernel {  }","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058}],"decl_id":null,"docs":" A 2D kernel, used to filter images via convolution.\n","sig":null,"attributes":[{"value":"/ A 2D kernel, used to filter images via convolution.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":171013,"byte_end":171068,"line_start":216,"line_end":216,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":171313,"byte_end":171316,"line_start":226,"line_end":226,"column_start":12,"column_end":15},"name":"new","qualname":"<Kernel>::new","value":"pub fn new(&'a [K], u32, u32) -> Kernel","parent":null,"children":[],"decl_id":null,"docs":" Construct a kernel from a slice and its dimensions. The input slice is\n in row-major form.\n","sig":null,"attributes":[{"value":"/ Construct a kernel from a slice and its dimensions. The input slice is","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":171200,"byte_end":171274,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/ in row-major form.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":171279,"byte_end":171301,"line_start":225,"line_end":225,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":171910,"byte_end":171916,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"filter","qualname":"<Kernel>::filter","value":"pub fn filter<P, F, Q>(&Self, &Image<P>, F) -> Image<Q> where P: Pixel,\n<P as Pixel>::Subpixel: ValueInto<K>, Q: Pixel, F: FnMut(&mut Q::Subpixel, K)\n-> ()","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of an image. Intermediate calculations are performed\n at type K, and the results converted to pixel Q via f. Pads by continuity.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of an image. Intermediate calculations are performed","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":171736,"byte_end":171815,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/ at type K, and the results converted to pixel Q via f. Pads by continuity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":171820,"byte_end":171898,"line_start":242,"line_end":242,"column_start":5,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":1069},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174387,"byte_end":174404,"line_start":310,"line_end":310,"column_start":8,"column_end":25},"name":"gaussian_blur_f32","qualname":"::filter::gaussian_blur_f32","value":"pub fn gaussian_blur_f32<P>(&Image<P>, f32) -> Image<P> where P: Pixel,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Blurs an image using a Gaussian of standard deviation sigma.\n The kernel used has type f32 and all intermediate calculations are performed\n at this type.","sig":null,"attributes":[{"value":"/ Blurs an image using a Gaussian of standard deviation sigma.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174031,"byte_end":174095,"line_start":301,"line_end":301,"column_start":1,"column_end":65}},{"value":"/ The kernel used has type f32 and all intermediate calculations are performed","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174096,"byte_end":174176,"line_start":302,"line_end":302,"column_start":1,"column_end":81}},{"value":"/ at this type.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174177,"byte_end":174194,"line_start":303,"line_end":303,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174195,"byte_end":174198,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174199,"byte_end":174211,"line_start":305,"line_end":305,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174212,"byte_end":174215,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ Panics if `sigma <= 0.0`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174216,"byte_end":174245,"line_start":307,"line_end":307,"column_start":1,"column_end":30}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174316,"byte_end":174379,"line_start":309,"line_end":309,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":1071},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174847,"byte_end":174863,"line_start":323,"line_end":323,"column_start":8,"column_end":24},"name":"separable_filter","qualname":"::filter::separable_filter","value":"pub fn separable_filter<P, K>(&Image<P>, &[K], &[K]) -> Image<P> where\nP: Pixel, <P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of view with the outer product of the 1d\n kernels `h_kernel` and `v_kernel`.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of view with the outer product of the 1d","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174669,"byte_end":174736,"line_start":320,"line_end":320,"column_start":1,"column_end":68}},{"value":"/ kernels `h_kernel` and `v_kernel`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174737,"byte_end":174775,"line_start":321,"line_end":321,"column_start":1,"column_end":39}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":174776,"byte_end":174839,"line_start":322,"line_end":322,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":1074},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":175285,"byte_end":175307,"line_start":336,"line_end":336,"column_start":8,"column_end":30},"name":"separable_filter_equal","qualname":"::filter::separable_filter_equal","value":"pub fn separable_filter_equal<P, K>(&Image<P>, &[K]) -> Image<P> where\nP: Pixel, <P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of an image with the outer product of the 1d\n kernel filter with itself.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of an image with the outer product of the 1d","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":175111,"byte_end":175182,"line_start":333,"line_end":333,"column_start":1,"column_end":72}},{"value":"/ kernel filter with itself.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":175183,"byte_end":175213,"line_start":334,"line_end":334,"column_start":1,"column_end":31}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":175214,"byte_end":175277,"line_start":335,"line_end":335,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":1077},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":175757,"byte_end":175766,"line_start":348,"line_end":348,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::filter::filter3x3","value":"pub fn filter3x3<P, K, S>(&Image<P>, &[K]) -> Image<ChannelMap<P, S>> where\nP::Subpixel: ValueInto<K>, S: Clamp<K> + Primitive, P: WithChannel<S>,\nK: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of an image with a 3x3 row-major kernel. Intermediate calculations are\n performed at type K, and the results clamped to subpixel type S. Pads by continuity.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of an image with a 3x3 row-major kernel. Intermediate calculations are","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":175499,"byte_end":175596,"line_start":345,"line_end":345,"column_start":1,"column_end":98}},{"value":"/ performed at type K, and the results clamped to subpixel type S. Pads by continuity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":175597,"byte_end":175685,"line_start":346,"line_end":346,"column_start":1,"column_end":89}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":175686,"byte_end":175749,"line_start":347,"line_end":347,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":1082},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":176278,"byte_end":176295,"line_start":363,"line_end":363,"column_start":8,"column_end":25},"name":"horizontal_filter","qualname":"::filter::horizontal_filter","value":"pub fn horizontal_filter<P, K>(&Image<P>, &[K]) -> Image<P> where P: Pixel,\n<P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns horizontal correlations between an image and a 1d kernel.\n Pads by continuity. Intermediate calculations are performed at\n type K.\n","sig":null,"attributes":[{"value":"/ Returns horizontal correlations between an image and a 1d kernel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":176058,"byte_end":176127,"line_start":359,"line_end":359,"column_start":1,"column_end":70}},{"value":"/ Pads by continuity. Intermediate calculations are performed at","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":176128,"byte_end":176194,"line_start":360,"line_end":360,"column_start":1,"column_end":67}},{"value":"/ type K.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":176195,"byte_end":176206,"line_start":361,"line_end":361,"column_start":1,"column_end":12}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":176207,"byte_end":176270,"line_start":362,"line_end":362,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":1085},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":180004,"byte_end":180019,"line_start":459,"line_end":459,"column_start":8,"column_end":23},"name":"vertical_filter","qualname":"::filter::vertical_filter","value":"pub fn vertical_filter<P, K>(&Image<P>, &[K]) -> Image<P> where P: Pixel,\n<P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns horizontal correlations between an image and a 1d kernel.\n Pads by continuity.\n","sig":null,"attributes":[{"value":"/ Returns horizontal correlations between an image and a 1d kernel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":179839,"byte_end":179908,"line_start":456,"line_end":456,"column_start":1,"column_end":70}},{"value":"/ Pads by continuity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":179909,"byte_end":179932,"line_start":457,"line_end":457,"column_start":1,"column_end":24}},{"value":"must_use = \"the function does not modify the original image\"","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":179933,"byte_end":179996,"line_start":458,"line_end":458,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":1091},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"geometric_transformations","qualname":"::geometric_transformations","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1096},{"krate":0,"index":1099},{"krate":0,"index":1102},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1120},{"krate":0,"index":2304},{"krate":0,"index":2311},{"krate":0,"index":2312},{"krate":0,"index":2314},{"krate":0,"index":2316},{"krate":0,"index":2322},{"krate":0,"index":2323},{"krate":0,"index":2327},{"krate":0,"index":1123},{"krate":0,"index":1154},{"krate":0,"index":1160},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1173},{"krate":0,"index":1175},{"krate":0,"index":1177},{"krate":0,"index":1179},{"krate":0,"index":1181},{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1207},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1229},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":2332},{"krate":0,"index":2339},{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2347},{"krate":0,"index":2348}],"decl_id":null,"docs":" Geometric transformations of images. This includes rotations, translation, and general\n projective transformations.\n","sig":null,"attributes":[{"value":"/ Geometric transformations of images. This includes rotations, translation, and general","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":210867,"byte_end":210957,"line_start":1,"line_end":1,"column_start":1,"column_end":91}},{"value":"/ projective transformations.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":210958,"byte_end":210989,"line_start":2,"line_end":2,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2316},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211965,"byte_end":211975,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"Projection","qualname":"::geometric_transformations::Projection","value":"Projection {  }","parent":null,"children":[{"krate":0,"index":2317},{"krate":0,"index":2319},{"krate":0,"index":2321}],"decl_id":null,"docs":" A 2d projective transformation, stored as a row major 3x3 matrix.","sig":null,"attributes":[{"value":"/ A 2d projective transformation, stored as a row major 3x3 matrix.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211307,"byte_end":211376,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211377,"byte_end":211380,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Transformations combine by pre-multiplication, i.e. applying `P * Q` is equivalent to","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211381,"byte_end":211470,"line_start":21,"line_end":21,"column_start":1,"column_end":90}},{"value":"/ applying `Q` and then applying `P`. For example, the following defines a rotation","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211471,"byte_end":211556,"line_start":22,"line_end":22,"column_start":1,"column_end":86}},{"value":"/ about the point (320.0, 240.0).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211557,"byte_end":211592,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211593,"byte_end":211596,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211597,"byte_end":211604,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use imageproc::geometric_transformations::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211605,"byte_end":211653,"line_start":26,"line_end":26,"column_start":1,"column_end":49}},{"value":"/ use std::f32::consts::PI;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211654,"byte_end":211683,"line_start":27,"line_end":27,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211684,"byte_end":211687,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let (cx, cy) = (320.0, 240.0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211688,"byte_end":211722,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211723,"byte_end":211726,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let c_rotation = Projection::translate(cx, cy)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211727,"byte_end":211777,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/     * Projection::rotate(PI / 6.0)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211778,"byte_end":211816,"line_start":32,"line_end":32,"column_start":1,"column_end":39}},{"value":"/     * Projection::translate(-cx, -cy);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211817,"byte_end":211859,"line_start":33,"line_end":33,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211860,"byte_end":211867,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211868,"byte_end":211871,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See ./examples/projection.rs for more examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":211872,"byte_end":211923,"line_start":36,"line_end":36,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212252,"byte_end":212263,"line_start":48,"line_end":48,"column_start":12,"column_end":23},"name":"from_matrix","qualname":"<Projection>::from_matrix","value":"pub fn from_matrix([f32; ]) -> Option<Projection>","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2d projective transform from a row-major 3x3 matrix in homogeneous coordinates.","sig":null,"attributes":[{"value":"/ Creates a 2d projective transform from a row-major 3x3 matrix in homogeneous coordinates.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212083,"byte_end":212176,"line_start":45,"line_end":45,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212181,"byte_end":212184,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the matrix is not invertible.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212189,"byte_end":212240,"line_start":47,"line_end":47,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212732,"byte_end":212740,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"and_then","qualname":"<Projection>::and_then","value":"pub fn and_then(Self, Projection) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" Combine the transformation with another one. The resulting transformation is equivalent to\n applying this transformation followed by the `other` transformation.\n","sig":null,"attributes":[{"value":"/ Combine the transformation with another one. The resulting transformation is equivalent to","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212549,"byte_end":212643,"line_start":58,"line_end":58,"column_start":5,"column_end":99}},{"value":"/ applying this transformation followed by the `other` transformation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212648,"byte_end":212720,"line_start":59,"line_end":59,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2329},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212877,"byte_end":212886,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"translate","qualname":"<Projection>::translate","value":"pub fn translate(f32, f32) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" A translation by (tx, ty).\n","sig":null,"attributes":[{"value":"/ A translation by (tx, ty).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212814,"byte_end":212844,"line_start":64,"line_end":64,"column_start":5,"column_end":35}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212849,"byte_end":212865,"line_start":65,"line_end":65,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2330},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":213391,"byte_end":213397,"line_start":84,"line_end":84,"column_start":12,"column_end":18},"name":"rotate","qualname":"<Projection>::rotate","value":"pub fn rotate(f32) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" A clockwise rotation around the top-left corner of the image by theta radians.\n","sig":null,"attributes":[{"value":"/ A clockwise rotation around the top-left corner of the image by theta radians.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":213276,"byte_end":213358,"line_start":82,"line_end":82,"column_start":5,"column_end":87}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":213363,"byte_end":213379,"line_start":83,"line_end":83,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2331},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":214068,"byte_end":214073,"line_start":106,"line_end":106,"column_start":12,"column_end":17},"name":"scale","qualname":"<Projection>::scale","value":"pub fn scale(f32, f32) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" An anisotropic scaling (sx, sy).","sig":null,"attributes":[{"value":"/ An anisotropic scaling (sx, sy).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":213816,"byte_end":213852,"line_start":101,"line_end":101,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":213857,"byte_end":213860,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that the `warp` function does not change the size of the input image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":213865,"byte_end":213943,"line_start":103,"line_end":103,"column_start":5,"column_end":83}},{"value":"/ If you want to resize an image then use the `imageops` module in the `image` crate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":213948,"byte_end":214035,"line_start":104,"line_end":104,"column_start":5,"column_end":92}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":214040,"byte_end":214056,"line_start":105,"line_end":105,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":214533,"byte_end":214539,"line_start":123,"line_end":123,"column_start":12,"column_end":18},"name":"invert","qualname":"<Projection>::invert","value":"pub fn invert(Self) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" Inverts the transformation.\n","sig":null,"attributes":[{"value":"/ Inverts the transformation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":214490,"byte_end":214521,"line_start":122,"line_end":122,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":214788,"byte_end":214807,"line_start":132,"line_end":132,"column_start":12,"column_end":31},"name":"from_control_points","qualname":"<Projection>::from_control_points","value":"pub fn from_control_points([(f32, f32); ], [(f32, f32); ])\n-> Option<Projection>","parent":null,"children":[],"decl_id":null,"docs":" Calculates a projection from a set of four control point pairs.\n","sig":null,"attributes":[{"value":"/ Calculates a projection from a set of four control point pairs.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":214709,"byte_end":214776,"line_start":131,"line_end":131,"column_start":5,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1173},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":219461,"byte_end":219480,"line_start":280,"line_end":280,"column_start":8,"column_end":27},"name":"rotate_about_center","qualname":"::geometric_transformations::rotate_about_center","value":"pub fn rotate_about_center<P>(&Image<P>, f32, Interpolation, P) -> Image<P>\nwhere P: Pixel + Send + Sync, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Rotates an image clockwise about its center.\n The output image has the same dimensions as the input. Output pixels\n whose pre-image lies outside the input image are set to `default`.\n","sig":null,"attributes":[{"value":"/ Rotates an image clockwise about its center.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":219261,"byte_end":219309,"line_start":277,"line_end":277,"column_start":1,"column_end":49}},{"value":"/ The output image has the same dimensions as the input. Output pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":219310,"byte_end":219382,"line_start":278,"line_end":278,"column_start":1,"column_end":73}},{"value":"/ whose pre-image lies outside the input image are set to `default`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":219383,"byte_end":219453,"line_start":279,"line_end":279,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":1175},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":220117,"byte_end":220123,"line_start":304,"line_end":304,"column_start":8,"column_end":14},"name":"rotate","qualname":"::geometric_transformations::rotate","value":"pub fn rotate<P>(&Image<P>, (f32, f32), f32, Interpolation, P) -> Image<P>\nwhere P: Pixel + Send + Sync, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Rotates an image clockwise about the provided center by theta radians.\n The output image has the same dimensions as the input. Output pixels\n whose pre-image lies outside the input image are set to `default`.\n","sig":null,"attributes":[{"value":"/ Rotates an image clockwise about the provided center by theta radians.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":219891,"byte_end":219965,"line_start":301,"line_end":301,"column_start":1,"column_end":75}},{"value":"/ The output image has the same dimensions as the input. Output pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":219966,"byte_end":220038,"line_start":302,"line_end":302,"column_start":1,"column_end":73}},{"value":"/ whose pre-image lies outside the input image are set to `default`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":220039,"byte_end":220109,"line_start":303,"line_end":303,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":1177},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":220976,"byte_end":220985,"line_start":327,"line_end":327,"column_start":8,"column_end":17},"name":"translate","qualname":"::geometric_transformations::translate","value":"pub fn translate<P>(&Image<P>, (i32, i32)) -> Image<P> where P: Pixel","parent":null,"children":[],"decl_id":null,"docs":" Translates the input image by t. Note that image coordinates increase from\n top left to bottom right. Output pixels whose pre-image are not in the input\n image are set to the boundary pixel in the input image nearest to their pre-image.\n","sig":null,"attributes":[{"value":"/ Translates the input image by t. Note that image coordinates increase from","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":220593,"byte_end":220671,"line_start":322,"line_end":322,"column_start":1,"column_end":79}},{"value":"/ top left to bottom right. Output pixels whose pre-image are not in the input","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":220672,"byte_end":220752,"line_start":323,"line_end":323,"column_start":1,"column_end":81}},{"value":"/ image are set to the boundary pixel in the input image nearest to their pre-image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":220753,"byte_end":220839,"line_start":324,"line_end":324,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":1179},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":222840,"byte_end":222844,"line_start":377,"line_end":377,"column_start":8,"column_end":12},"name":"warp","qualname":"::geometric_transformations::warp","value":"pub fn warp<P>(&Image<P>, &Projection, Interpolation, P) -> Image<P> where\nP: Pixel + Send + Sync, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Applies a projective transformation to an image.","sig":null,"attributes":[{"value":"/ Applies a projective transformation to an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":222491,"byte_end":222543,"line_start":370,"line_end":370,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":222544,"byte_end":222547,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ The returned image has the same dimensions as `image`. Output pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":222548,"byte_end":222620,"line_start":372,"line_end":372,"column_start":1,"column_end":73}},{"value":"/ whose pre-image lies outside the input image are set to `default`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":222621,"byte_end":222691,"line_start":373,"line_end":373,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":222692,"byte_end":222695,"line_start":374,"line_end":374,"column_start":1,"column_end":4}},{"value":"/ The provided projection defines a mapping from locations in the input image to their","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":222696,"byte_end":222784,"line_start":375,"line_end":375,"column_start":1,"column_end":89}},{"value":"/ corresponding location in the output image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":222785,"byte_end":222832,"line_start":376,"line_end":376,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":1181},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":223439,"byte_end":223448,"line_start":397,"line_end":397,"column_start":8,"column_end":17},"name":"warp_into","qualname":"::geometric_transformations::warp_into","value":"pub fn warp_into<P>(&Image<P>, &Projection, Interpolation, P, &mut Image<P>)\nwhere P: Pixel + Send + Sync, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32> + Sync","parent":null,"children":[],"decl_id":null,"docs":" Applies a projective transformation to an image, writing to a provided output.","sig":null,"attributes":[{"value":"/ Applies a projective transformation to an image, writing to a provided output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":223274,"byte_end":223356,"line_start":394,"line_end":394,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":223357,"byte_end":223360,"line_start":395,"line_end":395,"column_start":1,"column_end":4}},{"value":"/ See the [`warp`](fn.warp.html) documentation for more information.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":223361,"byte_end":223431,"line_start":396,"line_end":396,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":1195},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225293,"byte_end":225302,"line_start":448,"line_end":448,"column_start":8,"column_end":17},"name":"warp_with","qualname":"::geometric_transformations::warp_with","value":"pub fn warp_with<P, F>(&Image<P>, F, Interpolation, P) -> Image<P> where\nF: Fn(f32, f32) -> (f32, f32) + Sync + Send, P: Pixel + Send + Sync,\n<P as Pixel>::Subpixel: Send + Sync, <P as Pixel>::Subpixel: ValueInto<f32> +\nClamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Warps an image using the provided function to define the pre-image of each output pixel.","sig":null,"attributes":[{"value":"/ Warps an image using the provided function to define the pre-image of each output pixel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":224807,"byte_end":224899,"line_start":431,"line_end":431,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":224900,"byte_end":224903,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":224904,"byte_end":224918,"line_start":433,"line_end":433,"column_start":1,"column_end":15}},{"value":"/ Applying a wave pattern.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":224919,"byte_end":224947,"line_start":434,"line_end":434,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":224948,"byte_end":224955,"line_start":435,"line_end":435,"column_start":1,"column_end":8}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":224956,"byte_end":224991,"line_start":436,"line_end":436,"column_start":1,"column_end":36}},{"value":"/ use imageproc::utils::gray_bench_image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":224992,"byte_end":225035,"line_start":437,"line_end":437,"column_start":1,"column_end":44}},{"value":"/ use imageproc::geometric_transformations::*;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225036,"byte_end":225084,"line_start":438,"line_end":438,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225085,"byte_end":225088,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ let image = gray_bench_image(300, 300);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225089,"byte_end":225132,"line_start":440,"line_end":440,"column_start":1,"column_end":44}},{"value":"/ let warped = warp_with(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225133,"byte_end":225160,"line_start":441,"line_end":441,"column_start":1,"column_end":28}},{"value":"/     &image,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225161,"byte_end":225176,"line_start":442,"line_end":442,"column_start":1,"column_end":16}},{"value":"/     |x, y| (x, y + (x / 30.0).sin()),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225177,"byte_end":225218,"line_start":443,"line_end":443,"column_start":1,"column_end":42}},{"value":"/     Interpolation::Nearest,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225219,"byte_end":225250,"line_start":444,"line_end":444,"column_start":1,"column_end":32}},{"value":"/     Luma([0u8])","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225251,"byte_end":225270,"line_start":445,"line_end":445,"column_start":1,"column_end":20}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225271,"byte_end":225277,"line_start":446,"line_end":446,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225278,"byte_end":225285,"line_start":447,"line_end":447,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1198},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225998,"byte_end":226012,"line_start":470,"line_end":470,"column_start":8,"column_end":22},"name":"warp_into_with","qualname":"::geometric_transformations::warp_into_with","value":"pub fn warp_into_with<P, F>(&Image<P>, F, Interpolation, P, &mut Image<P>)\nwhere F: Fn(f32, f32) -> (f32, f32) + Send + Sync, P: Pixel + Send + Sync,\n<P as Pixel>::Subpixel: Send + Sync, <P as Pixel>::Subpixel: ValueInto<f32> +\nClamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Warps an image using the provided function to define the pre-image of each output pixel,\n writing into a preallocated output.","sig":null,"attributes":[{"value":"/ Warps an image using the provided function to define the pre-image of each output pixel,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225773,"byte_end":225865,"line_start":466,"line_end":466,"column_start":1,"column_end":93}},{"value":"/ writing into a preallocated output.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225866,"byte_end":225905,"line_start":467,"line_end":467,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225906,"byte_end":225909,"line_start":468,"line_end":468,"column_start":1,"column_end":4}},{"value":"/ See the [`warp_with`](fn.warp_with.html) documentation for more information.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":225910,"byte_end":225990,"line_start":469,"line_end":469,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2333},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":233867,"byte_end":233874,"line_start":729,"line_end":729,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::geometric_transformations::Interpolation::Nearest","value":"Interpolation::Nearest","parent":{"krate":0,"index":2332},"children":[],"decl_id":null,"docs":" Choose the nearest pixel to the pre-image of the\n output pixel.\n","sig":null,"attributes":[{"value":"/ Choose the nearest pixel to the pre-image of the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":233788,"byte_end":233840,"line_start":727,"line_end":727,"column_start":5,"column_end":57}},{"value":"/ output pixel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":233845,"byte_end":233862,"line_start":728,"line_end":728,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2335},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":233989,"byte_end":233997,"line_start":732,"line_end":732,"column_start":5,"column_end":13},"name":"Bilinear","qualname":"::geometric_transformations::Interpolation::Bilinear","value":"Interpolation::Bilinear","parent":{"krate":0,"index":2332},"children":[],"decl_id":null,"docs":" Bilinearly interpolate between the four pixels\n closest to the pre-image of the output pixel.\n","sig":null,"attributes":[{"value":"/ Bilinearly interpolate between the four pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":233880,"byte_end":233930,"line_start":730,"line_end":730,"column_start":5,"column_end":55}},{"value":"/ closest to the pre-image of the output pixel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":233935,"byte_end":233984,"line_start":731,"line_end":731,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2337},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":234111,"byte_end":234118,"line_start":735,"line_end":735,"column_start":5,"column_end":12},"name":"Bicubic","qualname":"::geometric_transformations::Interpolation::Bicubic","value":"Interpolation::Bicubic","parent":{"krate":0,"index":2332},"children":[],"decl_id":null,"docs":" Bicubicly interpolate between the four pixels\n closest to the pre-image of the output pixel.\n","sig":null,"attributes":[{"value":"/ Bicubicly interpolate between the four pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":234003,"byte_end":234052,"line_start":733,"line_end":733,"column_start":5,"column_end":54}},{"value":"/ closest to the pre-image of the output pixel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":234057,"byte_end":234106,"line_start":734,"line_end":734,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":2332},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":233768,"byte_end":233781,"line_start":726,"line_end":726,"column_start":10,"column_end":23},"name":"Interpolation","qualname":"::geometric_transformations::Interpolation","value":"pub enum Interpolation { Nearest, Bilinear, Bicubic, }","parent":null,"children":[{"krate":0,"index":2333},{"krate":0,"index":2335},{"krate":0,"index":2337}],"decl_id":null,"docs":" How to handle pixels whose pre-image lies between input pixels.\n","sig":null,"attributes":[{"value":"/ How to handle pixels whose pre-image lies between input pixels.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":233646,"byte_end":233713,"line_start":724,"line_end":724,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":1238},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"geometry","qualname":"::geometry","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","parent":null,"children":[{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1243},{"krate":0,"index":1246},{"krate":0,"index":1249},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1276},{"krate":0,"index":1278},{"krate":0,"index":1282},{"krate":0,"index":1289},{"krate":0,"index":2350},{"krate":0,"index":2357},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2362},{"krate":0,"index":2363},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":1292}],"decl_id":null,"docs":" Computational geometry functions, for example finding convex hulls.\n","sig":null,"attributes":[{"value":"/ Computational geometry functions, for example finding convex hulls.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":248181,"byte_end":248252,"line_start":1,"line_end":1,"column_start":1,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1273},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":248562,"byte_end":248572,"line_start":10,"line_end":10,"column_start":8,"column_end":18},"name":"arc_length","qualname":"::geometry::arc_length","value":"pub fn arc_length<T>(&[Point<T>], bool) -> f64 where T: NumCast + Copy","parent":null,"children":[],"decl_id":null,"docs":" Computes the length of an arc. If `closed` is set to `true` then the distance\n between the last and the first point is included in the total length.\n","sig":null,"attributes":[{"value":"/ Computes the length of an arc. If `closed` is set to `true` then the distance","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":248399,"byte_end":248480,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/ between the last and the first point is included in the total length.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":248481,"byte_end":248554,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1276},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":249012,"byte_end":249034,"line_start":26,"line_end":26,"column_start":8,"column_end":30},"name":"approximate_polygon_dp","qualname":"::geometry::approximate_polygon_dp","value":"pub fn approximate_polygon_dp<T>(&[Point<T>], f64, bool) -> Vec<Point<T>>\nwhere T: NumCast + Copy","parent":null,"children":[],"decl_id":null,"docs":" Approximates a polygon using the [Douglas–Peucker algorithm].","sig":null,"attributes":[{"value":"/ Approximates a polygon using the [Douglas–Peucker algorithm].","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":248836,"byte_end":248903,"line_start":23,"line_end":23,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":248904,"byte_end":248907,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [Douglas–Peucker algorithm]: https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":248908,"byte_end":249004,"line_start":25,"line_end":25,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":1278},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":250428,"byte_end":250441,"line_start":74,"line_end":74,"column_start":8,"column_end":21},"name":"min_area_rect","qualname":"::geometry::min_area_rect","value":"pub fn min_area_rect<T>(&[Point<T>]) -> [Point<T>; ] where T: NumCast + Copy +\nOrd","parent":null,"children":[],"decl_id":null,"docs":" Finds the rectangle of least area that includes all input points. This rectangle need not be axis-aligned.","sig":null,"attributes":[{"value":"/ Finds the rectangle of least area that includes all input points. This rectangle need not be axis-aligned.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":250199,"byte_end":250309,"line_start":71,"line_end":71,"column_start":1,"column_end":111}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":250310,"byte_end":250313,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ The returned points are the [top left, top right, bottom right, bottom left] points of this rectangle.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":250314,"byte_end":250420,"line_start":73,"line_end":73,"column_start":1,"column_end":107}}]},{"kind":"Function","id":{"krate":0,"index":1289},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":253326,"byte_end":253337,"line_start":164,"line_end":164,"column_start":8,"column_end":19},"name":"convex_hull","qualname":"::geometry::convex_hull","value":"pub fn convex_hull<T>(&[Point<T>]) -> Vec<Point<T>> where T: NumCast + Copy +\nOrd","parent":null,"children":[],"decl_id":null,"docs":" Finds the convex hull of a set of points, using the [Graham scan algorithm].","sig":null,"attributes":[{"value":"/ Finds the convex hull of a set of points, using the [Graham scan algorithm].","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":253163,"byte_end":253243,"line_start":161,"line_end":161,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":253244,"byte_end":253247,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ [Graham scan algorithm]: https://en.wikipedia.org/wiki/Graham_scan","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometry.rs","byte_start":253248,"byte_end":253318,"line_start":163,"line_end":163,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1293},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gradients","qualname":"::gradients","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","parent":null,"children":[{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1298},{"krate":0,"index":1301},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1308},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1315},{"krate":0,"index":1318},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1324},{"krate":0,"index":1327},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2372},{"krate":0,"index":2374},{"krate":0,"index":2376},{"krate":0,"index":2378},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1350}],"decl_id":null,"docs":" Functions for computing gradients of image intensities.\n","sig":null,"attributes":[{"value":"/ Functions for computing gradients of image intensities.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":258915,"byte_end":258974,"line_start":1,"line_end":1,"column_start":1,"column_end":60}}]},{"kind":"Static","id":{"krate":0,"index":2368},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259339,"byte_end":259353,"line_start":13,"line_end":13,"column_start":12,"column_end":26},"name":"VERTICAL_SOBEL","qualname":"::gradients::VERTICAL_SOBEL","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Sobel filter for detecting vertical gradients.","sig":null,"attributes":[{"value":"/ Sobel filter for detecting vertical gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259187,"byte_end":259237,"line_start":9,"line_end":9,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259238,"byte_end":259241,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Used by the [`vertical_sobel`](fn.vertical_sobel.html) function.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259242,"byte_end":259310,"line_start":11,"line_end":11,"column_start":1,"column_end":69}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259311,"byte_end":259327,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":2370},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259576,"byte_end":259592,"line_start":22,"line_end":22,"column_start":12,"column_end":28},"name":"HORIZONTAL_SOBEL","qualname":"::gradients::HORIZONTAL_SOBEL","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Sobel filter for detecting horizontal gradients.","sig":null,"attributes":[{"value":"/ Sobel filter for detecting horizontal gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259418,"byte_end":259470,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259471,"byte_end":259474,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Used by the [`horizontal_sobel`](fn.horizontal_sobel.html) function.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259475,"byte_end":259547,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259548,"byte_end":259564,"line_start":21,"line_end":21,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":2372},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259806,"byte_end":259821,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"VERTICAL_SCHARR","qualname":"::gradients::VERTICAL_SCHARR","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Scharr filter for detecting vertical gradients.","sig":null,"attributes":[{"value":"/ Scharr filter for detecting vertical gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259651,"byte_end":259702,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259703,"byte_end":259706,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Used by the [`vertical_scharr`](fn.vertical_scharr.html) function.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259707,"byte_end":259777,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259778,"byte_end":259794,"line_start":30,"line_end":30,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":2374},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260053,"byte_end":260070,"line_start":40,"line_end":40,"column_start":12,"column_end":29},"name":"HORIZONTAL_SCHARR","qualname":"::gradients::HORIZONTAL_SCHARR","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Scharr filter for detecting horizontal gradients.","sig":null,"attributes":[{"value":"/ Scharr filter for detecting horizontal gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259892,"byte_end":259945,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259946,"byte_end":259949,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Used by the [`horizontal_scharr`](fn.horizontal_scharr.html) function.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":259950,"byte_end":260024,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260025,"byte_end":260041,"line_start":39,"line_end":39,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":2376},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260299,"byte_end":260315,"line_start":49,"line_end":49,"column_start":12,"column_end":28},"name":"VERTICAL_PREWITT","qualname":"::gradients::VERTICAL_PREWITT","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Prewitt filter for detecting vertical gradients.","sig":null,"attributes":[{"value":"/ Prewitt filter for detecting vertical gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260141,"byte_end":260193,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260194,"byte_end":260197,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Used by the [`vertical_prewitt`](fn.vertical_prewitt.html) function.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260198,"byte_end":260270,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260271,"byte_end":260287,"line_start":48,"line_end":48,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":2378},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260544,"byte_end":260562,"line_start":58,"line_end":58,"column_start":12,"column_end":30},"name":"HORIZONTAL_PREWITT","qualname":"::gradients::HORIZONTAL_PREWITT","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Prewitt filter for detecting horizontal gradients.","sig":null,"attributes":[{"value":"/ Prewitt filter for detecting horizontal gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260380,"byte_end":260434,"line_start":54,"line_end":54,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260435,"byte_end":260438,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Used by the [`horizontal_prewitt`](fn.horizontal_prewitt.html) function.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260439,"byte_end":260515,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"rustfmt::skip","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260516,"byte_end":260532,"line_start":57,"line_end":57,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":1330},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260754,"byte_end":260770,"line_start":65,"line_end":65,"column_start":8,"column_end":24},"name":"horizontal_sobel","qualname":"::gradients::horizontal_sobel","value":"pub fn horizontal_sobel(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`HORIZONTAL_SOBEL`](static.HORIZONTAL_SOBEL.html)\n kernel to detect horizontal gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`HORIZONTAL_SOBEL`](static.HORIZONTAL_SOBEL.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260621,"byte_end":260703,"line_start":63,"line_end":63,"column_start":1,"column_end":83}},{"value":"/ kernel to detect horizontal gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260704,"byte_end":260746,"line_start":64,"line_end":64,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":1331},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260982,"byte_end":260996,"line_start":71,"line_end":71,"column_start":8,"column_end":22},"name":"vertical_sobel","qualname":"::gradients::vertical_sobel","value":"pub fn vertical_sobel(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`VERTICAL_SOBEL`](static.VERTICAL_SOBEL.html)\n kernel to detect vertical gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`VERTICAL_SOBEL`](static.VERTICAL_SOBEL.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260855,"byte_end":260933,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ kernel to detect vertical gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":260934,"byte_end":260974,"line_start":70,"line_end":70,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1332},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261214,"byte_end":261231,"line_start":77,"line_end":77,"column_start":8,"column_end":25},"name":"horizontal_scharr","qualname":"::gradients::horizontal_scharr","value":"pub fn horizontal_scharr(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`HORIZONTAL_SCHARR`](static.HORIZONTAL_SCHARR.html)\n kernel to detect horizontal gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`HORIZONTAL_SCHARR`](static.HORIZONTAL_SCHARR.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261079,"byte_end":261163,"line_start":75,"line_end":75,"column_start":1,"column_end":85}},{"value":"/ kernel to detect horizontal gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261164,"byte_end":261206,"line_start":76,"line_end":76,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":1333},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261446,"byte_end":261461,"line_start":83,"line_end":83,"column_start":8,"column_end":23},"name":"vertical_scharr","qualname":"::gradients::vertical_scharr","value":"pub fn vertical_scharr(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`VERTICAL_SCHARR`](static.VERTICAL_SCHARR.html)\n kernel to detect vertical gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`VERTICAL_SCHARR`](static.VERTICAL_SCHARR.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261317,"byte_end":261397,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/ kernel to detect vertical gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261398,"byte_end":261438,"line_start":82,"line_end":82,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1334},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261682,"byte_end":261700,"line_start":89,"line_end":89,"column_start":8,"column_end":26},"name":"horizontal_prewitt","qualname":"::gradients::horizontal_prewitt","value":"pub fn horizontal_prewitt(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`HORIZONTAL_PREWITT`](static.HORIZONTAL_PREWITT.html)\n kernel to detect horizontal gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`HORIZONTAL_PREWITT`](static.HORIZONTAL_PREWITT.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261545,"byte_end":261631,"line_start":87,"line_end":87,"column_start":1,"column_end":87}},{"value":"/ kernel to detect horizontal gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261632,"byte_end":261674,"line_start":88,"line_end":88,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":1335},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261918,"byte_end":261934,"line_start":95,"line_end":95,"column_start":8,"column_end":24},"name":"vertical_prewitt","qualname":"::gradients::vertical_prewitt","value":"pub fn vertical_prewitt(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`VERTICAL_PREWITT`](static.VERTICAL_PREWITT.html)\n kernel to detect vertical gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`VERTICAL_PREWITT`](static.VERTICAL_PREWITT.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261787,"byte_end":261869,"line_start":93,"line_end":93,"column_start":1,"column_end":83}},{"value":"/ kernel to detect vertical gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":261870,"byte_end":261910,"line_start":94,"line_end":94,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1336},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262099,"byte_end":262114,"line_start":100,"line_end":100,"column_start":8,"column_end":23},"name":"sobel_gradients","qualname":"::gradients::sobel_gradients","value":"pub fn sobel_gradients(&GrayImage) -> Image<Luma<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the magnitudes of gradients in an image using Sobel filters.\n","sig":null,"attributes":[{"value":"/ Returns the magnitudes of gradients in an image using Sobel filters.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262019,"byte_end":262091,"line_start":99,"line_end":99,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":1338},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":264033,"byte_end":264051,"line_start":170,"line_end":170,"column_start":8,"column_end":26},"name":"sobel_gradient_map","qualname":"::gradients::sobel_gradient_map","value":"pub fn sobel_gradient_map<P, F, Q>(&Image<P>, F) -> Image<Q> where\nP: Pixel<Subpixel = u8> + WithChannel<u16> + WithChannel<i16>, Q: Pixel,\nChannelMap<P, u16>: HasBlack, F: Fn(ChannelMap<P, u16>) -> Q","parent":null,"children":[],"decl_id":null,"docs":" Computes per-channel gradients using Sobel filters and calls `f`\n to compute each output pixel.","sig":null,"attributes":[{"value":"/ Computes per-channel gradients using Sobel filters and calls `f`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262223,"byte_end":262291,"line_start":104,"line_end":104,"column_start":1,"column_end":69}},{"value":"/ to compute each output pixel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262292,"byte_end":262325,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262326,"byte_end":262329,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262330,"byte_end":262344,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262345,"byte_end":262352,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262353,"byte_end":262378,"line_start":109,"line_end":109,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262379,"byte_end":262397,"line_start":110,"line_end":110,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262398,"byte_end":262427,"line_start":111,"line_end":111,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262428,"byte_end":262445,"line_start":112,"line_end":112,"column_start":1,"column_end":18}},{"value":"/ use imageproc::gradients::{sobel_gradient_map};","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262446,"byte_end":262497,"line_start":113,"line_end":113,"column_start":1,"column_end":52}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262498,"byte_end":262518,"line_start":114,"line_end":114,"column_start":1,"column_end":21}},{"value":"/ use std::cmp;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262519,"byte_end":262536,"line_start":115,"line_end":115,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262537,"byte_end":262540,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ // A shallow horizontal gradient in the red","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262541,"byte_end":262588,"line_start":117,"line_end":117,"column_start":1,"column_end":48}},{"value":"/ // channel, a steeper vertical gradient in the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262589,"byte_end":262639,"line_start":118,"line_end":118,"column_start":1,"column_end":51}},{"value":"/ // blue channel, constant in the green channel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262640,"byte_end":262691,"line_start":119,"line_end":119,"column_start":1,"column_end":52}},{"value":"/ let input = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262692,"byte_end":262719,"line_start":120,"line_end":120,"column_start":1,"column_end":28}},{"value":"/     [0, 5, 0], [1, 5, 0], [2, 5, 0];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262720,"byte_end":262760,"line_start":121,"line_end":121,"column_start":1,"column_end":41}},{"value":"/     [0, 5, 2], [1, 5, 2], [2, 5, 2];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262761,"byte_end":262801,"line_start":122,"line_end":122,"column_start":1,"column_end":41}},{"value":"/     [0, 5, 4], [1, 5, 4], [2, 5, 4]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262802,"byte_end":262841,"line_start":123,"line_end":123,"column_start":1,"column_end":40}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262842,"byte_end":262848,"line_start":124,"line_end":124,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262849,"byte_end":262852,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ // Computing independent per-channel gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262853,"byte_end":262904,"line_start":126,"line_end":126,"column_start":1,"column_end":52}},{"value":"/ let channel_gradient = rgb_image!(type: u16,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262905,"byte_end":262953,"line_start":127,"line_end":127,"column_start":1,"column_end":49}},{"value":"/     [ 4,  0,  8], [ 8,  0,  8], [ 4,  0,  8];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":262954,"byte_end":263003,"line_start":128,"line_end":128,"column_start":1,"column_end":50}},{"value":"/     [ 4,  0, 16], [ 8,  0, 16], [ 4,  0, 16];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263004,"byte_end":263053,"line_start":129,"line_end":129,"column_start":1,"column_end":50}},{"value":"/     [ 4,  0,  8], [ 8,  0,  8], [ 4,  0,  8]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263054,"byte_end":263102,"line_start":130,"line_end":130,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263103,"byte_end":263109,"line_start":131,"line_end":131,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263110,"byte_end":263113,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263114,"byte_end":263136,"line_start":133,"line_end":133,"column_start":1,"column_end":23}},{"value":"/     sobel_gradient_map(&input, |p| p),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263137,"byte_end":263179,"line_start":134,"line_end":134,"column_start":1,"column_end":43}},{"value":"/     channel_gradient","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263180,"byte_end":263204,"line_start":135,"line_end":135,"column_start":1,"column_end":25}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263205,"byte_end":263211,"line_start":136,"line_end":136,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263212,"byte_end":263215,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ // Defining the gradient of an RGB image to be the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263216,"byte_end":263270,"line_start":138,"line_end":138,"column_start":1,"column_end":55}},{"value":"/ // mean of its per-channel gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263271,"byte_end":263312,"line_start":139,"line_end":139,"column_start":1,"column_end":42}},{"value":"/ let mean_gradient = gray_image!(type: u16,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263313,"byte_end":263359,"line_start":140,"line_end":140,"column_start":1,"column_end":47}},{"value":"/     4, 5, 4;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263360,"byte_end":263376,"line_start":141,"line_end":141,"column_start":1,"column_end":17}},{"value":"/     6, 8, 6;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263377,"byte_end":263393,"line_start":142,"line_end":142,"column_start":1,"column_end":17}},{"value":"/     4, 5, 4","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263394,"byte_end":263409,"line_start":143,"line_end":143,"column_start":1,"column_end":16}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263410,"byte_end":263416,"line_start":144,"line_end":144,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263417,"byte_end":263420,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263421,"byte_end":263443,"line_start":146,"line_end":146,"column_start":1,"column_end":23}},{"value":"/     sobel_gradient_map(&input, |p| {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263444,"byte_end":263484,"line_start":147,"line_end":147,"column_start":1,"column_end":41}},{"value":"/         let mean = (p[0] + p[1] + p[2]) / 3;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263485,"byte_end":263533,"line_start":148,"line_end":148,"column_start":1,"column_end":49}},{"value":"/         Luma([mean])","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263534,"byte_end":263558,"line_start":149,"line_end":149,"column_start":1,"column_end":25}},{"value":"/     }),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263559,"byte_end":263570,"line_start":150,"line_end":150,"column_start":1,"column_end":12}},{"value":"/     mean_gradient","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263571,"byte_end":263592,"line_start":151,"line_end":151,"column_start":1,"column_end":22}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263593,"byte_end":263599,"line_start":152,"line_end":152,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263600,"byte_end":263603,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ // Defining the gradient of an RGB image to be the pixelwise","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263604,"byte_end":263668,"line_start":154,"line_end":154,"column_start":1,"column_end":65}},{"value":"/ // maximum of its per-channel gradients.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263669,"byte_end":263713,"line_start":155,"line_end":155,"column_start":1,"column_end":45}},{"value":"/ let max_gradient = gray_image!(type: u16,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263714,"byte_end":263759,"line_start":156,"line_end":156,"column_start":1,"column_end":46}},{"value":"/      8,  8,  8;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263760,"byte_end":263779,"line_start":157,"line_end":157,"column_start":1,"column_end":20}},{"value":"/     16, 16, 16;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263780,"byte_end":263799,"line_start":158,"line_end":158,"column_start":1,"column_end":20}},{"value":"/      8,  8,  8","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263800,"byte_end":263818,"line_start":159,"line_end":159,"column_start":1,"column_end":19}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263819,"byte_end":263825,"line_start":160,"line_end":160,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263826,"byte_end":263829,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263830,"byte_end":263852,"line_start":162,"line_end":162,"column_start":1,"column_end":23}},{"value":"/     sobel_gradient_map(&input, |p| {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263853,"byte_end":263893,"line_start":163,"line_end":163,"column_start":1,"column_end":41}},{"value":"/         let max = cmp::max(cmp::max(p[0], p[1]), p[2]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263894,"byte_end":263953,"line_start":164,"line_end":164,"column_start":1,"column_end":60}},{"value":"/         Luma([max])","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263954,"byte_end":263977,"line_start":165,"line_end":165,"column_start":1,"column_end":24}},{"value":"/     }),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263978,"byte_end":263989,"line_start":166,"line_end":166,"column_start":1,"column_end":12}},{"value":"/     max_gradient","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":263990,"byte_end":264010,"line_start":167,"line_end":167,"column_start":1,"column_end":21}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":264011,"byte_end":264017,"line_start":168,"line_end":168,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":264018,"byte_end":264025,"line_start":169,"line_end":169,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1342},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":264401,"byte_end":264418,"line_start":181,"line_end":181,"column_start":8,"column_end":25},"name":"prewitt_gradients","qualname":"::gradients::prewitt_gradients","value":"pub fn prewitt_gradients(&GrayImage) -> Image<Luma<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the magnitudes of gradients in an image using Prewitt filters.\n","sig":null,"attributes":[{"value":"/ Returns the magnitudes of gradients in an image using Prewitt filters.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/gradients.rs","byte_start":264319,"byte_end":264393,"line_start":180,"line_end":180,"column_start":1,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":1351},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"haar","qualname":"::haar","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1356},{"krate":0,"index":1359},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1366},{"krate":0,"index":1369},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1375},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1381},{"krate":0,"index":2380},{"krate":0,"index":2386},{"krate":0,"index":2387},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2396},{"krate":0,"index":2398},{"krate":0,"index":2403},{"krate":0,"index":2404},{"krate":0,"index":2406},{"krate":0,"index":2407},{"krate":0,"index":2409},{"krate":0,"index":2410},{"krate":0,"index":2412},{"krate":0,"index":2414},{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2428},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2434},{"krate":0,"index":2435},{"krate":0,"index":2437},{"krate":0,"index":1384},{"krate":0,"index":1386},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1397},{"krate":0,"index":2439},{"krate":0,"index":2442},{"krate":0,"index":2443},{"krate":0,"index":2445},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2452},{"krate":0,"index":2453},{"krate":0,"index":2455},{"krate":0,"index":2457},{"krate":0,"index":2459},{"krate":0,"index":2461},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2467},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2477},{"krate":0,"index":2479},{"krate":0,"index":2481},{"krate":0,"index":2483},{"krate":0,"index":2488},{"krate":0,"index":2490},{"krate":0,"index":2493},{"krate":0,"index":2497},{"krate":0,"index":2499},{"krate":0,"index":2503},{"krate":0,"index":2505},{"krate":0,"index":2508},{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1409}],"decl_id":null,"docs":" Functions for creating and evaluating [Haar-like features].","sig":null,"attributes":[{"value":"/ Functions for creating and evaluating [Haar-like features].","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":270369,"byte_end":270432,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":270433,"byte_end":270436,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [Haar-like features]: https://en.wikipedia.org/wiki/Haar-like_features","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":270437,"byte_end":270511,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":2380},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":270869,"byte_end":270880,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"HaarFeature","qualname":"::haar::HaarFeature","value":"HaarFeature {  }","parent":null,"children":[{"krate":0,"index":2381},{"krate":0,"index":2382},{"krate":0,"index":2383},{"krate":0,"index":2384},{"krate":0,"index":2385}],"decl_id":null,"docs":" A [Haar-like feature].","sig":null,"attributes":[{"value":"/ A [Haar-like feature].","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":270708,"byte_end":270734,"line_start":11,"line_end":11,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":270735,"byte_end":270738,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [Haar-like feature]: https://en.wikipedia.org/wiki/Haar-like_features","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":270739,"byte_end":270812,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2415},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271819,"byte_end":271838,"line_start":44,"line_end":44,"column_start":5,"column_end":24},"name":"TwoRegionHorizontal","qualname":"::haar::HaarFeatureType::TwoRegionHorizontal","value":"HaarFeatureType::TwoRegionHorizontal","parent":{"krate":0,"index":2414},"children":[],"decl_id":null,"docs":" Two horizontally-adjacent regions of equal width.\n <pre>\n      -----------\n     |  *  |  &  |\n      -----------\n </pre>\n","sig":null,"attributes":[{"value":"/ Two horizontally-adjacent regions of equal width.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271656,"byte_end":271709,"line_start":38,"line_end":38,"column_start":5,"column_end":58}},{"value":"/ <pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271714,"byte_end":271723,"line_start":39,"line_end":39,"column_start":5,"column_end":14}},{"value":"/      -----------","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271728,"byte_end":271748,"line_start":40,"line_end":40,"column_start":5,"column_end":25}},{"value":"/     |  *  |  &  |","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271753,"byte_end":271774,"line_start":41,"line_end":41,"column_start":5,"column_end":26}},{"value":"/      -----------","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271779,"byte_end":271799,"line_start":42,"line_end":42,"column_start":5,"column_end":25}},{"value":"/ </pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271804,"byte_end":271814,"line_start":43,"line_end":43,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2417},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272027,"byte_end":272048,"line_start":51,"line_end":51,"column_start":5,"column_end":26},"name":"ThreeRegionHorizontal","qualname":"::haar::HaarFeatureType::ThreeRegionHorizontal","value":"HaarFeatureType::ThreeRegionHorizontal","parent":{"krate":0,"index":2414},"children":[],"decl_id":null,"docs":" Three horizontally-adjacent regions of equal width.\n <pre>\n      -----------------\n     |  *  |  &  |  *  |\n      -----------------\n </pre>\n","sig":null,"attributes":[{"value":"/ Three horizontally-adjacent regions of equal width.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271844,"byte_end":271899,"line_start":45,"line_end":45,"column_start":5,"column_end":60}},{"value":"/ <pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271904,"byte_end":271913,"line_start":46,"line_end":46,"column_start":5,"column_end":14}},{"value":"/      -----------------","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271918,"byte_end":271944,"line_start":47,"line_end":47,"column_start":5,"column_end":31}},{"value":"/     |  *  |  &  |  *  |","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271949,"byte_end":271976,"line_start":48,"line_end":48,"column_start":5,"column_end":32}},{"value":"/      -----------------","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271981,"byte_end":272007,"line_start":49,"line_end":49,"column_start":5,"column_end":31}},{"value":"/ </pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272012,"byte_end":272022,"line_start":50,"line_end":50,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2419},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272237,"byte_end":272254,"line_start":60,"line_end":60,"column_start":5,"column_end":22},"name":"TwoRegionVertical","qualname":"::haar::HaarFeatureType::TwoRegionVertical","value":"HaarFeatureType::TwoRegionVertical","parent":{"krate":0,"index":2414},"children":[],"decl_id":null,"docs":" Two vertically-adjacent regions of equal height.\n <pre>\n      -----\n     |  *  |\n      -----\n     |  &  |\n      -----\n </pre>\n","sig":null,"attributes":[{"value":"/ Two vertically-adjacent regions of equal height.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272054,"byte_end":272106,"line_start":52,"line_end":52,"column_start":5,"column_end":57}},{"value":"/ <pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272111,"byte_end":272120,"line_start":53,"line_end":53,"column_start":5,"column_end":14}},{"value":"/      -----","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272125,"byte_end":272139,"line_start":54,"line_end":54,"column_start":5,"column_end":19}},{"value":"/     |  *  |","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272144,"byte_end":272159,"line_start":55,"line_end":55,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272164,"byte_end":272178,"line_start":56,"line_end":56,"column_start":5,"column_end":19}},{"value":"/     |  &  |","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272183,"byte_end":272198,"line_start":57,"line_end":57,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272203,"byte_end":272217,"line_start":58,"line_end":58,"column_start":5,"column_end":19}},{"value":"/ </pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272222,"byte_end":272232,"line_start":59,"line_end":59,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2421},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272484,"byte_end":272503,"line_start":71,"line_end":71,"column_start":5,"column_end":24},"name":"ThreeRegionVertical","qualname":"::haar::HaarFeatureType::ThreeRegionVertical","value":"HaarFeatureType::ThreeRegionVertical","parent":{"krate":0,"index":2414},"children":[],"decl_id":null,"docs":" Three vertically-adjacent regions of equal height.\n <pre>\n      -----\n     |  *  |\n      -----\n     |  &  |\n      -----\n     |  *  |\n      -----\n </pre>\n","sig":null,"attributes":[{"value":"/ Three vertically-adjacent regions of equal height.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272260,"byte_end":272314,"line_start":61,"line_end":61,"column_start":5,"column_end":59}},{"value":"/ <pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272319,"byte_end":272328,"line_start":62,"line_end":62,"column_start":5,"column_end":14}},{"value":"/      -----","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272333,"byte_end":272347,"line_start":63,"line_end":63,"column_start":5,"column_end":19}},{"value":"/     |  *  |","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272352,"byte_end":272367,"line_start":64,"line_end":64,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272372,"byte_end":272386,"line_start":65,"line_end":65,"column_start":5,"column_end":19}},{"value":"/     |  &  |","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272391,"byte_end":272406,"line_start":66,"line_end":66,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272411,"byte_end":272425,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/     |  *  |","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272430,"byte_end":272445,"line_start":68,"line_end":68,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272450,"byte_end":272464,"line_start":69,"line_end":69,"column_start":5,"column_end":19}},{"value":"/ </pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272469,"byte_end":272479,"line_start":70,"line_end":70,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2423},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272794,"byte_end":272804,"line_start":81,"line_end":81,"column_start":5,"column_end":15},"name":"FourRegion","qualname":"::haar::HaarFeatureType::FourRegion","value":"HaarFeatureType::FourRegion","parent":{"krate":0,"index":2414},"children":[],"decl_id":null,"docs":" Four regions arranged in a two-by-two grid. The two columns\n have equal width and the two rows have equal height.\n <pre>\n      -----------\n     |  *  |  &  |\n      -----------\n     |  &  |  *  |\n      -----------\n </pre>\n","sig":null,"attributes":[{"value":"/ Four regions arranged in a two-by-two grid. The two columns","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272509,"byte_end":272572,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ have equal width and the two rows have equal height.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272577,"byte_end":272633,"line_start":73,"line_end":73,"column_start":5,"column_end":61}},{"value":"/ <pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272638,"byte_end":272647,"line_start":74,"line_end":74,"column_start":5,"column_end":14}},{"value":"/      -----------","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272652,"byte_end":272672,"line_start":75,"line_end":75,"column_start":5,"column_end":25}},{"value":"/     |  *  |  &  |","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272677,"byte_end":272698,"line_start":76,"line_end":76,"column_start":5,"column_end":26}},{"value":"/      -----------","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272703,"byte_end":272723,"line_start":77,"line_end":77,"column_start":5,"column_end":25}},{"value":"/     |  &  |  *  |","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272728,"byte_end":272749,"line_start":78,"line_end":78,"column_start":5,"column_end":26}},{"value":"/      -----------","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272754,"byte_end":272774,"line_start":79,"line_end":79,"column_start":5,"column_end":25}},{"value":"/ </pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272779,"byte_end":272789,"line_start":80,"line_end":80,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":2414},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271634,"byte_end":271649,"line_start":37,"line_end":37,"column_start":10,"column_end":25},"name":"HaarFeatureType","qualname":"::haar::HaarFeatureType","value":"pub enum HaarFeatureType {\n    TwoRegionHorizontal,\n    ThreeRegionHorizontal,\n    TwoRegionVertical,\n    ThreeRegionVertical,\n    FourRegion,\n}","parent":null,"children":[{"krate":0,"index":2415},{"krate":0,"index":2417},{"krate":0,"index":2419},{"krate":0,"index":2421},{"krate":0,"index":2423}],"decl_id":null,"docs":" The type of a Haar-like feature determines the number of regions it contains and their orientation.\n The diagrams in the comments for each variant use the symbols (*, &) to represent either\n (+, -) or (-, +), depending on which `Sign` the feature type is used with.\n","sig":null,"attributes":[{"value":"/ The type of a Haar-like feature determines the number of regions it contains and their orientation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271298,"byte_end":271401,"line_start":33,"line_end":33,"column_start":1,"column_end":104}},{"value":"/ The diagrams in the comments for each variant use the symbols (*, &) to represent either","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271402,"byte_end":271494,"line_start":34,"line_end":34,"column_start":1,"column_end":93}},{"value":"/ (+, -) or (-, +), depending on which `Sign` the feature type is used with.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":271495,"byte_end":271573,"line_start":35,"line_end":35,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":273400,"byte_end":273408,"line_start":99,"line_end":99,"column_start":12,"column_end":20},"name":"evaluate","qualname":"<HaarFeature>::evaluate","value":"pub fn evaluate(&Self, &Image<Luma<u32>>) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the Haar-like feature on an integral image.\n","sig":null,"attributes":[{"value":"/ Evaluates the Haar-like feature on an integral image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":273331,"byte_end":273388,"line_start":98,"line_end":98,"column_start":5,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1395},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":279082,"byte_end":279105,"line_start":262,"line_end":262,"column_start":8,"column_end":31},"name":"enumerate_haar_features","qualname":"::haar::enumerate_haar_features","value":"pub fn enumerate_haar_features(u8, u8) -> Vec<HaarFeature>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of all valid Haar-like features for an image with given width and height.\n","sig":null,"attributes":[{"value":"/ Returns a vector of all valid Haar-like features for an image with given width and height.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":278980,"byte_end":279074,"line_start":261,"line_end":261,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":1405},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282701,"byte_end":282724,"line_start":361,"line_end":361,"column_start":8,"column_end":31},"name":"number_of_haar_features","qualname":"::haar::number_of_haar_features","value":"pub fn number_of_haar_features(u32, u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of distinct Haar-like features for an image of the given dimensions.","sig":null,"attributes":[{"value":"/ Returns the number of distinct Haar-like features for an image of the given dimensions.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282049,"byte_end":282140,"line_start":350,"line_end":350,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282141,"byte_end":282144,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ Includes positive and negative, two and three region, vertical and horizontal features,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282145,"byte_end":282236,"line_start":352,"line_end":352,"column_start":1,"column_end":92}},{"value":"/ as well as positive and negative four region features.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282237,"byte_end":282295,"line_start":353,"line_end":353,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282296,"byte_end":282299,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ Consider a `k`-region horizontal feature in an image of height `1` and width `w`. The largest valid block size","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282300,"byte_end":282414,"line_start":355,"line_end":355,"column_start":1,"column_end":115}},{"value":"/ for such a feature is `M = floor(w / k)`, and for a block size `s` there are `(w + 1) - 2 * s`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282415,"byte_end":282513,"line_start":356,"line_end":356,"column_start":1,"column_end":99}},{"value":"/ valid locations for the leftmost column of this feature.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282514,"byte_end":282574,"line_start":357,"line_end":357,"column_start":1,"column_end":61}},{"value":"/ Summing over `s` gives `M * (w + 1) - k * [(M * (M + 1)) / 2]`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282575,"byte_end":282642,"line_start":358,"line_end":358,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282643,"byte_end":282646,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ An equivalent argument applies vertically.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":282647,"byte_end":282693,"line_start":360,"line_end":360,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1407},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":283575,"byte_end":283592,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"draw_haar_feature","qualname":"::haar::draw_haar_feature","value":"pub fn draw_haar_feature<I>(&I, HaarFeature) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: HasBlack + HasWhite","parent":null,"children":[],"decl_id":null,"docs":" Draws the given Haar-like feature on an image, drawing pixels\n with a positive sign white and those with a negative sign black.\n","sig":null,"attributes":[{"value":"/ Draws the given Haar-like feature on an image, drawing pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":283433,"byte_end":283498,"line_start":382,"line_end":382,"column_start":1,"column_end":66}},{"value":"/ with a positive sign white and those with a negative sign black.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":283499,"byte_end":283567,"line_start":383,"line_end":383,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":1409},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":284028,"byte_end":284049,"line_start":397,"line_end":397,"column_start":8,"column_end":29},"name":"draw_haar_feature_mut","qualname":"::haar::draw_haar_feature_mut","value":"pub fn draw_haar_feature_mut<I>(&mut I, HaarFeature) where I: GenericImage,\nI::Pixel: HasBlack + HasWhite","parent":null,"children":[],"decl_id":null,"docs":" Draws the given Haar-like feature on an image in place, drawing pixels\n with a positive sign white and those with a negative sign black.\n","sig":null,"attributes":[{"value":"/ Draws the given Haar-like feature on an image in place, drawing pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":283877,"byte_end":283951,"line_start":395,"line_end":395,"column_start":1,"column_end":75}},{"value":"/ with a positive sign white and those with a negative sign black.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":283952,"byte_end":284020,"line_start":396,"line_end":396,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":1411},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hog","qualname":"::hog","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","parent":null,"children":[{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1416},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1423},{"krate":0,"index":1426},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1433},{"krate":0,"index":1436},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1445},{"krate":0,"index":2511},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":1448},{"krate":0,"index":2529},{"krate":0,"index":2535},{"krate":0,"index":2537},{"krate":0,"index":2538},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":1450},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":2547},{"krate":0,"index":2552},{"krate":0,"index":2554},{"krate":0,"index":2555},{"krate":0,"index":2559},{"krate":0,"index":2560},{"krate":0,"index":1475},{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1497},{"krate":0,"index":1503},{"krate":0,"index":1508},{"krate":0,"index":1519}],"decl_id":null,"docs":" [HoG features](https://en.wikipedia.org/wiki/Histogram_of_oriented_gradients)\n and helpers for visualizing them.\n","sig":null,"attributes":[{"value":"/ [HoG features](https://en.wikipedia.org/wiki/Histogram_of_oriented_gradients)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":295580,"byte_end":295661,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/ and helpers for visualizing them.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":295662,"byte_end":295699,"line_start":2,"line_end":2,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2511},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296004,"byte_end":296014,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"HogOptions","qualname":"::hog::HogOptions","value":"HogOptions { orientations, signed, cell_side, block_side, block_stride }","parent":null,"children":[{"krate":0,"index":2512},{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2516}],"decl_id":null,"docs":" Parameters for HoG descriptors.\n","sig":null,"attributes":[{"value":"/ Parameters for HoG descriptors.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":295912,"byte_end":295947,"line_start":11,"line_end":11,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2512},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296070,"byte_end":296082,"line_start":15,"line_end":15,"column_start":9,"column_end":21},"name":"orientations","qualname":"::hog::HogOptions::orientations","value":"usize","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":" Number of gradient orientation bins.\n","sig":null,"attributes":[{"value":"/ Number of gradient orientation bins.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296021,"byte_end":296061,"line_start":14,"line_end":14,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2513},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296170,"byte_end":296176,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"name":"signed","qualname":"::hog::HogOptions::signed","value":"bool","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":" Whether gradients in opposite directions are treated as equal.\n","sig":null,"attributes":[{"value":"/ Whether gradients in opposite directions are treated as equal.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296095,"byte_end":296161,"line_start":16,"line_end":16,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2514},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296236,"byte_end":296245,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"cell_side","qualname":"::hog::HogOptions::cell_side","value":"usize","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":" Width and height of cell in pixels.\n","sig":null,"attributes":[{"value":"/ Width and height of cell in pixels.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296188,"byte_end":296227,"line_start":18,"line_end":18,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2515},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296306,"byte_end":296316,"line_start":21,"line_end":21,"column_start":9,"column_end":19},"name":"block_side","qualname":"::hog::HogOptions::block_side","value":"usize","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":" Width and height of block in cells.\n","sig":null,"attributes":[{"value":"/ Width and height of block in cells.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296258,"byte_end":296297,"line_start":20,"line_end":20,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2516},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296398,"byte_end":296410,"line_start":23,"line_end":23,"column_start":9,"column_end":21},"name":"block_stride","qualname":"::hog::HogOptions::block_stride","value":"usize","parent":{"krate":0,"index":2511},"children":[],"decl_id":null,"docs":" Offset of the start of one block from the next in cells.\n","sig":null,"attributes":[{"value":"/ Offset of the start of one block from the next in cells.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296329,"byte_end":296389,"line_start":22,"line_end":22,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296576,"byte_end":296579,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<HogOptions>::new","value":"pub fn new(usize, bool, usize, usize, usize) -> HogOptions","parent":null,"children":[],"decl_id":null,"docs":" User-provided options, prior to validation.\n","sig":null,"attributes":[{"value":"/ User-provided options, prior to validation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296517,"byte_end":296564,"line_start":27,"line_end":27,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":2529},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":297174,"byte_end":297181,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"HogSpec","qualname":"::hog::HogSpec","value":"HogSpec {  }","parent":null,"children":[{"krate":0,"index":2530},{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":2534}],"decl_id":null,"docs":" HoG options plus values calculated from these options and the desired\n image dimensions. Validation must occur when instances of this struct\n are created - functions receiving a spec will assume that it is valid.\n","sig":null,"attributes":[{"value":"/ HoG options plus values calculated from these options and the desired","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296895,"byte_end":296968,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/ image dimensions. Validation must occur when instances of this struct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296969,"byte_end":297042,"line_start":46,"line_end":46,"column_start":1,"column_end":74}},{"value":"/ are created - functions receiving a spec will assume that it is valid.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":297043,"byte_end":297117,"line_start":47,"line_end":47,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":297780,"byte_end":297792,"line_start":64,"line_end":64,"column_start":12,"column_end":24},"name":"from_options","qualname":"<HogSpec>::from_options","value":"pub fn from_options(u32, u32, HogOptions) -> Result<HogSpec, String>","parent":null,"children":[],"decl_id":null,"docs":" Returns an error message if image dimensions aren't compatible with the provided options.\n","sig":null,"attributes":[{"value":"/ Returns an error message if image dimensions aren't compatible with the provided options.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":297675,"byte_end":297768,"line_start":63,"line_end":63,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":300622,"byte_end":300639,"line_start":137,"line_end":137,"column_start":12,"column_end":29},"name":"descriptor_length","qualname":"<HogSpec>::descriptor_length","value":"pub fn descriptor_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total size in floats of the HoG descriptor with these dimensions.\n","sig":null,"attributes":[{"value":"/ The total size in floats of the HoG descriptor with these dimensions.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":300537,"byte_end":300610,"line_start":136,"line_end":136,"column_start":5,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":1465},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":302684,"byte_end":302687,"line_start":191,"line_end":191,"column_start":8,"column_end":11},"name":"hog","qualname":"::hog::hog","value":"pub fn hog(&GrayImage, HogOptions) -> Result<Vec<f32>, String>","parent":null,"children":[],"decl_id":null,"docs":" Computes the HoG descriptor of an image, or None if the provided\n options are incompatible with the image size.\n","sig":null,"attributes":[{"value":"/ Computes the HoG descriptor of an image, or None if the provided","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":302470,"byte_end":302538,"line_start":188,"line_end":188,"column_start":1,"column_end":69}},{"value":"/ options are incompatible with the image size.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":302539,"byte_end":302588,"line_start":189,"line_end":189,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1470},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":305047,"byte_end":305062,"line_start":255,"line_end":255,"column_start":8,"column_end":23},"name":"cell_histograms","qualname":"::hog::cell_histograms","value":"pub fn cell_histograms(&GrayImage, HogSpec) -> Array3d<f32>","parent":null,"children":[],"decl_id":null,"docs":" Computes orientation histograms for each cell of an image. Assumes that\n the provided dimensions are valid.\n","sig":null,"attributes":[{"value":"/ Computes orientation histograms for each cell of an image. Assumes that","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":304925,"byte_end":305000,"line_start":253,"line_end":253,"column_start":1,"column_end":76}},{"value":"/ the provided dimensions are valid.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":305001,"byte_end":305039,"line_start":254,"line_end":254,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":1481},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":309176,"byte_end":309192,"line_start":371,"line_end":371,"column_start":8,"column_end":24},"name":"render_hist_grid","qualname":"::hog::render_hist_grid","value":"pub fn render_hist_grid(u32, &View3d<, f32>, bool) -> Image<Luma<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Visualises an array of orientation histograms.\n The dimensions of the provided Array3d are orientation bucket,\n horizontal location of the cell, then vertical location of the cell.\n Note that we ignore block-level aggregation or normalisation here.\n Each rendered star has side length `star_side`, so the image will have\n width grid.lengths[1] * `star_side` and height grid.lengths[2] * `star_side`.\n","sig":null,"attributes":[{"value":"/ Visualises an array of orientation histograms.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":308750,"byte_end":308800,"line_start":365,"line_end":365,"column_start":1,"column_end":51}},{"value":"/ The dimensions of the provided Array3d are orientation bucket,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":308801,"byte_end":308867,"line_start":366,"line_end":366,"column_start":1,"column_end":67}},{"value":"/ horizontal location of the cell, then vertical location of the cell.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":308868,"byte_end":308940,"line_start":367,"line_end":367,"column_start":1,"column_end":73}},{"value":"/ Note that we ignore block-level aggregation or normalisation here.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":308941,"byte_end":309011,"line_start":368,"line_end":368,"column_start":1,"column_end":71}},{"value":"/ Each rendered star has side length `star_side`, so the image will have","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":309012,"byte_end":309086,"line_start":369,"line_end":369,"column_start":1,"column_end":75}},{"value":"/ width grid.lengths[1] * `star_side` and height grid.lengths[2] * `star_side`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":309087,"byte_end":309168,"line_start":370,"line_end":370,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1492},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":311543,"byte_end":311550,"line_start":434,"line_end":434,"column_start":12,"column_end":19},"name":"Array3d","qualname":"::hog::Array3d","value":"Array3d {  }","parent":null,"children":[{"krate":0,"index":1494},{"krate":0,"index":1495}],"decl_id":null,"docs":" A 3d array that owns its data.\n","sig":null,"attributes":[{"value":"/ A 3d array that owns its data.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":311497,"byte_end":311531,"line_start":433,"line_end":433,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1497},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":311752,"byte_end":311758,"line_start":442,"line_end":442,"column_start":12,"column_end":18},"name":"View3d","qualname":"::hog::View3d","value":"View3d {  }","parent":null,"children":[{"krate":0,"index":1500},{"krate":0,"index":1501}],"decl_id":null,"docs":" A view into a 3d array.\n","sig":null,"attributes":[{"value":"/ A view into a 3d array.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":311713,"byte_end":311740,"line_start":441,"line_end":441,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":312230,"byte_end":312238,"line_start":457,"line_end":457,"column_start":12,"column_end":20},"name":"view_mut","qualname":"<Array3d<T>>::view_mut","value":"pub fn view_mut(&mut Self) -> View3d<, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a 3d view of the data.\n","sig":null,"attributes":[{"value":"/ Provides a 3d view of the data.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":312183,"byte_end":312218,"line_start":456,"line_end":456,"column_start":5,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":1521},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hough","qualname":"::hough","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","parent":null,"children":[{"krate":0,"index":1522},{"krate":0,"index":1525},{"krate":0,"index":1528},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1535},{"krate":0,"index":1538},{"krate":0,"index":1541},{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1547},{"krate":0,"index":1550},{"krate":0,"index":2563},{"krate":0,"index":2566},{"krate":0,"index":2567},{"krate":0,"index":2569},{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2575},{"krate":0,"index":2578},{"krate":0,"index":2579},{"krate":0,"index":2581},{"krate":0,"index":2583},{"krate":0,"index":2584},{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":1553},{"krate":0,"index":1555},{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1561}],"decl_id":null,"docs":" Line detection via the [Hough transform].","sig":null,"attributes":[{"value":"/ Line detection via the [Hough transform].","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":319509,"byte_end":319554,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":319555,"byte_end":319558,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [Hough transform]: https://en.wikipedia.org/wiki/Hough_transform","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":319559,"byte_end":319627,"line_start":3,"line_end":3,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":2563},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":319938,"byte_end":319947,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"PolarLine","qualname":"::hough::PolarLine","value":"PolarLine { r, angle_in_degrees }","parent":null,"children":[{"krate":0,"index":2564},{"krate":0,"index":2565}],"decl_id":null,"docs":" A detected line, in polar coordinates.\n","sig":null,"attributes":[{"value":"/ A detected line, in polar coordinates.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":319843,"byte_end":319885,"line_start":11,"line_end":11,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":2564},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320046,"byte_end":320047,"line_start":15,"line_end":15,"column_start":9,"column_end":10},"name":"r","qualname":"::hough::PolarLine::r","value":"f32","parent":{"krate":0,"index":2563},"children":[],"decl_id":null,"docs":" Signed distance of the line from the origin (top-left of the image), in pixels.\n","sig":null,"attributes":[{"value":"/ Signed distance of the line from the origin (top-left of the image), in pixels.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":319954,"byte_end":320037,"line_start":14,"line_end":14,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":2565},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320164,"byte_end":320180,"line_start":18,"line_end":18,"column_start":9,"column_end":25},"name":"angle_in_degrees","qualname":"::hough::PolarLine::angle_in_degrees","value":"u32","parent":{"krate":0,"index":2563},"children":[],"decl_id":null,"docs":" Clockwise angle in degrees between the x-axis and the line.\n Always between 0 and 180.\n","sig":null,"attributes":[{"value":"/ Clockwise angle in degrees between the x-axis and the line.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320058,"byte_end":320121,"line_start":16,"line_end":16,"column_start":5,"column_end":68}},{"value":"/ Always between 0 and 180.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320126,"byte_end":320155,"line_start":17,"line_end":17,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2575},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320284,"byte_end":320304,"line_start":23,"line_end":23,"column_start":12,"column_end":32},"name":"LineDetectionOptions","qualname":"::hough::LineDetectionOptions","value":"LineDetectionOptions { vote_threshold, suppression_radius }","parent":null,"children":[{"krate":0,"index":2576},{"krate":0,"index":2577}],"decl_id":null,"docs":" Options for Hough line detection.\n","sig":null,"attributes":[{"value":"/ Options for Hough line detection.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320190,"byte_end":320227,"line_start":21,"line_end":21,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":2576},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320374,"byte_end":320388,"line_start":25,"line_end":25,"column_start":9,"column_end":23},"name":"vote_threshold","qualname":"::hough::LineDetectionOptions::vote_threshold","value":"u32","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" Number of votes required to be detected as a line.\n","sig":null,"attributes":[{"value":"/ Number of votes required to be detected as a line.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320311,"byte_end":320365,"line_start":24,"line_end":24,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2577},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320705,"byte_end":320723,"line_start":30,"line_end":30,"column_start":9,"column_end":27},"name":"suppression_radius","qualname":"::hough::LineDetectionOptions::suppression_radius","value":"u32","parent":{"krate":0,"index":2575},"children":[],"decl_id":null,"docs":" Non-maxima suppression is applied to accumulator buckets before\n returning lines. Only lines which have the greatest vote in the\n block centred on them of side length `2 * suppression_radius + 1`\n are returned. Set to `0` if you don't want to apply non-maxima suppression.\n","sig":null,"attributes":[{"value":"/ Non-maxima suppression is applied to accumulator buckets before","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320399,"byte_end":320466,"line_start":26,"line_end":26,"column_start":5,"column_end":72}},{"value":"/ returning lines. Only lines which have the greatest vote in the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320471,"byte_end":320538,"line_start":27,"line_end":27,"column_start":5,"column_end":72}},{"value":"/ block centred on them of side length `2 * suppression_radius + 1`","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320543,"byte_end":320612,"line_start":28,"line_end":28,"column_start":5,"column_end":74}},{"value":"/ are returned. Set to `0` if you don't want to apply non-maxima suppression.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320617,"byte_end":320696,"line_start":29,"line_end":29,"column_start":5,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":1553},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320976,"byte_end":320988,"line_start":39,"line_end":39,"column_start":8,"column_end":20},"name":"detect_lines","qualname":"::hough::detect_lines","value":"pub fn detect_lines(&GrayImage, LineDetectionOptions) -> Vec<PolarLine>","parent":null,"children":[],"decl_id":null,"docs":" Detects lines in a binary input image using the Hough transform.","sig":null,"attributes":[{"value":"/ Detects lines in a binary input image using the Hough transform.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320733,"byte_end":320801,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320802,"byte_end":320805,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Points are considered to be in the foreground (and thus vote for lines)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320806,"byte_end":320881,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ if their intensity is non-zero.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320882,"byte_end":320917,"line_start":36,"line_end":36,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320918,"byte_end":320921,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ See ./examples/hough.rs for example usage.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":320922,"byte_end":320968,"line_start":38,"line_end":38,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1555},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":323063,"byte_end":323079,"line_start":99,"line_end":99,"column_start":8,"column_end":24},"name":"draw_polar_lines","qualname":"::hough::draw_polar_lines","value":"pub fn draw_polar_lines<P>(&Image<P>, &[PolarLine], P) -> Image<P> where\nP: Pixel","parent":null,"children":[],"decl_id":null,"docs":" Draws each element of `lines` on `image` in the provided `color`.","sig":null,"attributes":[{"value":"/ Draws each element of `lines` on `image` in the provided `color`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":322935,"byte_end":323004,"line_start":96,"line_end":96,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":323005,"byte_end":323008,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ See ./examples/hough.rs for example usage.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":323009,"byte_end":323055,"line_start":98,"line_end":98,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1557},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":323388,"byte_end":323408,"line_start":111,"line_end":111,"column_start":8,"column_end":28},"name":"draw_polar_lines_mut","qualname":"::hough::draw_polar_lines_mut","value":"pub fn draw_polar_lines_mut<P>(&mut Image<P>, &[PolarLine], P) where P: Pixel","parent":null,"children":[],"decl_id":null,"docs":" Draws each element of `lines` on `image` in the provided `color`.","sig":null,"attributes":[{"value":"/ Draws each element of `lines` on `image` in the provided `color`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":323260,"byte_end":323329,"line_start":108,"line_end":108,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":323330,"byte_end":323333,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ See ./examples/hough.rs for example usage.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hough.rs","byte_start":323334,"byte_end":323380,"line_start":110,"line_end":110,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":1562},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"integral_image","qualname":"::integral_image","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","parent":null,"children":[{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1570},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1577},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1586},{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":1598},{"krate":0,"index":1601},{"krate":0,"index":1604},{"krate":0,"index":1607},{"krate":0,"index":1612},{"krate":0,"index":1619},{"krate":0,"index":1626},{"krate":0,"index":1633},{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1637}],"decl_id":null,"docs":" Functions for computing [integral images](https://en.wikipedia.org/wiki/Summed_area_table)\n and running sums of rows and columns.\n","sig":null,"attributes":[{"value":"/ Functions for computing [integral images](https://en.wikipedia.org/wiki/Summed_area_table)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":336833,"byte_end":336927,"line_start":1,"line_end":1,"column_start":1,"column_end":95}},{"value":"/ and running sums of rows and columns.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":336928,"byte_end":336969,"line_start":2,"line_end":2,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1598},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338807,"byte_end":338821,"line_start":50,"line_end":50,"column_start":8,"column_end":22},"name":"integral_image","qualname":"::integral_image::integral_image","value":"pub fn integral_image<P, T>(&Image<P>) -> Image<ChannelMap<P, T>> where\nP: Pixel<Subpixel = u8> + WithChannel<T>, T: From<u8> + Primitive + AddAssign","parent":null,"children":[],"decl_id":null,"docs":" Computes the 2d running sum of an image. Channels are summed independently.","sig":null,"attributes":[{"value":"/ Computes the 2d running sum of an image. Channels are summed independently.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337148,"byte_end":337227,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337228,"byte_end":337231,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ An integral image I has width and height one greater than its source image F,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337232,"byte_end":337313,"line_start":11,"line_end":11,"column_start":1,"column_end":82}},{"value":"/ and is defined by I(x, y) = sum of F(x', y') for x' < x, y' < y, i.e. each pixel","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337314,"byte_end":337398,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/ in the integral image contains the sum of the pixel intensities of all input pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337399,"byte_end":337486,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"/ that are strictly above it and strictly to its left. In particular, the left column","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337487,"byte_end":337574,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ and top row of an integral image are all 0, and the value of the bottom right pixel of","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337575,"byte_end":337665,"line_start":15,"line_end":15,"column_start":1,"column_end":91}},{"value":"/ an integral image is equal to the sum of all pixels in the source image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337666,"byte_end":337742,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337743,"byte_end":337746,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Integral images have the helpful property of allowing us to","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337747,"byte_end":337810,"line_start":18,"line_end":18,"column_start":1,"column_end":64}},{"value":"/ compute the sum of pixel intensities in a rectangular region of an image","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337811,"byte_end":337887,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ in constant time. Specifically, given a rectangle [l, r] * [t, b] in F,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337888,"byte_end":337963,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ the sum of the pixels in this rectangle is","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":337964,"byte_end":338010,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/ I(r + 1, b + 1) - I(r + 1, t) - I(l, b + 1) + I(l, t).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338011,"byte_end":338069,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338070,"byte_end":338073,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338074,"byte_end":338088,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338089,"byte_end":338096,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338097,"byte_end":338122,"line_start":26,"line_end":26,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338123,"byte_end":338141,"line_start":27,"line_end":27,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338142,"byte_end":338171,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338172,"byte_end":338189,"line_start":29,"line_end":29,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::{integral_image, sum_image_pixels};","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338190,"byte_end":338260,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338261,"byte_end":338264,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338265,"byte_end":338293,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338294,"byte_end":338310,"line_start":33,"line_end":33,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338311,"byte_end":338328,"line_start":34,"line_end":34,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338329,"byte_end":338332,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ let integral = gray_image!(type: u32,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338333,"byte_end":338374,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/     0,  0,  0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338375,"byte_end":338397,"line_start":37,"line_end":37,"column_start":1,"column_end":23}},{"value":"/     0,  1,  3,  6;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338398,"byte_end":338420,"line_start":38,"line_end":38,"column_start":1,"column_end":23}},{"value":"/     0,  5, 12, 21);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338421,"byte_end":338444,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338445,"byte_end":338448,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(integral_image::<_, u32>(&image), integral);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338449,"byte_end":338515,"line_start":41,"line_end":41,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338516,"byte_end":338519,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of all pixels in the right two columns","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338520,"byte_end":338581,"line_start":43,"line_end":43,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 1, 0, 2, 1)[0], 2 + 3 + 5 + 6);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338582,"byte_end":338656,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338657,"byte_end":338660,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of all pixels in the top row","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338661,"byte_end":338712,"line_start":46,"line_end":46,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 0, 0, 2, 0)[0], 1 + 2 + 3);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338713,"byte_end":338783,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338784,"byte_end":338791,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":338792,"byte_end":338799,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1601},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":340026,"byte_end":340048,"line_start":89,"line_end":89,"column_start":8,"column_end":30},"name":"integral_squared_image","qualname":"::integral_image::integral_squared_image","value":"pub fn integral_squared_image<P, T>(&Image<P>) -> Image<ChannelMap<P, T>>\nwhere P: Pixel<Subpixel = u8> + WithChannel<T>, T: From<u8> + Primitive +\nAddAssign","parent":null,"children":[],"decl_id":null,"docs":" Computes the 2d running sum of the squares of the intensities in an image. Channels are summed\n independently.","sig":null,"attributes":[{"value":"/ Computes the 2d running sum of the squares of the intensities in an image. Channels are summed","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339009,"byte_end":339107,"line_start":58,"line_end":58,"column_start":1,"column_end":99}},{"value":"/ independently.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339108,"byte_end":339126,"line_start":59,"line_end":59,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339127,"byte_end":339130,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ See the [`integral_image`](fn.integral_image.html) documentation for more information on integral images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339131,"byte_end":339240,"line_start":61,"line_end":61,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339241,"byte_end":339244,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339245,"byte_end":339259,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339260,"byte_end":339267,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339268,"byte_end":339293,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339294,"byte_end":339312,"line_start":66,"line_end":66,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339313,"byte_end":339342,"line_start":67,"line_end":67,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339343,"byte_end":339360,"line_start":68,"line_end":68,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::{integral_squared_image, sum_image_pixels};","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339361,"byte_end":339439,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339440,"byte_end":339443,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339444,"byte_end":339472,"line_start":71,"line_end":71,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339473,"byte_end":339489,"line_start":72,"line_end":72,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339490,"byte_end":339507,"line_start":73,"line_end":73,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339508,"byte_end":339511,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ let integral = gray_image!(type: u32,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339512,"byte_end":339553,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/     0,  0,  0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339554,"byte_end":339576,"line_start":76,"line_end":76,"column_start":1,"column_end":23}},{"value":"/     0,  1,  5, 14;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339577,"byte_end":339599,"line_start":77,"line_end":77,"column_start":1,"column_end":23}},{"value":"/     0, 17, 46, 91);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339600,"byte_end":339623,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339624,"byte_end":339627,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(integral_squared_image::<_, u32>(&image), integral);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339628,"byte_end":339702,"line_start":80,"line_end":80,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339703,"byte_end":339706,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of the squares of all pixels in the right two columns","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339707,"byte_end":339783,"line_start":82,"line_end":82,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 1, 0, 2, 1)[0], 4 + 9 + 25 + 36);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339784,"byte_end":339860,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339861,"byte_end":339864,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of the squares of all pixels in the top row","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339865,"byte_end":339931,"line_start":85,"line_end":85,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 0, 0, 2, 0)[0], 1 + 4 + 9);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":339932,"byte_end":340002,"line_start":86,"line_end":86,"column_start":1,"column_end":71}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":340003,"byte_end":340010,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":340011,"byte_end":340018,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":1607},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":342684,"byte_end":342693,"line_start":151,"line_end":151,"column_start":11,"column_end":20},"name":"ArrayData","qualname":"::integral_image::ArrayData","value":"ArrayData","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611}],"decl_id":null,"docs":" Hack to get around lack of const generics. See comment on `sum_image_pixels`.\n","sig":null,"attributes":[{"value":"/ Hack to get around lack of const generics. See comment on `sum_image_pixels`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":342592,"byte_end":342673,"line_start":150,"line_end":150,"column_start":1,"column_end":82}}]},{"kind":"Type","id":{"krate":0,"index":1608},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":342804,"byte_end":342812,"line_start":154,"line_end":154,"column_start":10,"column_end":18},"name":"DataType","qualname":"::integral_image::ArrayData::DataType","value":"type DataType;","parent":{"krate":0,"index":1607},"children":[],"decl_id":null,"docs":" The type of the data for this array.\n e.g. `[T; 1]` for `Luma`, `[T; 3]` for `Rgb`.\n","sig":null,"attributes":[{"value":"/ The type of the data for this array.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":342700,"byte_end":342740,"line_start":152,"line_end":152,"column_start":5,"column_end":45}},{"value":"/ e.g. `[T; 1]` for `Luma`, `[T; 3]` for `Rgb`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":342745,"byte_end":342794,"line_start":153,"line_end":153,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1609},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":342887,"byte_end":342891,"line_start":157,"line_end":157,"column_start":8,"column_end":12},"name":"data","qualname":"::integral_image::ArrayData::data","value":"pub fn data(&Self) -> Self::DataType","parent":{"krate":0,"index":1607},"children":[],"decl_id":null,"docs":" Get the data from this pixel as a constant length array.\n","sig":null,"attributes":[{"value":"/ Get the data from this pixel as a constant length array.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":342819,"byte_end":342879,"line_start":156,"line_end":156,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1610},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":342983,"byte_end":342986,"line_start":160,"line_end":160,"column_start":8,"column_end":11},"name":"add","qualname":"::integral_image::ArrayData::add","value":"pub fn add(Self::DataType, Self::DataType) -> Self::DataType","parent":{"krate":0,"index":1607},"children":[],"decl_id":null,"docs":" Add the elements of two data arrays elementwise.\n","sig":null,"attributes":[{"value":"/ Add the elements of two data arrays elementwise.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":342923,"byte_end":342975,"line_start":159,"line_end":159,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1611},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":343120,"byte_end":343123,"line_start":163,"line_end":163,"column_start":8,"column_end":11},"name":"sub","qualname":"::integral_image::ArrayData::sub","value":"pub fn sub(Self::DataType, Self::DataType) -> Self::DataType","parent":{"krate":0,"index":1607},"children":[],"decl_id":null,"docs":" Subtract the elements of two data arrays elementwise.\n","sig":null,"attributes":[{"value":"/ Subtract the elements of two data arrays elementwise.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":343055,"byte_end":343112,"line_start":162,"line_end":162,"column_start":5,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1633},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":345393,"byte_end":345409,"line_start":246,"line_end":246,"column_start":8,"column_end":24},"name":"sum_image_pixels","qualname":"::integral_image::sum_image_pixels","value":"pub fn sum_image_pixels<P>(&Image<P>, u32, u32, u32, u32) -> P::DataType where\nP: Pixel + ArrayData + Copy","parent":null,"children":[],"decl_id":null,"docs":" Sums the pixels in positions [left, right] * [top, bottom] in F, where `integral_image` is the\n integral image of F.","sig":null,"attributes":[{"value":"/ Sums the pixels in positions [left, right] * [top, bottom] in F, where `integral_image` is the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":344812,"byte_end":344910,"line_start":237,"line_end":237,"column_start":1,"column_end":99}},{"value":"/ integral image of F.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":344911,"byte_end":344935,"line_start":238,"line_end":238,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":344936,"byte_end":344939,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ The of `ArrayData` here is due to lack of const generics. This library contains","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":344940,"byte_end":345023,"line_start":240,"line_end":240,"column_start":1,"column_end":84}},{"value":"/ implementations of `ArrayData` for `Luma`, `Rgb` and `Rgba` for any element type `T` that","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":345024,"byte_end":345117,"line_start":241,"line_end":241,"column_start":1,"column_end":94}},{"value":"/ implements `Primitive`. In that case, this function returns `[T; 1]` for an image","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":345118,"byte_end":345203,"line_start":242,"line_end":242,"column_start":1,"column_end":86}},{"value":"/ whose pixels are of type `Luma`, `[T; 3]` for `Rgb` pixels and `[T; 4]` for `Rgba` pixels.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":345204,"byte_end":345298,"line_start":243,"line_end":243,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":345299,"byte_end":345302,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ See the [`integral_image`](fn.integral_image.html) documentation for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":345303,"byte_end":345385,"line_start":245,"line_end":245,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":1635},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347143,"byte_end":347151,"line_start":299,"line_end":299,"column_start":8,"column_end":16},"name":"variance","qualname":"::integral_image::variance","value":"pub fn variance(&Image<Luma<u32>>, &Image<Luma<u32>>, u32, u32, u32, u32)\n-> f64","parent":null,"children":[],"decl_id":null,"docs":" Computes the variance of [left, right] * [top, bottom] in F, where `integral_image` is the\n integral image of F and `integral_squared_image` is the integral image of the squares of the\n pixels in F.","sig":null,"attributes":[{"value":"/ Computes the variance of [left, right] * [top, bottom] in F, where `integral_image` is the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346063,"byte_end":346157,"line_start":267,"line_end":267,"column_start":1,"column_end":95}},{"value":"/ integral image of F and `integral_squared_image` is the integral image of the squares of the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346158,"byte_end":346254,"line_start":268,"line_end":268,"column_start":1,"column_end":97}},{"value":"/ pixels in F.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346255,"byte_end":346271,"line_start":269,"line_end":269,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346272,"byte_end":346275,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ See the [`integral_image`](fn.integral_image.html) documentation for more information on integral images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346276,"byte_end":346385,"line_start":271,"line_end":271,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346386,"byte_end":346389,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/# Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346390,"byte_end":346403,"line_start":273,"line_end":273,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346404,"byte_end":346411,"line_start":274,"line_end":274,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346412,"byte_end":346437,"line_start":275,"line_end":275,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346438,"byte_end":346456,"line_start":276,"line_end":276,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346457,"byte_end":346486,"line_start":277,"line_end":277,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346487,"byte_end":346504,"line_start":278,"line_end":278,"column_start":1,"column_end":18}},{"value":"/ use std::f64;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346505,"byte_end":346522,"line_start":279,"line_end":279,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::{integral_image, integral_squared_image, variance};","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346523,"byte_end":346609,"line_start":280,"line_end":280,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346610,"byte_end":346613,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346614,"byte_end":346642,"line_start":282,"line_end":282,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346643,"byte_end":346659,"line_start":283,"line_end":283,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346660,"byte_end":346677,"line_start":284,"line_end":284,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346678,"byte_end":346681,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ let integral = integral_image(&image);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346682,"byte_end":346724,"line_start":286,"line_end":286,"column_start":1,"column_end":43}},{"value":"/ let integral_squared = integral_squared_image(&image);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346725,"byte_end":346783,"line_start":287,"line_end":287,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346784,"byte_end":346787,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ // Compute the variance of the pixels in the right two columns","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346788,"byte_end":346854,"line_start":289,"line_end":289,"column_start":1,"column_end":67}},{"value":"/ let mean: f64 = (2.0 + 3.0 + 5.0 + 6.0) / 4.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346855,"byte_end":346905,"line_start":290,"line_end":290,"column_start":1,"column_end":51}},{"value":"/ let var = ((2.0 - mean).powi(2)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346906,"byte_end":346941,"line_start":291,"line_end":291,"column_start":1,"column_end":36}},{"value":"/     + (3.0 - mean).powi(2)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346942,"byte_end":346972,"line_start":292,"line_end":292,"column_start":1,"column_end":31}},{"value":"/     + (5.0 - mean).powi(2)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":346973,"byte_end":347003,"line_start":293,"line_end":293,"column_start":1,"column_end":31}},{"value":"/     + (6.0 - mean).powi(2)) / 4.0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347004,"byte_end":347042,"line_start":294,"line_end":294,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347043,"byte_end":347046,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(variance(&integral, &integral_squared, 1, 0, 2, 1), var);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347047,"byte_end":347119,"line_start":296,"line_end":296,"column_start":1,"column_end":73}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347120,"byte_end":347127,"line_start":297,"line_end":297,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347128,"byte_end":347135,"line_start":298,"line_end":298,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1636},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348558,"byte_end":348573,"line_start":344,"line_end":344,"column_start":8,"column_end":23},"name":"row_running_sum","qualname":"::integral_image::row_running_sum","value":"pub fn row_running_sum(&GrayImage, u32, &mut [u32], u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes the running sum of one row of image, padded\n at the beginning and end. The padding is by continuity.\n Takes a reference to buffer so that this can be reused\n for all rows in an image.","sig":null,"attributes":[{"value":"/ Computes the running sum of one row of image, padded","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347695,"byte_end":347751,"line_start":314,"line_end":314,"column_start":1,"column_end":57}},{"value":"/ at the beginning and end. The padding is by continuity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347752,"byte_end":347811,"line_start":315,"line_end":315,"column_start":1,"column_end":60}},{"value":"/ Takes a reference to buffer so that this can be reused","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347812,"byte_end":347870,"line_start":316,"line_end":316,"column_start":1,"column_end":59}},{"value":"/ for all rows in an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347871,"byte_end":347900,"line_start":317,"line_end":317,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347901,"byte_end":347904,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347905,"byte_end":347917,"line_start":319,"line_end":319,"column_start":1,"column_end":13}},{"value":"/ - If `buffer.len() < 2 * padding + image.width()`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347918,"byte_end":347972,"line_start":320,"line_end":320,"column_start":1,"column_end":55}},{"value":"/ - If `row >= image.height()`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":347973,"byte_end":348006,"line_start":321,"line_end":321,"column_start":1,"column_end":34}},{"value":"/ - If `image.width() == 0`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348007,"byte_end":348037,"line_start":322,"line_end":322,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348038,"byte_end":348041,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348042,"byte_end":348056,"line_start":324,"line_end":324,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348057,"byte_end":348064,"line_start":325,"line_end":325,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348065,"byte_end":348090,"line_start":326,"line_end":326,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348091,"byte_end":348109,"line_start":327,"line_end":327,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348110,"byte_end":348139,"line_start":328,"line_end":328,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348140,"byte_end":348157,"line_start":329,"line_end":329,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::row_running_sum;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348158,"byte_end":348209,"line_start":330,"line_end":330,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348210,"byte_end":348213,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348214,"byte_end":348242,"line_start":332,"line_end":332,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348243,"byte_end":348259,"line_start":333,"line_end":333,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348260,"byte_end":348277,"line_start":334,"line_end":334,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348278,"byte_end":348281,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ // Buffer has length two greater than image width, hence padding of 1","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348282,"byte_end":348355,"line_start":336,"line_end":336,"column_start":1,"column_end":74}},{"value":"/ let mut buffer = [0; 5];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348356,"byte_end":348384,"line_start":337,"line_end":337,"column_start":1,"column_end":29}},{"value":"/ row_running_sum(&image, 0, &mut buffer, 1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348385,"byte_end":348432,"line_start":338,"line_end":338,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348433,"byte_end":348436,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ // The image is padded by continuity on either side","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348437,"byte_end":348492,"line_start":340,"line_end":340,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(buffer, [1, 2, 4, 7, 10]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348493,"byte_end":348534,"line_start":341,"line_end":341,"column_start":1,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348535,"byte_end":348542,"line_start":342,"line_end":342,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":348543,"byte_end":348550,"line_start":343,"line_end":343,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1637},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350412,"byte_end":350430,"line_start":409,"line_end":409,"column_start":8,"column_end":26},"name":"column_running_sum","qualname":"::integral_image::column_running_sum","value":"pub fn column_running_sum(&GrayImage, u32, &mut [u32], u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes the running sum of one column of image, padded\n at the top and bottom. The padding is by continuity.\n Takes a reference to buffer so that this can be reused\n for all columns in an image.","sig":null,"attributes":[{"value":"/ Computes the running sum of one column of image, padded","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349524,"byte_end":349583,"line_start":378,"line_end":378,"column_start":1,"column_end":60}},{"value":"/ at the top and bottom. The padding is by continuity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349584,"byte_end":349640,"line_start":379,"line_end":379,"column_start":1,"column_end":57}},{"value":"/ Takes a reference to buffer so that this can be reused","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349641,"byte_end":349699,"line_start":380,"line_end":380,"column_start":1,"column_end":59}},{"value":"/ for all columns in an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349700,"byte_end":349732,"line_start":381,"line_end":381,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349733,"byte_end":349736,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349737,"byte_end":349749,"line_start":383,"line_end":383,"column_start":1,"column_end":13}},{"value":"/ - If `buffer.len() < 2 * padding + image.height()`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349750,"byte_end":349805,"line_start":384,"line_end":384,"column_start":1,"column_end":56}},{"value":"/ - If `column >= image.width()`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349806,"byte_end":349841,"line_start":385,"line_end":385,"column_start":1,"column_end":36}},{"value":"/ - If `image.height() == 0`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349842,"byte_end":349873,"line_start":386,"line_end":386,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349874,"byte_end":349877,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349878,"byte_end":349892,"line_start":388,"line_end":388,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349893,"byte_end":349900,"line_start":389,"line_end":389,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349901,"byte_end":349926,"line_start":390,"line_end":390,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349927,"byte_end":349945,"line_start":391,"line_end":391,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349946,"byte_end":349975,"line_start":392,"line_end":392,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349976,"byte_end":349993,"line_start":393,"line_end":393,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::column_running_sum;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":349994,"byte_end":350048,"line_start":394,"line_end":394,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350049,"byte_end":350052,"line_start":395,"line_end":395,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350053,"byte_end":350081,"line_start":396,"line_end":396,"column_start":1,"column_end":29}},{"value":"/     1, 4;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350082,"byte_end":350095,"line_start":397,"line_end":397,"column_start":1,"column_end":14}},{"value":"/     2, 5;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350096,"byte_end":350109,"line_start":398,"line_end":398,"column_start":1,"column_end":14}},{"value":"/     3, 6);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350110,"byte_end":350124,"line_start":399,"line_end":399,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350125,"byte_end":350128,"line_start":400,"line_end":400,"column_start":1,"column_end":4}},{"value":"/ // Buffer has length two greater than image height, hence padding of 1","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350129,"byte_end":350203,"line_start":401,"line_end":401,"column_start":1,"column_end":75}},{"value":"/ let mut buffer = [0; 5];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350204,"byte_end":350232,"line_start":402,"line_end":402,"column_start":1,"column_end":29}},{"value":"/ column_running_sum(&image, 0, &mut buffer, 1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350233,"byte_end":350283,"line_start":403,"line_end":403,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350284,"byte_end":350287,"line_start":404,"line_end":404,"column_start":1,"column_end":4}},{"value":"/ // The image is padded by continuity on top and bottom","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350288,"byte_end":350346,"line_start":405,"line_end":405,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(buffer, [1, 2, 4, 7, 10]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350347,"byte_end":350388,"line_start":406,"line_end":406,"column_start":1,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350389,"byte_end":350396,"line_start":407,"line_end":407,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":350397,"byte_end":350404,"line_start":408,"line_end":408,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1638},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"local_binary_patterns","qualname":"::local_binary_patterns","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","parent":null,"children":[{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1649},{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1655}],"decl_id":null,"docs":" Functions for computing [local binary patterns](https://en.wikipedia.org/wiki/Local_binary_patterns).\n","sig":null,"attributes":[{"value":"/ Functions for computing [local binary patterns](https://en.wikipedia.org/wiki/Local_binary_patterns).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357387,"byte_end":357492,"line_start":1,"line_end":1,"column_start":1,"column_end":106}}]},{"kind":"Function","id":{"krate":0,"index":1649},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358358,"byte_end":358378,"line_start":38,"line_end":38,"column_start":8,"column_end":28},"name":"local_binary_pattern","qualname":"::local_binary_patterns::local_binary_pattern","value":"pub fn local_binary_pattern<I>(&I, u32, u32) -> Option<u8> where\nI: GenericImage<Pixel = Luma<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the basic local binary pattern of a pixel, or None\n if it's too close to the image boundary.","sig":null,"attributes":[{"value":"/ Computes the basic local binary pattern of a pixel, or None","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357542,"byte_end":357605,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ if it's too close to the image boundary.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357606,"byte_end":357650,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357651,"byte_end":357654,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The neighbors of a pixel p are enumerated in the following order:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357655,"byte_end":357724,"line_start":9,"line_end":9,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357725,"byte_end":357728,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ <pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357729,"byte_end":357738,"line_start":11,"line_end":11,"column_start":1,"column_end":10}},{"value":"/ 7  0  1","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357739,"byte_end":357750,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/ 6  p  2","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357751,"byte_end":357762,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ 5  4  3","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357763,"byte_end":357774,"line_start":14,"line_end":14,"column_start":1,"column_end":12}},{"value":"/ </pre>","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357775,"byte_end":357785,"line_start":15,"line_end":15,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357786,"byte_end":357789,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The nth most significant bit of the local binary pattern at p is 1","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357790,"byte_end":357860,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ if p is strictly brighter than the neighbor in position n.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357861,"byte_end":357923,"line_start":18,"line_end":18,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357924,"byte_end":357927,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357928,"byte_end":357942,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357943,"byte_end":357950,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357951,"byte_end":357976,"line_start":22,"line_end":22,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357977,"byte_end":357995,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":357996,"byte_end":358025,"line_start":24,"line_end":24,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358026,"byte_end":358043,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/ use imageproc::local_binary_patterns::local_binary_pattern;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358044,"byte_end":358107,"line_start":26,"line_end":26,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358108,"byte_end":358111,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358112,"byte_end":358140,"line_start":28,"line_end":28,"column_start":1,"column_end":29}},{"value":"/     06, 11, 14;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358141,"byte_end":358160,"line_start":29,"line_end":29,"column_start":1,"column_end":20}},{"value":"/     09, 10, 10;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358161,"byte_end":358180,"line_start":30,"line_end":30,"column_start":1,"column_end":20}},{"value":"/     19, 00, 22);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358181,"byte_end":358201,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358202,"byte_end":358205,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let expected = 0b11010000;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358206,"byte_end":358236,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ let pattern = local_binary_pattern(&image, 1, 1).unwrap();","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358237,"byte_end":358299,"line_start":34,"line_end":34,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(pattern, expected);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358300,"byte_end":358334,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358335,"byte_end":358342,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":358343,"byte_end":358350,"line_start":37,"line_end":37,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1651},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360408,"byte_end":360417,"line_start":101,"line_end":101,"column_start":8,"column_end":17},"name":"min_shift","qualname":"::local_binary_patterns::min_shift","value":"pub fn min_shift(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the least value of all rotations of a byte.","sig":null,"attributes":[{"value":"/ Returns the least value of all rotations of a byte.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360181,"byte_end":360236,"line_start":92,"line_end":92,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360237,"byte_end":360240,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360241,"byte_end":360255,"line_start":94,"line_end":94,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360256,"byte_end":360263,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ use imageproc::local_binary_patterns::min_shift;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360264,"byte_end":360316,"line_start":96,"line_end":96,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360317,"byte_end":360320,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ let byte = 0b10110100;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360321,"byte_end":360347,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(min_shift(byte), 0b00101101);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360348,"byte_end":360392,"line_start":99,"line_end":99,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360393,"byte_end":360400,"line_start":100,"line_end":100,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1652},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":361002,"byte_end":361019,"line_start":124,"line_end":124,"column_start":8,"column_end":25},"name":"count_transitions","qualname":"::local_binary_patterns::count_transitions","value":"pub fn count_transitions(u8) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Number of bit transitions in a byte, counting the last and final bits as adjacent.","sig":null,"attributes":[{"value":"/ Number of bit transitions in a byte, counting the last and final bits as adjacent.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360548,"byte_end":360634,"line_start":109,"line_end":109,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360635,"byte_end":360638,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360639,"byte_end":360653,"line_start":111,"line_end":111,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360654,"byte_end":360661,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ use imageproc::local_binary_patterns::count_transitions;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360662,"byte_end":360722,"line_start":113,"line_end":113,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360723,"byte_end":360726,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ let a = 0b11110000;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360727,"byte_end":360750,"line_start":115,"line_end":115,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(a), 2);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360751,"byte_end":360791,"line_start":116,"line_end":116,"column_start":1,"column_end":41}},{"value":"/ let b = 0b00000000;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360792,"byte_end":360815,"line_start":117,"line_end":117,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(b), 0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360816,"byte_end":360856,"line_start":118,"line_end":118,"column_start":1,"column_end":41}},{"value":"/ let c = 0b10011001;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360857,"byte_end":360880,"line_start":119,"line_end":119,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(c), 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360881,"byte_end":360921,"line_start":120,"line_end":120,"column_start":1,"column_end":41}},{"value":"/ let d = 0b10110010;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360922,"byte_end":360945,"line_start":121,"line_end":121,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(d), 6);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360946,"byte_end":360986,"line_start":122,"line_end":122,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":360987,"byte_end":360994,"line_start":123,"line_end":123,"column_start":1,"column_end":8}}]},{"kind":"Static","id":{"krate":0,"index":1653},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":361295,"byte_end":361319,"line_start":131,"line_end":131,"column_start":12,"column_end":36},"name":"UNIFORM_REPRESENTATIVE_2","qualname":"::local_binary_patterns::UNIFORM_REPRESENTATIVE_2","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Maps uniform bytes (i.e. those with at most two bit transitions) to their\n least circular shifts, and non-uniform bytes to 10101010 (an arbitrarily chosen\n non-uniform representative).\n","sig":null,"attributes":[{"value":"/ Maps uniform bytes (i.e. those with at most two bit transitions) to their","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":361089,"byte_end":361166,"line_start":128,"line_end":128,"column_start":1,"column_end":78}},{"value":"/ least circular shifts, and non-uniform bytes to 10101010 (an arbitrarily chosen","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":361167,"byte_end":361250,"line_start":129,"line_end":129,"column_start":1,"column_end":84}},{"value":"/ non-uniform representative).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":361251,"byte_end":361283,"line_start":130,"line_end":130,"column_start":1,"column_end":33}}]},{"kind":"Static","id":{"krate":0,"index":1655},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":365393,"byte_end":365402,"line_start":391,"line_end":391,"column_start":12,"column_end":21},"name":"MIN_SHIFT","qualname":"::local_binary_patterns::MIN_SHIFT","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Lookup table for the least circular shift of a byte.\n","sig":null,"attributes":[{"value":"/ Lookup table for the least circular shift of a byte.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/local_binary_patterns.rs","byte_start":365325,"byte_end":365381,"line_start":390,"line_end":390,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":1657},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1659},{"krate":0,"index":1662},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1671},{"krate":0,"index":1674},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1683},{"krate":0,"index":1686},{"krate":0,"index":1689},{"krate":0,"index":1692},{"krate":0,"index":1696},{"krate":0,"index":1700},{"krate":0,"index":1704},{"krate":0,"index":1708},{"krate":0,"index":1713},{"krate":0,"index":1717},{"krate":0,"index":1722},{"krate":0,"index":1726},{"krate":0,"index":1733},{"krate":0,"index":1738},{"krate":0,"index":1742},{"krate":0,"index":1746},{"krate":0,"index":1751},{"krate":0,"index":1755},{"krate":0,"index":1760},{"krate":0,"index":1764}],"decl_id":null,"docs":" Functions for mapping over pixels, colors or subpixels of images.\n","sig":null,"attributes":[{"value":"/ Functions for mapping over pixels, colors or subpixels of images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370252,"byte_end":370321,"line_start":1,"line_end":1,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1686},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370667,"byte_end":370678,"line_start":10,"line_end":10,"column_start":11,"column_end":22},"name":"WithChannel","qualname":"::map::WithChannel","value":"WithChannel<C: Primitive>: Pixel","parent":null,"children":[{"krate":0,"index":1688}],"decl_id":null,"docs":" The type obtained by replacing the channel type of a given `Pixel` type.\n The output type must have the same name of channels as the input type, or\n several algorithms will produce incorrect results or panic.\n","sig":null,"attributes":[{"value":"/ The type obtained by replacing the channel type of a given `Pixel` type.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370438,"byte_end":370514,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ The output type must have the same name of channels as the input type, or","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370515,"byte_end":370592,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ several algorithms will produce incorrect results or panic.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370593,"byte_end":370656,"line_start":9,"line_end":9,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":1688},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370739,"byte_end":370744,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::map::WithChannel::Pixel","value":"type Pixel: Pixel<Subpixel = C>;","parent":{"krate":0,"index":1686},"children":[],"decl_id":null,"docs":" The new pixel type.\n","sig":null,"attributes":[{"value":"/ The new pixel type.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370706,"byte_end":370729,"line_start":11,"line_end":11,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1689},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370845,"byte_end":370855,"line_start":16,"line_end":16,"column_start":10,"column_end":20},"name":"ChannelMap","qualname":"::map::ChannelMap","value":"<Pix as WithChannel<Sub>>::Pixel","parent":null,"children":[],"decl_id":null,"docs":" Alias to make uses of `WithChannel` less syntactically noisy.\n","sig":null,"attributes":[{"value":"/ Alias to make uses of `WithChannel` less syntactically noisy.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370770,"byte_end":370835,"line_start":15,"line_end":15,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1708},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371951,"byte_end":371964,"line_start":77,"line_end":77,"column_start":8,"column_end":21},"name":"map_subpixels","qualname":"::map::map_subpixels","value":"pub fn map_subpixels<I, P, F, S>(&I, F) -> Image<ChannelMap<P, S>> where\nI: GenericImage<Pixel = P>, P: WithChannel<S>, S: Primitive,\nF: Fn(P::Subpixel) -> S","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to each subpixel of the input image.","sig":null,"attributes":[{"value":"/ Applies `f` to each subpixel of the input image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371481,"byte_end":371533,"line_start":54,"line_end":54,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371534,"byte_end":371537,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371538,"byte_end":371552,"line_start":56,"line_end":56,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371553,"byte_end":371560,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371561,"byte_end":371586,"line_start":58,"line_end":58,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371587,"byte_end":371605,"line_start":59,"line_end":59,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371606,"byte_end":371635,"line_start":60,"line_end":60,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371636,"byte_end":371653,"line_start":61,"line_end":61,"column_start":1,"column_end":18}},{"value":"/ use imageproc::map::map_subpixels;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371654,"byte_end":371692,"line_start":62,"line_end":62,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371693,"byte_end":371696,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371697,"byte_end":371725,"line_start":64,"line_end":64,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371726,"byte_end":371739,"line_start":65,"line_end":65,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371740,"byte_end":371754,"line_start":66,"line_end":66,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371755,"byte_end":371758,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ let scaled = gray_image!(type: i16,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371759,"byte_end":371798,"line_start":68,"line_end":68,"column_start":1,"column_end":40}},{"value":"/     -2, -4;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371799,"byte_end":371814,"line_start":69,"line_end":69,"column_start":1,"column_end":16}},{"value":"/     -6, -8);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371815,"byte_end":371831,"line_start":70,"line_end":70,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371832,"byte_end":371835,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371836,"byte_end":371858,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/     map_subpixels(&image, |x| -2 * (x as i16)),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371859,"byte_end":371910,"line_start":73,"line_end":73,"column_start":1,"column_end":52}},{"value":"/     scaled);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371911,"byte_end":371927,"line_start":74,"line_end":74,"column_start":1,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371928,"byte_end":371935,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371936,"byte_end":371943,"line_start":76,"line_end":76,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1713},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373195,"byte_end":373212,"line_start":129,"line_end":129,"column_start":8,"column_end":25},"name":"map_subpixels_mut","qualname":"::map::map_subpixels_mut","value":"pub fn map_subpixels_mut<I, P, F>(&mut I, F) where I: GenericImage<Pixel = P>,\nP: Pixel, F: Fn(P::Subpixel) -> P::Subpixel","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to each subpixel of the input image in place.","sig":null,"attributes":[{"value":"/ Applies `f` to each subpixel of the input image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372713,"byte_end":372774,"line_start":104,"line_end":104,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372775,"byte_end":372778,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372779,"byte_end":372793,"line_start":106,"line_end":106,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372794,"byte_end":372801,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372802,"byte_end":372827,"line_start":108,"line_end":108,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372828,"byte_end":372846,"line_start":109,"line_end":109,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372847,"byte_end":372876,"line_start":110,"line_end":110,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372877,"byte_end":372894,"line_start":111,"line_end":111,"column_start":1,"column_end":18}},{"value":"/ use imageproc::map::map_subpixels_mut;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372895,"byte_end":372937,"line_start":112,"line_end":112,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372938,"byte_end":372941,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ let mut image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372942,"byte_end":372974,"line_start":114,"line_end":114,"column_start":1,"column_end":33}},{"value":"/     1, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372975,"byte_end":372988,"line_start":115,"line_end":115,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":372989,"byte_end":373003,"line_start":116,"line_end":116,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373004,"byte_end":373007,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ let want = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373008,"byte_end":373035,"line_start":118,"line_end":118,"column_start":1,"column_end":28}},{"value":"/     2, 4;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373036,"byte_end":373049,"line_start":119,"line_end":119,"column_start":1,"column_end":14}},{"value":"/     6, 8);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373050,"byte_end":373064,"line_start":120,"line_end":120,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373065,"byte_end":373068,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ map_subpixels_mut(&mut image, |x| 2 * x);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373069,"byte_end":373114,"line_start":122,"line_end":122,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373115,"byte_end":373118,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373119,"byte_end":373141,"line_start":124,"line_end":124,"column_start":1,"column_end":23}},{"value":"/     image,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373142,"byte_end":373156,"line_start":125,"line_end":125,"column_start":1,"column_end":15}},{"value":"/     want);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373157,"byte_end":373171,"line_start":126,"line_end":126,"column_start":1,"column_end":15}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373172,"byte_end":373179,"line_start":127,"line_end":127,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373180,"byte_end":373187,"line_start":128,"line_end":128,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1717},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374316,"byte_end":374326,"line_start":174,"line_end":174,"column_start":8,"column_end":18},"name":"map_colors","qualname":"::map::map_colors","value":"pub fn map_colors<I, P, Q, F>(&I, F) -> Image<Q> where I: GenericImage<Pixel =\nP>, P: Pixel, Q: Pixel, F: Fn(P) -> Q","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to the color of each pixel in the input image.","sig":null,"attributes":[{"value":"/ Applies `f` to the color of each pixel in the input image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373786,"byte_end":373848,"line_start":150,"line_end":150,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373849,"byte_end":373852,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373853,"byte_end":373867,"line_start":152,"line_end":152,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373868,"byte_end":373875,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373876,"byte_end":373901,"line_start":154,"line_end":154,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373902,"byte_end":373920,"line_start":155,"line_end":155,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373921,"byte_end":373950,"line_start":156,"line_end":156,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373951,"byte_end":373968,"line_start":157,"line_end":157,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373969,"byte_end":373988,"line_start":158,"line_end":158,"column_start":1,"column_end":20}},{"value":"/ use imageproc::map::map_colors;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":373989,"byte_end":374024,"line_start":159,"line_end":159,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374025,"byte_end":374028,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374029,"byte_end":374057,"line_start":161,"line_end":161,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374058,"byte_end":374071,"line_start":162,"line_end":162,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374072,"byte_end":374086,"line_start":163,"line_end":163,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374087,"byte_end":374090,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ let rgb = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374091,"byte_end":374116,"line_start":165,"line_end":165,"column_start":1,"column_end":26}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374117,"byte_end":374146,"line_start":166,"line_end":166,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374147,"byte_end":374178,"line_start":167,"line_end":167,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374179,"byte_end":374182,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374183,"byte_end":374205,"line_start":169,"line_end":169,"column_start":1,"column_end":23}},{"value":"/     map_colors(&image, |p| { Rgb([p[0], (2 * p[0]), (3 * p[0])]) }),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374206,"byte_end":374278,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"/     rgb);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374279,"byte_end":374292,"line_start":171,"line_end":171,"column_start":1,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374293,"byte_end":374300,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374301,"byte_end":374308,"line_start":173,"line_end":173,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1722},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375329,"byte_end":375343,"line_start":222,"line_end":222,"column_start":8,"column_end":22},"name":"map_colors_mut","qualname":"::map::map_colors_mut","value":"pub fn map_colors_mut<I, P, F>(&mut I, F) where I: GenericImage<Pixel = P>,\nP: Pixel, F: Fn(P) -> P","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to the color of each pixel in the input image in place.","sig":null,"attributes":[{"value":"/ Applies `f` to the color of each pixel in the input image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374811,"byte_end":374882,"line_start":196,"line_end":196,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374883,"byte_end":374886,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374887,"byte_end":374901,"line_start":198,"line_end":198,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374902,"byte_end":374909,"line_start":199,"line_end":199,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374910,"byte_end":374935,"line_start":200,"line_end":200,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374936,"byte_end":374954,"line_start":201,"line_end":201,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374955,"byte_end":374984,"line_start":202,"line_end":202,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":374985,"byte_end":375002,"line_start":203,"line_end":203,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375003,"byte_end":375023,"line_start":204,"line_end":204,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::map_colors_mut;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375024,"byte_end":375063,"line_start":205,"line_end":205,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375064,"byte_end":375067,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ let mut image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375068,"byte_end":375100,"line_start":207,"line_end":207,"column_start":1,"column_end":33}},{"value":"/     1, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375101,"byte_end":375114,"line_start":208,"line_end":208,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375115,"byte_end":375129,"line_start":209,"line_end":209,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375130,"byte_end":375133,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ let want = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375134,"byte_end":375161,"line_start":211,"line_end":211,"column_start":1,"column_end":28}},{"value":"/     2, 4;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375162,"byte_end":375175,"line_start":212,"line_end":212,"column_start":1,"column_end":14}},{"value":"/     6, 8);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375176,"byte_end":375190,"line_start":213,"line_end":213,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375191,"byte_end":375194,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ map_colors_mut(&mut image, |p| Luma([2 * p[0]]));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375195,"byte_end":375248,"line_start":215,"line_end":215,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375249,"byte_end":375252,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375253,"byte_end":375275,"line_start":217,"line_end":217,"column_start":1,"column_end":23}},{"value":"/     image,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375276,"byte_end":375290,"line_start":218,"line_end":218,"column_start":1,"column_end":15}},{"value":"/     want);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375291,"byte_end":375305,"line_start":219,"line_end":219,"column_start":1,"column_end":15}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375306,"byte_end":375313,"line_start":220,"line_end":220,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375314,"byte_end":375321,"line_start":221,"line_end":221,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1726},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376363,"byte_end":376374,"line_start":273,"line_end":273,"column_start":8,"column_end":19},"name":"map_colors2","qualname":"::map::map_colors2","value":"pub fn map_colors2<I, J, P, Q, R, F>(&I, &J, F) -> Image<R> where\nI: GenericImage<Pixel = P>, J: GenericImage<Pixel = Q>, P: Pixel, Q: Pixel,\nR: Pixel, F: Fn(P, Q) -> R","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to the colors of the pixels in the input images.","sig":null,"attributes":[{"value":"/ Applies `f` to the colors of the pixels in the input images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375711,"byte_end":375775,"line_start":240,"line_end":240,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375776,"byte_end":375779,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ Requires `image1` and `image2` to have the same dimensions.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375780,"byte_end":375843,"line_start":242,"line_end":242,"column_start":1,"column_end":64}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375844,"byte_end":375858,"line_start":243,"line_end":243,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375859,"byte_end":375866,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375867,"byte_end":375892,"line_start":245,"line_end":245,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375893,"byte_end":375911,"line_start":246,"line_end":246,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375912,"byte_end":375941,"line_start":247,"line_end":247,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375942,"byte_end":375959,"line_start":248,"line_end":248,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375960,"byte_end":375980,"line_start":249,"line_end":249,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::map_colors2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":375981,"byte_end":376017,"line_start":250,"line_end":250,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376018,"byte_end":376021,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ let image1 = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376022,"byte_end":376051,"line_start":252,"line_end":252,"column_start":1,"column_end":30}},{"value":"/     1, 2,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376052,"byte_end":376065,"line_start":253,"line_end":253,"column_start":1,"column_end":14}},{"value":"/     3, 4","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376066,"byte_end":376078,"line_start":254,"line_end":254,"column_start":1,"column_end":13}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376079,"byte_end":376085,"line_start":255,"line_end":255,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376086,"byte_end":376089,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ let image2 = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376090,"byte_end":376119,"line_start":257,"line_end":257,"column_start":1,"column_end":30}},{"value":"/     10, 20,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376120,"byte_end":376135,"line_start":258,"line_end":258,"column_start":1,"column_end":16}},{"value":"/     30, 40","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376136,"byte_end":376150,"line_start":259,"line_end":259,"column_start":1,"column_end":15}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376151,"byte_end":376157,"line_start":260,"line_end":260,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376158,"byte_end":376161,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ let sum = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376162,"byte_end":376188,"line_start":262,"line_end":262,"column_start":1,"column_end":27}},{"value":"/     11, 22,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376189,"byte_end":376204,"line_start":263,"line_end":263,"column_start":1,"column_end":16}},{"value":"/     33, 44","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376205,"byte_end":376219,"line_start":264,"line_end":264,"column_start":1,"column_end":15}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376220,"byte_end":376226,"line_start":265,"line_end":265,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376227,"byte_end":376230,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376231,"byte_end":376253,"line_start":267,"line_end":267,"column_start":1,"column_end":23}},{"value":"/     map_colors2(&image1, &image2, |p, q| Luma([p[0] + q[0]])),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376254,"byte_end":376320,"line_start":268,"line_end":268,"column_start":1,"column_end":67}},{"value":"/     sum","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376321,"byte_end":376332,"line_start":269,"line_end":269,"column_start":1,"column_end":12}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376333,"byte_end":376339,"line_start":270,"line_end":270,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376340,"byte_end":376347,"line_start":271,"line_end":271,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":376348,"byte_end":376355,"line_start":272,"line_end":272,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1733},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377578,"byte_end":377588,"line_start":326,"line_end":326,"column_start":8,"column_end":18},"name":"map_pixels","qualname":"::map::map_pixels","value":"pub fn map_pixels<I, P, Q, F>(&I, F) -> Image<Q> where I: GenericImage<Pixel =\nP>, P: Pixel, Q: Pixel, F: Fn(u32, u32, P) -> Q","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to each pixel in the input image.","sig":null,"attributes":[{"value":"/ Applies `f` to each pixel in the input image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377042,"byte_end":377091,"line_start":300,"line_end":300,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377092,"byte_end":377095,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377096,"byte_end":377110,"line_start":302,"line_end":302,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377111,"byte_end":377118,"line_start":303,"line_end":303,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377119,"byte_end":377144,"line_start":304,"line_end":304,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377145,"byte_end":377163,"line_start":305,"line_end":305,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377164,"byte_end":377193,"line_start":306,"line_end":306,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377194,"byte_end":377211,"line_start":307,"line_end":307,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377212,"byte_end":377231,"line_start":308,"line_end":308,"column_start":1,"column_end":20}},{"value":"/ use imageproc::map::map_pixels;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377232,"byte_end":377267,"line_start":309,"line_end":309,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377268,"byte_end":377271,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377272,"byte_end":377300,"line_start":311,"line_end":311,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377301,"byte_end":377314,"line_start":312,"line_end":312,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377315,"byte_end":377329,"line_start":313,"line_end":313,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377330,"byte_end":377333,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ let rgb = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377334,"byte_end":377359,"line_start":315,"line_end":315,"column_start":1,"column_end":26}},{"value":"/     [1, 0, 0], [2, 1, 0];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377360,"byte_end":377389,"line_start":316,"line_end":316,"column_start":1,"column_end":30}},{"value":"/     [3, 0, 1], [4, 1, 1]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377390,"byte_end":377420,"line_start":317,"line_end":317,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377421,"byte_end":377424,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377425,"byte_end":377447,"line_start":319,"line_end":319,"column_start":1,"column_end":23}},{"value":"/     map_pixels(&image, |x, y, p| {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377448,"byte_end":377486,"line_start":320,"line_end":320,"column_start":1,"column_end":39}},{"value":"/         Rgb([p[0], x as u8, y as u8])","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377487,"byte_end":377528,"line_start":321,"line_end":321,"column_start":1,"column_end":42}},{"value":"/     }),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377529,"byte_end":377540,"line_start":322,"line_end":322,"column_start":1,"column_end":12}},{"value":"/     rgb);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377541,"byte_end":377554,"line_start":323,"line_end":323,"column_start":1,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377555,"byte_end":377562,"line_start":324,"line_end":324,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":377563,"byte_end":377570,"line_start":325,"line_end":325,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1738},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378632,"byte_end":378646,"line_start":376,"line_end":376,"column_start":8,"column_end":22},"name":"map_pixels_mut","qualname":"::map::map_pixels_mut","value":"pub fn map_pixels_mut<I, P, F>(&mut I, F) where I: GenericImage<Pixel = P>,\nP: Pixel, F: Fn(u32, u32, P) -> P","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to each pixel in the input image in place.","sig":null,"attributes":[{"value":"/ Applies `f` to each pixel in the input image in place.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378089,"byte_end":378147,"line_start":348,"line_end":348,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378148,"byte_end":378151,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378152,"byte_end":378166,"line_start":350,"line_end":350,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378167,"byte_end":378174,"line_start":351,"line_end":351,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378175,"byte_end":378200,"line_start":352,"line_end":352,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378201,"byte_end":378219,"line_start":353,"line_end":353,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378220,"byte_end":378249,"line_start":354,"line_end":354,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378250,"byte_end":378267,"line_start":355,"line_end":355,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378268,"byte_end":378288,"line_start":356,"line_end":356,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::map_pixels_mut;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378289,"byte_end":378328,"line_start":357,"line_end":357,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378329,"byte_end":378332,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ let mut image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378333,"byte_end":378365,"line_start":359,"line_end":359,"column_start":1,"column_end":33}},{"value":"/     1, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378366,"byte_end":378379,"line_start":360,"line_end":360,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378380,"byte_end":378394,"line_start":361,"line_end":361,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378395,"byte_end":378398,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ let want = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378399,"byte_end":378426,"line_start":363,"line_end":363,"column_start":1,"column_end":28}},{"value":"/     1, 3;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378427,"byte_end":378440,"line_start":364,"line_end":364,"column_start":1,"column_end":14}},{"value":"/     4, 6);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378441,"byte_end":378455,"line_start":365,"line_end":365,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378456,"byte_end":378459,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ map_pixels_mut(&mut image, |x, y, p| {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378460,"byte_end":378502,"line_start":367,"line_end":367,"column_start":1,"column_end":43}},{"value":"/     Luma([p[0] + x as u8 + y as u8])","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378503,"byte_end":378543,"line_start":368,"line_end":368,"column_start":1,"column_end":41}},{"value":"/ });","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378544,"byte_end":378551,"line_start":369,"line_end":369,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378552,"byte_end":378555,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378556,"byte_end":378578,"line_start":371,"line_end":371,"column_start":1,"column_end":23}},{"value":"/     image,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378579,"byte_end":378593,"line_start":372,"line_end":372,"column_start":1,"column_end":15}},{"value":"/     want);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378594,"byte_end":378608,"line_start":373,"line_end":373,"column_start":1,"column_end":15}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378609,"byte_end":378616,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":378617,"byte_end":378624,"line_start":375,"line_end":375,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1742},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379550,"byte_end":379561,"line_start":417,"line_end":417,"column_start":8,"column_end":19},"name":"red_channel","qualname":"::map::red_channel","value":"pub fn red_channel<I, C>(&I) -> Image<Luma<C>> where I: GenericImage<Pixel =\nRgb<C>>, Rgb<C>: Pixel<Subpixel = C>, C: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Creates a grayscale image by extracting the red channel of an RGB image.","sig":null,"attributes":[{"value":"/ Creates a grayscale image by extracting the red channel of an RGB image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379030,"byte_end":379106,"line_start":394,"line_end":394,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379107,"byte_end":379110,"line_start":395,"line_end":395,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379111,"byte_end":379125,"line_start":396,"line_end":396,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379126,"byte_end":379133,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379134,"byte_end":379159,"line_start":398,"line_end":398,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379160,"byte_end":379178,"line_start":399,"line_end":399,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379179,"byte_end":379208,"line_start":400,"line_end":400,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379209,"byte_end":379226,"line_start":401,"line_end":401,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379227,"byte_end":379247,"line_start":402,"line_end":402,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::red_channel;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379248,"byte_end":379284,"line_start":403,"line_end":403,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379285,"byte_end":379288,"line_start":404,"line_end":404,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379289,"byte_end":379316,"line_start":405,"line_end":405,"column_start":1,"column_end":28}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379317,"byte_end":379346,"line_start":406,"line_end":406,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379347,"byte_end":379378,"line_start":407,"line_end":407,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379379,"byte_end":379382,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379383,"byte_end":379414,"line_start":409,"line_end":409,"column_start":1,"column_end":32}},{"value":"/     1, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379415,"byte_end":379428,"line_start":410,"line_end":410,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379429,"byte_end":379443,"line_start":411,"line_end":411,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379444,"byte_end":379447,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/ let actual = red_channel(&image);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379448,"byte_end":379485,"line_start":413,"line_end":413,"column_start":1,"column_end":38}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379486,"byte_end":379526,"line_start":414,"line_end":414,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379527,"byte_end":379534,"line_start":415,"line_end":415,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379535,"byte_end":379542,"line_start":416,"line_end":416,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1746},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380260,"byte_end":380274,"line_start":449,"line_end":449,"column_start":8,"column_end":22},"name":"as_red_channel","qualname":"::map::as_red_channel","value":"pub fn as_red_channel<I, C>(&I) -> Image<Rgb<C>> where I: GenericImage<Pixel =\nLuma<C>>, Rgb<C>: Pixel<Subpixel = C>, C: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Creates an RGB image by embedding a grayscale image in its red channel.","sig":null,"attributes":[{"value":"/ Creates an RGB image by embedding a grayscale image in its red channel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379736,"byte_end":379811,"line_start":426,"line_end":426,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379812,"byte_end":379815,"line_start":427,"line_end":427,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379816,"byte_end":379830,"line_start":428,"line_end":428,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379831,"byte_end":379838,"line_start":429,"line_end":429,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379839,"byte_end":379864,"line_start":430,"line_end":430,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379865,"byte_end":379883,"line_start":431,"line_end":431,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379884,"byte_end":379913,"line_start":432,"line_end":432,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379914,"byte_end":379931,"line_start":433,"line_end":433,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379932,"byte_end":379952,"line_start":434,"line_end":434,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::as_red_channel;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379953,"byte_end":379992,"line_start":435,"line_end":435,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379993,"byte_end":379996,"line_start":436,"line_end":436,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":379997,"byte_end":380025,"line_start":437,"line_end":437,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380026,"byte_end":380039,"line_start":438,"line_end":438,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380040,"byte_end":380054,"line_start":439,"line_end":439,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380055,"byte_end":380058,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ let expected = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380059,"byte_end":380089,"line_start":441,"line_end":441,"column_start":1,"column_end":31}},{"value":"/     [1, 0, 0], [2, 0, 0];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380090,"byte_end":380119,"line_start":442,"line_end":442,"column_start":1,"column_end":30}},{"value":"/     [3, 0, 0], [4, 0, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380120,"byte_end":380150,"line_start":443,"line_end":443,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380151,"byte_end":380154,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ let actual = as_red_channel(&image);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380155,"byte_end":380195,"line_start":445,"line_end":445,"column_start":1,"column_end":41}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380196,"byte_end":380236,"line_start":446,"line_end":446,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380237,"byte_end":380244,"line_start":447,"line_end":447,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380245,"byte_end":380252,"line_start":448,"line_end":448,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1751},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381045,"byte_end":381058,"line_start":485,"line_end":485,"column_start":8,"column_end":21},"name":"green_channel","qualname":"::map::green_channel","value":"pub fn green_channel<I, C>(&I) -> Image<Luma<C>> where I: GenericImage<Pixel =\nRgb<C>>, Rgb<C>: Pixel<Subpixel = C>, C: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Creates a grayscale image by extracting the green channel of an RGB image.","sig":null,"attributes":[{"value":"/ Creates a grayscale image by extracting the green channel of an RGB image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380519,"byte_end":380597,"line_start":462,"line_end":462,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380598,"byte_end":380601,"line_start":463,"line_end":463,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380602,"byte_end":380616,"line_start":464,"line_end":464,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380617,"byte_end":380624,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380625,"byte_end":380650,"line_start":466,"line_end":466,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380651,"byte_end":380669,"line_start":467,"line_end":467,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380670,"byte_end":380699,"line_start":468,"line_end":468,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380700,"byte_end":380717,"line_start":469,"line_end":469,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380718,"byte_end":380738,"line_start":470,"line_end":470,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::green_channel;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380739,"byte_end":380777,"line_start":471,"line_end":471,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380778,"byte_end":380781,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380782,"byte_end":380809,"line_start":473,"line_end":473,"column_start":1,"column_end":28}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380810,"byte_end":380839,"line_start":474,"line_end":474,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380840,"byte_end":380871,"line_start":475,"line_end":475,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380872,"byte_end":380875,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380876,"byte_end":380907,"line_start":477,"line_end":477,"column_start":1,"column_end":32}},{"value":"/     2, 4;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380908,"byte_end":380921,"line_start":478,"line_end":478,"column_start":1,"column_end":14}},{"value":"/     6, 8);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380922,"byte_end":380936,"line_start":479,"line_end":479,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380937,"byte_end":380940,"line_start":480,"line_end":480,"column_start":1,"column_end":4}},{"value":"/ let actual = green_channel(&image);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380941,"byte_end":380980,"line_start":481,"line_end":481,"column_start":1,"column_end":40}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":380981,"byte_end":381021,"line_start":482,"line_end":482,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381022,"byte_end":381029,"line_start":483,"line_end":483,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381030,"byte_end":381037,"line_start":484,"line_end":484,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1755},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381763,"byte_end":381779,"line_start":517,"line_end":517,"column_start":8,"column_end":24},"name":"as_green_channel","qualname":"::map::as_green_channel","value":"pub fn as_green_channel<I, C>(&I) -> Image<Rgb<C>> where I: GenericImage<Pixel\n= Luma<C>>, Rgb<C>: Pixel<Subpixel = C>, C: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Creates an RGB image by embedding a grayscale image in its green channel.","sig":null,"attributes":[{"value":"/ Creates an RGB image by embedding a grayscale image in its green channel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381233,"byte_end":381310,"line_start":494,"line_end":494,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381311,"byte_end":381314,"line_start":495,"line_end":495,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381315,"byte_end":381329,"line_start":496,"line_end":496,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381330,"byte_end":381337,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381338,"byte_end":381363,"line_start":498,"line_end":498,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381364,"byte_end":381382,"line_start":499,"line_end":499,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381383,"byte_end":381412,"line_start":500,"line_end":500,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381413,"byte_end":381430,"line_start":501,"line_end":501,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381431,"byte_end":381451,"line_start":502,"line_end":502,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::as_green_channel;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381452,"byte_end":381493,"line_start":503,"line_end":503,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381494,"byte_end":381497,"line_start":504,"line_end":504,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381498,"byte_end":381526,"line_start":505,"line_end":505,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381527,"byte_end":381540,"line_start":506,"line_end":506,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381541,"byte_end":381555,"line_start":507,"line_end":507,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381556,"byte_end":381559,"line_start":508,"line_end":508,"column_start":1,"column_end":4}},{"value":"/ let expected = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381560,"byte_end":381590,"line_start":509,"line_end":509,"column_start":1,"column_end":31}},{"value":"/     [0, 1, 0], [0, 2, 0];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381591,"byte_end":381620,"line_start":510,"line_end":510,"column_start":1,"column_end":30}},{"value":"/     [0, 3, 0], [0, 4, 0]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381621,"byte_end":381651,"line_start":511,"line_end":511,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381652,"byte_end":381655,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ let actual = as_green_channel(&image);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381656,"byte_end":381698,"line_start":513,"line_end":513,"column_start":1,"column_end":43}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381699,"byte_end":381739,"line_start":514,"line_end":514,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381740,"byte_end":381747,"line_start":515,"line_end":515,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":381748,"byte_end":381755,"line_start":516,"line_end":516,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1760},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382548,"byte_end":382560,"line_start":553,"line_end":553,"column_start":8,"column_end":20},"name":"blue_channel","qualname":"::map::blue_channel","value":"pub fn blue_channel<I, C>(&I) -> Image<Luma<C>> where I: GenericImage<Pixel =\nRgb<C>>, Rgb<C>: Pixel<Subpixel = C>, C: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Creates a grayscale image by extracting the blue channel of an RGB image.","sig":null,"attributes":[{"value":"/ Creates a grayscale image by extracting the blue channel of an RGB image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382024,"byte_end":382101,"line_start":530,"line_end":530,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382102,"byte_end":382105,"line_start":531,"line_end":531,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382106,"byte_end":382120,"line_start":532,"line_end":532,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382121,"byte_end":382128,"line_start":533,"line_end":533,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382129,"byte_end":382154,"line_start":534,"line_end":534,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382155,"byte_end":382173,"line_start":535,"line_end":535,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382174,"byte_end":382203,"line_start":536,"line_end":536,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382204,"byte_end":382221,"line_start":537,"line_end":537,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382222,"byte_end":382242,"line_start":538,"line_end":538,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::blue_channel;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382243,"byte_end":382280,"line_start":539,"line_end":539,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382281,"byte_end":382284,"line_start":540,"line_end":540,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382285,"byte_end":382312,"line_start":541,"line_end":541,"column_start":1,"column_end":28}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382313,"byte_end":382342,"line_start":542,"line_end":542,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382343,"byte_end":382374,"line_start":543,"line_end":543,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382375,"byte_end":382378,"line_start":544,"line_end":544,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382379,"byte_end":382410,"line_start":545,"line_end":545,"column_start":1,"column_end":32}},{"value":"/     3, 6;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382411,"byte_end":382424,"line_start":546,"line_end":546,"column_start":1,"column_end":14}},{"value":"/     9, 12);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382425,"byte_end":382440,"line_start":547,"line_end":547,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382441,"byte_end":382444,"line_start":548,"line_end":548,"column_start":1,"column_end":4}},{"value":"/ let actual = blue_channel(&image);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382445,"byte_end":382483,"line_start":549,"line_end":549,"column_start":1,"column_end":39}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382484,"byte_end":382524,"line_start":550,"line_end":550,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382525,"byte_end":382532,"line_start":551,"line_end":551,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382533,"byte_end":382540,"line_start":552,"line_end":552,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1764},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383262,"byte_end":383277,"line_start":585,"line_end":585,"column_start":8,"column_end":23},"name":"as_blue_channel","qualname":"::map::as_blue_channel","value":"pub fn as_blue_channel<I, C>(&I) -> Image<Rgb<C>> where I: GenericImage<Pixel\n= Luma<C>>, Rgb<C>: Pixel<Subpixel = C>, C: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Creates an RGB image by embedding a grayscale image in its blue channel.","sig":null,"attributes":[{"value":"/ Creates an RGB image by embedding a grayscale image in its blue channel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382735,"byte_end":382811,"line_start":562,"line_end":562,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382812,"byte_end":382815,"line_start":563,"line_end":563,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382816,"byte_end":382830,"line_start":564,"line_end":564,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382831,"byte_end":382838,"line_start":565,"line_end":565,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382839,"byte_end":382864,"line_start":566,"line_end":566,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382865,"byte_end":382883,"line_start":567,"line_end":567,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382884,"byte_end":382913,"line_start":568,"line_end":568,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382914,"byte_end":382931,"line_start":569,"line_end":569,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382932,"byte_end":382952,"line_start":570,"line_end":570,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::as_blue_channel;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382953,"byte_end":382993,"line_start":571,"line_end":571,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382994,"byte_end":382997,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":382998,"byte_end":383026,"line_start":573,"line_end":573,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383027,"byte_end":383040,"line_start":574,"line_end":574,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383041,"byte_end":383055,"line_start":575,"line_end":575,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383056,"byte_end":383059,"line_start":576,"line_end":576,"column_start":1,"column_end":4}},{"value":"/ let expected = rgb_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383060,"byte_end":383090,"line_start":577,"line_end":577,"column_start":1,"column_end":31}},{"value":"/     [0, 0, 1], [0, 0, 2];","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383091,"byte_end":383120,"line_start":578,"line_end":578,"column_start":1,"column_end":30}},{"value":"/     [0, 0, 3], [0, 0, 4]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383121,"byte_end":383151,"line_start":579,"line_end":579,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383152,"byte_end":383155,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/ let actual = as_blue_channel(&image);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383156,"byte_end":383197,"line_start":581,"line_end":581,"column_start":1,"column_end":42}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383198,"byte_end":383238,"line_start":582,"line_end":582,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383239,"byte_end":383246,"line_start":583,"line_end":583,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":383247,"byte_end":383254,"line_start":584,"line_end":584,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1769},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/math.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/math.rs","parent":null,"children":[{"krate":0,"index":1770},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1777}],"decl_id":null,"docs":" Assorted mathematical helper functions.\n","sig":null,"attributes":[{"value":"/ Assorted mathematical helper functions.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/math.rs","byte_start":383522,"byte_end":383565,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":1773},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/math.rs","byte_start":383621,"byte_end":383628,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"l1_norm","qualname":"::math::l1_norm","value":"pub fn l1_norm(&[f32]) -> f32","parent":null,"children":[],"decl_id":null,"docs":" L1 norm of a vector.\n","sig":null,"attributes":[{"value":"/ L1 norm of a vector.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/math.rs","byte_start":383589,"byte_end":383613,"line_start":5,"line_end":5,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1775},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/math.rs","byte_start":383734,"byte_end":383741,"line_start":11,"line_end":11,"column_start":8,"column_end":15},"name":"l2_norm","qualname":"::math::l2_norm","value":"pub fn l2_norm(&[f32]) -> f32","parent":null,"children":[],"decl_id":null,"docs":" L2 norm of a vector.\n","sig":null,"attributes":[{"value":"/ L2 norm of a vector.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/math.rs","byte_start":383702,"byte_end":383726,"line_start":10,"line_end":10,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1777},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/math.rs","byte_start":383880,"byte_end":383884,"line_start":16,"line_end":16,"column_start":8,"column_end":12},"name":"cast","qualname":"::math::cast","value":"pub fn cast<T, U>(T) -> U where T: ValueInto<U>","parent":null,"children":[],"decl_id":null,"docs":" Helper for a conversion that we know can't fail.\n","sig":null,"attributes":[{"value":"/ Helper for a conversion that we know can't fail.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/math.rs","byte_start":383820,"byte_end":383872,"line_start":15,"line_end":15,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1780},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"morphology","qualname":"::morphology","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","parent":null,"children":[{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1791},{"krate":0,"index":1794},{"krate":0,"index":1797},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807}],"decl_id":null,"docs":" Functions for computing [morphological operators].","sig":null,"attributes":[{"value":"/ Functions for computing [morphological operators].","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384034,"byte_end":384088,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384089,"byte_end":384092,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [morphological operators]: https://homepages.inf.ed.ac.uk/rbf/HIPR2/morops.htm","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384093,"byte_end":384175,"line_start":3,"line_end":3,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":1800},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385496,"byte_end":385502,"line_start":56,"line_end":56,"column_start":8,"column_end":14},"name":"dilate","qualname":"::morphology::dilate","value":"pub fn dilate(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a foreground pixel to white.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a foreground pixel to white.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384322,"byte_end":384393,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384394,"byte_end":384397,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384398,"byte_end":384481,"line_start":13,"line_end":13,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384482,"byte_end":384485,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384486,"byte_end":384500,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384501,"byte_end":384508,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384509,"byte_end":384534,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384535,"byte_end":384553,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384554,"byte_end":384583,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384584,"byte_end":384601,"line_start":20,"line_end":20,"column_start":1,"column_end":18}},{"value":"/ use image::GrayImage;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384602,"byte_end":384627,"line_start":21,"line_end":21,"column_start":1,"column_end":26}},{"value":"/ use imageproc::morphology::dilate;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384628,"byte_end":384666,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384667,"byte_end":384711,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384712,"byte_end":384715,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384716,"byte_end":384744,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384745,"byte_end":384775,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384776,"byte_end":384806,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/     0,   0, 255,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384807,"byte_end":384837,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384838,"byte_end":384868,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384869,"byte_end":384898,"line_start":30,"line_end":30,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384899,"byte_end":384905,"line_start":31,"line_end":31,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384906,"byte_end":384909,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // L1 norm","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384910,"byte_end":384924,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/ let l1_dilated = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384925,"byte_end":384958,"line_start":34,"line_end":34,"column_start":1,"column_end":34}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384959,"byte_end":384989,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/     0,   0, 255,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":384990,"byte_end":385020,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/     0, 255, 255, 255,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385021,"byte_end":385051,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/     0,   0, 255,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385052,"byte_end":385082,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385083,"byte_end":385112,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385113,"byte_end":385119,"line_start":40,"line_end":40,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385120,"byte_end":385123,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(dilate(&image, Norm::L1, 1), l1_dilated);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385124,"byte_end":385187,"line_start":42,"line_end":42,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385188,"byte_end":385191,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // LInf norm","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385192,"byte_end":385208,"line_start":44,"line_end":44,"column_start":1,"column_end":17}},{"value":"/ let linf_dilated = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385209,"byte_end":385244,"line_start":45,"line_end":45,"column_start":1,"column_end":36}},{"value":"/    0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385245,"byte_end":385274,"line_start":46,"line_end":46,"column_start":1,"column_end":30}},{"value":"/    0, 255, 255, 255,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385275,"byte_end":385304,"line_start":47,"line_end":47,"column_start":1,"column_end":30}},{"value":"/    0, 255, 255, 255,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385305,"byte_end":385334,"line_start":48,"line_end":48,"column_start":1,"column_end":30}},{"value":"/    0, 255, 255, 255,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385335,"byte_end":385364,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"/    0,   0,   0,   0,   0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385365,"byte_end":385393,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385394,"byte_end":385400,"line_start":51,"line_end":51,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385401,"byte_end":385404,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(dilate(&image, Norm::LInf, 1), linf_dilated);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385405,"byte_end":385472,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385473,"byte_end":385480,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385481,"byte_end":385488,"line_start":55,"line_end":55,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1801},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385873,"byte_end":385883,"line_start":67,"line_end":67,"column_start":8,"column_end":18},"name":"dilate_mut","qualname":"::morphology::dilate_mut","value":"pub fn dilate_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a foreground pixel to white.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a foreground pixel to white.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385635,"byte_end":385706,"line_start":62,"line_end":62,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385707,"byte_end":385710,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385711,"byte_end":385794,"line_start":64,"line_end":64,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385795,"byte_end":385798,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ See the [`dilate`](fn.dilate.html) documentation for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":385799,"byte_end":385865,"line_start":66,"line_end":66,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":1802},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388377,"byte_end":388382,"line_start":134,"line_end":134,"column_start":8,"column_end":13},"name":"erode","qualname":"::morphology::erode","value":"pub fn erode(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a background pixel to black.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a background pixel to black.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386054,"byte_end":386125,"line_start":74,"line_end":74,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386126,"byte_end":386129,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386130,"byte_end":386213,"line_start":76,"line_end":76,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386214,"byte_end":386217,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386218,"byte_end":386232,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386233,"byte_end":386240,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386241,"byte_end":386266,"line_start":80,"line_end":80,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386267,"byte_end":386285,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386286,"byte_end":386315,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386316,"byte_end":386333,"line_start":83,"line_end":83,"column_start":1,"column_end":18}},{"value":"/ use image::GrayImage;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386334,"byte_end":386359,"line_start":84,"line_end":84,"column_start":1,"column_end":26}},{"value":"/ use imageproc::morphology::erode;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386360,"byte_end":386397,"line_start":85,"line_end":85,"column_start":1,"column_end":38}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386398,"byte_end":386442,"line_start":86,"line_end":86,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386443,"byte_end":386446,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386447,"byte_end":386475,"line_start":88,"line_end":88,"column_start":1,"column_end":29}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386476,"byte_end":386525,"line_start":89,"line_end":89,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386526,"byte_end":386575,"line_start":90,"line_end":90,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386576,"byte_end":386625,"line_start":91,"line_end":91,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386626,"byte_end":386675,"line_start":92,"line_end":92,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255,   0, 255, 255, 255,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386676,"byte_end":386725,"line_start":93,"line_end":93,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386726,"byte_end":386775,"line_start":94,"line_end":94,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386776,"byte_end":386825,"line_start":95,"line_end":95,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386826,"byte_end":386875,"line_start":96,"line_end":96,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386876,"byte_end":386924,"line_start":97,"line_end":97,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386925,"byte_end":386931,"line_start":98,"line_end":98,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386932,"byte_end":386935,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ // L1 norm - the outermost foreground pixels are eroded,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386936,"byte_end":386996,"line_start":100,"line_end":100,"column_start":1,"column_end":61}},{"value":"/ // as well as those horizontally and vertically adjacent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":386997,"byte_end":387057,"line_start":101,"line_end":101,"column_start":1,"column_end":61}},{"value":"/ // to the centre background pixel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387058,"byte_end":387096,"line_start":102,"line_end":102,"column_start":1,"column_end":39}},{"value":"/ let l1_eroded = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387097,"byte_end":387129,"line_start":103,"line_end":103,"column_start":1,"column_end":33}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387130,"byte_end":387179,"line_start":104,"line_end":104,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387180,"byte_end":387229,"line_start":105,"line_end":105,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387230,"byte_end":387279,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255,   0, 255, 255,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387280,"byte_end":387329,"line_start":107,"line_end":107,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387330,"byte_end":387379,"line_start":108,"line_end":108,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255,   0, 255, 255,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387380,"byte_end":387429,"line_start":109,"line_end":109,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387430,"byte_end":387479,"line_start":110,"line_end":110,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387480,"byte_end":387529,"line_start":111,"line_end":111,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387530,"byte_end":387578,"line_start":112,"line_end":112,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387579,"byte_end":387585,"line_start":113,"line_end":113,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387586,"byte_end":387589,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(erode(&image, Norm::L1, 1), l1_eroded);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387590,"byte_end":387651,"line_start":115,"line_end":115,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387652,"byte_end":387655,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ // LInf norm - all pixels eroded using the L1 norm are eroded,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387656,"byte_end":387722,"line_start":117,"line_end":117,"column_start":1,"column_end":67}},{"value":"/ // as well as the pixels diagonally adjacent to the centre pixel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387723,"byte_end":387792,"line_start":118,"line_end":118,"column_start":1,"column_end":70}},{"value":"/ let linf_eroded = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387793,"byte_end":387827,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387828,"byte_end":387877,"line_start":120,"line_end":120,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387878,"byte_end":387927,"line_start":121,"line_end":121,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387928,"byte_end":387977,"line_start":122,"line_end":122,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":387978,"byte_end":388027,"line_start":123,"line_end":123,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388028,"byte_end":388077,"line_start":124,"line_end":124,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388078,"byte_end":388127,"line_start":125,"line_end":125,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388128,"byte_end":388177,"line_start":126,"line_end":126,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388178,"byte_end":388227,"line_start":127,"line_end":127,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388228,"byte_end":388276,"line_start":128,"line_end":128,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388277,"byte_end":388283,"line_start":129,"line_end":129,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388284,"byte_end":388287,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(erode(&image, Norm::LInf, 1), linf_eroded);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388288,"byte_end":388353,"line_start":131,"line_end":131,"column_start":1,"column_end":66}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388354,"byte_end":388361,"line_start":132,"line_end":132,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388362,"byte_end":388369,"line_start":133,"line_end":133,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1803},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388750,"byte_end":388759,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"erode_mut","qualname":"::morphology::erode_mut","value":"pub fn erode_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a background pixel to black.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a background pixel to black.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388514,"byte_end":388585,"line_start":140,"line_end":140,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388586,"byte_end":388589,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388590,"byte_end":388673,"line_start":142,"line_end":142,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388674,"byte_end":388677,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ See the [`erode`](fn.erode.html) documentation for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388678,"byte_end":388742,"line_start":144,"line_end":144,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1804},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390237,"byte_end":390241,"line_start":203,"line_end":203,"column_start":8,"column_end":12},"name":"open","qualname":"::morphology::open","value":"pub fn open(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Erosion followed by dilation.","sig":null,"attributes":[{"value":"/ Erosion followed by dilation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388957,"byte_end":388990,"line_start":152,"line_end":152,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388991,"byte_end":388994,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ See the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":388995,"byte_end":389062,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389063,"byte_end":389121,"line_start":155,"line_end":155,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389122,"byte_end":389125,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389126,"byte_end":389140,"line_start":157,"line_end":157,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389141,"byte_end":389148,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389149,"byte_end":389174,"line_start":159,"line_end":159,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389175,"byte_end":389193,"line_start":160,"line_end":160,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389194,"byte_end":389223,"line_start":161,"line_end":161,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389224,"byte_end":389241,"line_start":162,"line_end":162,"column_start":1,"column_end":18}},{"value":"/ use imageproc::morphology::open;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389242,"byte_end":389278,"line_start":163,"line_end":163,"column_start":1,"column_end":37}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389279,"byte_end":389323,"line_start":164,"line_end":164,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389324,"byte_end":389327,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ // Isolated regions of foreground pixels are removed.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389328,"byte_end":389385,"line_start":166,"line_end":166,"column_start":1,"column_end":58}},{"value":"/ let cross = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389386,"byte_end":389414,"line_start":167,"line_end":167,"column_start":1,"column_end":29}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389415,"byte_end":389447,"line_start":168,"line_end":168,"column_start":1,"column_end":33}},{"value":"/       0,   0, 255,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389448,"byte_end":389480,"line_start":169,"line_end":169,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389481,"byte_end":389513,"line_start":170,"line_end":170,"column_start":1,"column_end":33}},{"value":"/       0,   0, 255,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389514,"byte_end":389546,"line_start":171,"line_end":171,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389547,"byte_end":389578,"line_start":172,"line_end":172,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389579,"byte_end":389585,"line_start":173,"line_end":173,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389586,"byte_end":389589,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ let opened_cross = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389590,"byte_end":389625,"line_start":175,"line_end":175,"column_start":1,"column_end":36}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389626,"byte_end":389658,"line_start":176,"line_end":176,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389659,"byte_end":389691,"line_start":177,"line_end":177,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389692,"byte_end":389724,"line_start":178,"line_end":178,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389725,"byte_end":389757,"line_start":179,"line_end":179,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389758,"byte_end":389789,"line_start":180,"line_end":180,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389790,"byte_end":389796,"line_start":181,"line_end":181,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389797,"byte_end":389800,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389801,"byte_end":389823,"line_start":183,"line_end":183,"column_start":1,"column_end":23}},{"value":"/     open(&cross, Norm::LInf, 1),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389824,"byte_end":389860,"line_start":184,"line_end":184,"column_start":1,"column_end":37}},{"value":"/     opened_cross","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389861,"byte_end":389881,"line_start":185,"line_end":185,"column_start":1,"column_end":21}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389882,"byte_end":389888,"line_start":186,"line_end":186,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389889,"byte_end":389892,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ // Large blocks survive unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389893,"byte_end":389931,"line_start":188,"line_end":188,"column_start":1,"column_end":39}},{"value":"/ let blob = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389932,"byte_end":389959,"line_start":189,"line_end":189,"column_start":1,"column_end":28}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389960,"byte_end":389992,"line_start":190,"line_end":190,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":389993,"byte_end":390025,"line_start":191,"line_end":191,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390026,"byte_end":390058,"line_start":192,"line_end":192,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390059,"byte_end":390091,"line_start":193,"line_end":193,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390092,"byte_end":390123,"line_start":194,"line_end":194,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390124,"byte_end":390130,"line_start":195,"line_end":195,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390131,"byte_end":390134,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390135,"byte_end":390157,"line_start":197,"line_end":197,"column_start":1,"column_end":23}},{"value":"/     open(&blob, Norm::LInf, 1),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390158,"byte_end":390193,"line_start":198,"line_end":198,"column_start":1,"column_end":36}},{"value":"/     blob","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390194,"byte_end":390206,"line_start":199,"line_end":199,"column_start":1,"column_end":13}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390207,"byte_end":390213,"line_start":200,"line_end":200,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390214,"byte_end":390221,"line_start":201,"line_end":201,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390222,"byte_end":390229,"line_start":202,"line_end":202,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1805},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390607,"byte_end":390615,"line_start":214,"line_end":214,"column_start":8,"column_end":16},"name":"open_mut","qualname":"::morphology::open_mut","value":"pub fn open_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Erosion followed by dilation.","sig":null,"attributes":[{"value":"/ Erosion followed by dilation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390372,"byte_end":390405,"line_start":209,"line_end":209,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390406,"byte_end":390409,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ See the [`open`](fn.open.html) documentation for examples,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390410,"byte_end":390472,"line_start":211,"line_end":211,"column_start":1,"column_end":63}},{"value":"/ and the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390473,"byte_end":390540,"line_start":212,"line_end":212,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390541,"byte_end":390599,"line_start":213,"line_end":213,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":1806},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393079,"byte_end":393084,"line_start":308,"line_end":308,"column_start":8,"column_end":13},"name":"close","qualname":"::morphology::close","value":"pub fn close(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Dilation followed by erosion.","sig":null,"attributes":[{"value":"/ Dilation followed by erosion.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390726,"byte_end":390759,"line_start":219,"line_end":219,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390760,"byte_end":390763,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ See the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390764,"byte_end":390831,"line_start":221,"line_end":221,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390832,"byte_end":390890,"line_start":222,"line_end":222,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390891,"byte_end":390894,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390895,"byte_end":390909,"line_start":224,"line_end":224,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390910,"byte_end":390917,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390918,"byte_end":390943,"line_start":226,"line_end":226,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390944,"byte_end":390962,"line_start":227,"line_end":227,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390963,"byte_end":390992,"line_start":228,"line_end":228,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":390993,"byte_end":391010,"line_start":229,"line_end":229,"column_start":1,"column_end":18}},{"value":"/ use imageproc::morphology::close;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391011,"byte_end":391048,"line_start":230,"line_end":230,"column_start":1,"column_end":38}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391049,"byte_end":391093,"line_start":231,"line_end":231,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391094,"byte_end":391097,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ // Small holes are closed - hence the name.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391098,"byte_end":391145,"line_start":233,"line_end":233,"column_start":1,"column_end":48}},{"value":"/ let small_hole = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391146,"byte_end":391179,"line_start":234,"line_end":234,"column_start":1,"column_end":34}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391180,"byte_end":391207,"line_start":235,"line_end":235,"column_start":1,"column_end":28}},{"value":"/     255,   0,   0, 255;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391208,"byte_end":391235,"line_start":236,"line_end":236,"column_start":1,"column_end":28}},{"value":"/     255,   0,   0, 255;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391236,"byte_end":391263,"line_start":237,"line_end":237,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391264,"byte_end":391290,"line_start":238,"line_end":238,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391291,"byte_end":391297,"line_start":239,"line_end":239,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391298,"byte_end":391301,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ let closed_small_hole = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391302,"byte_end":391342,"line_start":241,"line_end":241,"column_start":1,"column_end":41}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391343,"byte_end":391370,"line_start":242,"line_end":242,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391371,"byte_end":391398,"line_start":243,"line_end":243,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391399,"byte_end":391426,"line_start":244,"line_end":244,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391427,"byte_end":391453,"line_start":245,"line_end":245,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391454,"byte_end":391460,"line_start":246,"line_end":246,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391461,"byte_end":391464,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391465,"byte_end":391487,"line_start":248,"line_end":248,"column_start":1,"column_end":23}},{"value":"/     close(&small_hole, Norm::LInf, 1),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391488,"byte_end":391530,"line_start":249,"line_end":249,"column_start":1,"column_end":43}},{"value":"/     closed_small_hole","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391531,"byte_end":391556,"line_start":250,"line_end":250,"column_start":1,"column_end":26}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391557,"byte_end":391563,"line_start":251,"line_end":251,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391564,"byte_end":391567,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ // Large holes survive unchanged.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391568,"byte_end":391605,"line_start":253,"line_end":253,"column_start":1,"column_end":38}},{"value":"/ let large_hole = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391606,"byte_end":391639,"line_start":254,"line_end":254,"column_start":1,"column_end":34}},{"value":"/     255, 255, 255, 255, 255;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391640,"byte_end":391672,"line_start":255,"line_end":255,"column_start":1,"column_end":33}},{"value":"/     255,   0,   0,   0, 255;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391673,"byte_end":391705,"line_start":256,"line_end":256,"column_start":1,"column_end":33}},{"value":"/     255,   0,   0,   0, 255;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391706,"byte_end":391738,"line_start":257,"line_end":257,"column_start":1,"column_end":33}},{"value":"/     255,   0,   0,   0, 255;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391739,"byte_end":391771,"line_start":258,"line_end":258,"column_start":1,"column_end":33}},{"value":"/     255, 255, 255, 255, 255","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391772,"byte_end":391803,"line_start":259,"line_end":259,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391804,"byte_end":391810,"line_start":260,"line_end":260,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391811,"byte_end":391814,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391815,"byte_end":391837,"line_start":262,"line_end":262,"column_start":1,"column_end":23}},{"value":"/     close(&large_hole, Norm::LInf, 1),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391838,"byte_end":391880,"line_start":263,"line_end":263,"column_start":1,"column_end":43}},{"value":"/     large_hole","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391881,"byte_end":391899,"line_start":264,"line_end":264,"column_start":1,"column_end":19}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391900,"byte_end":391906,"line_start":265,"line_end":265,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391907,"byte_end":391910,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ // A dot gains a layer of foreground pixels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391911,"byte_end":391958,"line_start":267,"line_end":267,"column_start":1,"column_end":48}},{"value":"/ // when dilated and loses them again when eroded,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":391959,"byte_end":392012,"line_start":268,"line_end":268,"column_start":1,"column_end":54}},{"value":"/ // resulting in no change.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392013,"byte_end":392043,"line_start":269,"line_end":269,"column_start":1,"column_end":31}},{"value":"/ let dot = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392044,"byte_end":392070,"line_start":270,"line_end":270,"column_start":1,"column_end":27}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392071,"byte_end":392103,"line_start":271,"line_end":271,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392104,"byte_end":392136,"line_start":272,"line_end":272,"column_start":1,"column_end":33}},{"value":"/       0,   0, 255,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392137,"byte_end":392169,"line_start":273,"line_end":273,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392170,"byte_end":392202,"line_start":274,"line_end":274,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392203,"byte_end":392234,"line_start":275,"line_end":275,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392235,"byte_end":392241,"line_start":276,"line_end":276,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392242,"byte_end":392245,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392246,"byte_end":392268,"line_start":278,"line_end":278,"column_start":1,"column_end":23}},{"value":"/     close(&dot, Norm::LInf, 1),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392269,"byte_end":392304,"line_start":279,"line_end":279,"column_start":1,"column_end":36}},{"value":"/     dot","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392305,"byte_end":392316,"line_start":280,"line_end":280,"column_start":1,"column_end":12}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392317,"byte_end":392323,"line_start":281,"line_end":281,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392324,"byte_end":392327,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ // A dot near the boundary gains pixels in the top-left","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392328,"byte_end":392387,"line_start":283,"line_end":283,"column_start":1,"column_end":60}},{"value":"/ // of the image which are not within distance 1 of any","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392388,"byte_end":392446,"line_start":284,"line_end":284,"column_start":1,"column_end":59}},{"value":"/ // background pixels, so are not removed by erosion.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392447,"byte_end":392503,"line_start":285,"line_end":285,"column_start":1,"column_end":57}},{"value":"/ let dot_near_boundary = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392504,"byte_end":392544,"line_start":286,"line_end":286,"column_start":1,"column_end":41}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392545,"byte_end":392577,"line_start":287,"line_end":287,"column_start":1,"column_end":33}},{"value":"/       0, 255,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392578,"byte_end":392610,"line_start":288,"line_end":288,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392611,"byte_end":392643,"line_start":289,"line_end":289,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392644,"byte_end":392676,"line_start":290,"line_end":290,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392677,"byte_end":392708,"line_start":291,"line_end":291,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392709,"byte_end":392715,"line_start":292,"line_end":292,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392716,"byte_end":392719,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ let closed_dot_near_boundary = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392720,"byte_end":392767,"line_start":294,"line_end":294,"column_start":1,"column_end":48}},{"value":"/     255, 255,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392768,"byte_end":392800,"line_start":295,"line_end":295,"column_start":1,"column_end":33}},{"value":"/     255, 255,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392801,"byte_end":392833,"line_start":296,"line_end":296,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392834,"byte_end":392866,"line_start":297,"line_end":297,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392867,"byte_end":392899,"line_start":298,"line_end":298,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392900,"byte_end":392931,"line_start":299,"line_end":299,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392932,"byte_end":392938,"line_start":300,"line_end":300,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392939,"byte_end":392942,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392943,"byte_end":392965,"line_start":302,"line_end":302,"column_start":1,"column_end":23}},{"value":"/     close(&dot_near_boundary, Norm::LInf, 1),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":392966,"byte_end":393015,"line_start":303,"line_end":303,"column_start":1,"column_end":50}},{"value":"/     closed_dot_near_boundary","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393016,"byte_end":393048,"line_start":304,"line_end":304,"column_start":1,"column_end":33}},{"value":"/ );","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393049,"byte_end":393055,"line_start":305,"line_end":305,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393056,"byte_end":393063,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393064,"byte_end":393071,"line_start":307,"line_end":307,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1807},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393453,"byte_end":393462,"line_start":319,"line_end":319,"column_start":8,"column_end":17},"name":"close_mut","qualname":"::morphology::close_mut","value":"pub fn close_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Dilation followed by erosion.","sig":null,"attributes":[{"value":"/ Dilation followed by erosion.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393216,"byte_end":393249,"line_start":314,"line_end":314,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393250,"byte_end":393253,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ See the [`close`](fn.close.html) documentation for examples,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393254,"byte_end":393318,"line_start":316,"line_end":316,"column_start":1,"column_end":65}},{"value":"/ and the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393319,"byte_end":393386,"line_start":317,"line_end":317,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/morphology.rs","byte_start":393387,"byte_end":393445,"line_start":318,"line_end":318,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":1808},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"noise","qualname":"::noise","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","parent":null,"children":[{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1813},{"krate":0,"index":1816},{"krate":0,"index":1819},{"krate":0,"index":1822},{"krate":0,"index":1825},{"krate":0,"index":1828},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1835},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1842},{"krate":0,"index":1845},{"krate":0,"index":1848},{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1854}],"decl_id":null,"docs":" Functions for adding synthetic noise to images.\n","sig":null,"attributes":[{"value":"/ Functions for adding synthetic noise to images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":398040,"byte_end":398091,"line_start":1,"line_end":1,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1848},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":398433,"byte_end":398447,"line_start":12,"line_end":12,"column_start":8,"column_end":22},"name":"gaussian_noise","qualname":"::noise::gaussian_noise","value":"pub fn gaussian_noise<P>(&Image<P>, f64, f64, u64) -> Image<P> where P: Pixel,\nP::Subpixel: ValueInto<f64> + Clamp<f64>","parent":null,"children":[],"decl_id":null,"docs":" Adds independent additive Gaussian noise to all channels\n of an image, with the given mean and standard deviation.\n","sig":null,"attributes":[{"value":"/ Adds independent additive Gaussian noise to all channels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":398304,"byte_end":398364,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ of an image, with the given mean and standard deviation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":398365,"byte_end":398425,"line_start":11,"line_end":11,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":1850},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":398820,"byte_end":398838,"line_start":24,"line_end":24,"column_start":8,"column_end":26},"name":"gaussian_noise_mut","qualname":"::noise::gaussian_noise_mut","value":"pub fn gaussian_noise_mut<P>(&mut Image<P>, f64, f64, u64) where P: Pixel,\nP::Subpixel: ValueInto<f64> + Clamp<f64>","parent":null,"children":[],"decl_id":null,"docs":" Adds independent additive Gaussian noise to all channels\n of an image in place, with the given mean and standard deviation.\n","sig":null,"attributes":[{"value":"/ Adds independent additive Gaussian noise to all channels","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":398682,"byte_end":398742,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/ of an image in place, with the given mean and standard deviation.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":398743,"byte_end":398812,"line_start":23,"line_end":23,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":1852},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":399412,"byte_end":399433,"line_start":42,"line_end":42,"column_start":8,"column_end":29},"name":"salt_and_pepper_noise","qualname":"::noise::salt_and_pepper_noise","value":"pub fn salt_and_pepper_noise<P>(&Image<P>, f64, u64) -> Image<P> where\nP: Pixel + HasBlack + HasWhite","parent":null,"children":[],"decl_id":null,"docs":" Converts pixels to black or white at the given `rate` (between 0.0 and 1.0).\n Black and white occur with equal probability.\n","sig":null,"attributes":[{"value":"/ Converts pixels to black or white at the given `rate` (between 0.0 and 1.0).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":399274,"byte_end":399354,"line_start":40,"line_end":40,"column_start":1,"column_end":81}},{"value":"/ Black and white occur with equal probability.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":399355,"byte_end":399404,"line_start":41,"line_end":41,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1854},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":399777,"byte_end":399802,"line_start":53,"line_end":53,"column_start":8,"column_end":33},"name":"salt_and_pepper_noise_mut","qualname":"::noise::salt_and_pepper_noise_mut","value":"pub fn salt_and_pepper_noise_mut<P>(&mut Image<P>, f64, u64) where P: Pixel +\nHasBlack + HasWhite","parent":null,"children":[],"decl_id":null,"docs":" Converts pixels to black or white in place at the given `rate` (between 0.0 and 1.0).\n Black and white occur with equal probability.\n","sig":null,"attributes":[{"value":"/ Converts pixels to black or white in place at the given `rate` (between 0.0 and 1.0).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":399630,"byte_end":399719,"line_start":51,"line_end":51,"column_start":1,"column_end":90}},{"value":"/ Black and white occur with equal probability.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/noise.rs","byte_start":399720,"byte_end":399769,"line_start":52,"line_end":52,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":1856},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pixelops","qualname":"::pixelops","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","parent":null,"children":[{"krate":0,"index":1857},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":1866},{"krate":0,"index":1869},{"krate":0,"index":1872},{"krate":0,"index":1874}],"decl_id":null,"docs":" Pixel manipulations.\n","sig":null,"attributes":[{"value":"/ Pixel manipulations.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":400811,"byte_end":400835,"line_start":1,"line_end":1,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1869},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401394,"byte_end":401406,"line_start":25,"line_end":25,"column_start":8,"column_end":20},"name":"weighted_sum","qualname":"::pixelops::weighted_sum","value":"pub fn weighted_sum<P: Pixel>(P, P, f32, f32) -> P where\nP::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Adds pixels with the given weights. Results are clamped to prevent arithmetical overflows.","sig":null,"attributes":[{"value":"/ Adds pixels with the given weights. Results are clamped to prevent arithmetical overflows.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":400931,"byte_end":401025,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401026,"byte_end":401029,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401030,"byte_end":401044,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401045,"byte_end":401052,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401053,"byte_end":401078,"line_start":12,"line_end":12,"column_start":1,"column_end":26}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401079,"byte_end":401108,"line_start":13,"line_end":13,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401109,"byte_end":401126,"line_start":14,"line_end":14,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401127,"byte_end":401146,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"/ use imageproc::pixelops::weighted_sum;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401147,"byte_end":401189,"line_start":16,"line_end":16,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401190,"byte_end":401193,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let left = Rgb([10u8, 20u8, 30u8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401194,"byte_end":401233,"line_start":18,"line_end":18,"column_start":1,"column_end":40}},{"value":"/ let right = Rgb([100u8, 80u8, 60u8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401234,"byte_end":401275,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401276,"byte_end":401279,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let sum = weighted_sum(left, right, 0.7, 0.3);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401280,"byte_end":401330,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(sum, Rgb([37, 38, 39]));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401331,"byte_end":401370,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401371,"byte_end":401378,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401379,"byte_end":401386,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1872},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":402073,"byte_end":402084,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"interpolate","qualname":"::pixelops::interpolate","value":"pub fn interpolate<P: Pixel>(P, P, f32) -> P where\nP::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `weighted_sum(left, right, left_weight, 1 - left_weight)`.","sig":null,"attributes":[{"value":"/ Equivalent to `weighted_sum(left, right, left_weight, 1 - left_weight)`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401635,"byte_end":401711,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401712,"byte_end":401715,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401716,"byte_end":401730,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401731,"byte_end":401738,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401739,"byte_end":401764,"line_start":38,"line_end":38,"column_start":1,"column_end":26}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401765,"byte_end":401794,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401795,"byte_end":401812,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401813,"byte_end":401832,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"/ use imageproc::pixelops::interpolate;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401833,"byte_end":401874,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401875,"byte_end":401878,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ let left = Rgb([10u8, 20u8, 30u8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401879,"byte_end":401918,"line_start":44,"line_end":44,"column_start":1,"column_end":40}},{"value":"/ let right = Rgb([100u8, 80u8, 60u8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401919,"byte_end":401960,"line_start":45,"line_end":45,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401961,"byte_end":401964,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let sum = interpolate(left, right, 0.7);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":401965,"byte_end":402009,"line_start":47,"line_end":47,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(sum, Rgb([37, 38, 39]));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":402010,"byte_end":402049,"line_start":48,"line_end":48,"column_start":1,"column_end":40}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":402050,"byte_end":402057,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/pixelops.rs","byte_start":402058,"byte_end":402065,"line_start":50,"line_end":50,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1876},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"point","qualname":"::point","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","parent":null,"children":[{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1888},{"krate":0,"index":1891},{"krate":0,"index":1894},{"krate":0,"index":2590},{"krate":0,"index":2594},{"krate":0,"index":2597},{"krate":0,"index":2599},{"krate":0,"index":2602},{"krate":0,"index":2604},{"krate":0,"index":2608},{"krate":0,"index":2610},{"krate":0,"index":1897},{"krate":0,"index":1900},{"krate":0,"index":1904},{"krate":0,"index":1907},{"krate":0,"index":1911},{"krate":0,"index":1914},{"krate":0,"index":1918},{"krate":0,"index":1920},{"krate":0,"index":2613},{"krate":0,"index":2616},{"krate":0,"index":2618},{"krate":0,"index":2619},{"krate":0,"index":2621},{"krate":0,"index":2622},{"krate":0,"index":1922},{"krate":0,"index":1924},{"krate":0,"index":2625},{"krate":0,"index":2629},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":1927}],"decl_id":null,"docs":" A 2d point type.\n","sig":null,"attributes":[{"value":"/ A 2d point type.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404310,"byte_end":404330,"line_start":1,"line_end":1,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":2590},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404478,"byte_end":404483,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"Point","qualname":"::point::Point","value":"Point { x, y }","parent":null,"children":[{"krate":0,"index":2592},{"krate":0,"index":2593}],"decl_id":null,"docs":" A 2d point.\n","sig":null,"attributes":[{"value":"/ A 2d point.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404406,"byte_end":404421,"line_start":6,"line_end":6,"column_start":1,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":2592},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404519,"byte_end":404520,"line_start":10,"line_end":10,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point::x","value":"T","parent":{"krate":0,"index":2590},"children":[],"decl_id":null,"docs":" x-coordinate.\n","sig":null,"attributes":[{"value":"/ x-coordinate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404493,"byte_end":404510,"line_start":9,"line_end":9,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":2593},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404555,"byte_end":404556,"line_start":12,"line_end":12,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point::y","value":"T","parent":{"krate":0,"index":2590},"children":[],"decl_id":null,"docs":" y-coordinate.\n","sig":null,"attributes":[{"value":"/ y-coordinate.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404529,"byte_end":404546,"line_start":11,"line_end":11,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404631,"byte_end":404634,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<Point<T>>::new","value":"pub fn new(T, T) -> Point<T>","parent":null,"children":[],"decl_id":null,"docs":" Construct a point at (x, y).\n","sig":null,"attributes":[{"value":"/ Construct a point at (x, y).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404587,"byte_end":404619,"line_start":16,"line_end":16,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":1930},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rect","qualname":"::rect","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","parent":null,"children":[{"krate":0,"index":1931},{"krate":0,"index":2638},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2646},{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":1934},{"krate":0,"index":1937},{"krate":0,"index":1946},{"krate":0,"index":1948},{"krate":0,"index":2655},{"krate":0,"index":2658},{"krate":0,"index":2659},{"krate":0,"index":2661},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":1950}],"decl_id":null,"docs":" Basic manipulation of rectangles.\n","sig":null,"attributes":[{"value":"/ Basic manipulation of rectangles.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408571,"byte_end":408608,"line_start":1,"line_end":1,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2638},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409321,"byte_end":409325,"line_start":25,"line_end":25,"column_start":12,"column_end":16},"name":"Rect","qualname":"::rect::Rect","value":"Rect {  }","parent":null,"children":[{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642}],"decl_id":null,"docs":" A rectangular region of non-zero width and height.\n # Examples\n ```\n use imageproc::rect::Rect;\n use imageproc::rect::Region;","sig":null,"attributes":[{"value":"/ A rectangular region of non-zero width and height.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408625,"byte_end":408679,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408680,"byte_end":408694,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408695,"byte_end":408702,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use imageproc::rect::Rect;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408703,"byte_end":408733,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/ use imageproc::rect::Region;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408734,"byte_end":408766,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408767,"byte_end":408770,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ // Construct a rectangle with top-left corner at (4, 5), width 6 and height 7.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408771,"byte_end":408853,"line_start":11,"line_end":11,"column_start":1,"column_end":83}},{"value":"/ let rect = Rect::at(4, 5).of_size(6, 7);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408854,"byte_end":408898,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408899,"byte_end":408902,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ // Contains top-left point:","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408903,"byte_end":408934,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(rect.left(), 4);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408935,"byte_end":408966,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(rect.top(), 5);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408967,"byte_end":408997,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ assert!(rect.contains(rect.left(), rect.top()));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":408998,"byte_end":409050,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409051,"byte_end":409054,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // Contains bottom-right point, at (left + width - 1, top + height - 1):","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409055,"byte_end":409131,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(rect.right(), 9);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409132,"byte_end":409164,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(rect.bottom(), 11);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409165,"byte_end":409199,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/ assert!(rect.contains(rect.right(), rect.bottom()));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409200,"byte_end":409256,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409257,"byte_end":409264,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":1934},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409482,"byte_end":409488,"line_start":33,"line_end":33,"column_start":11,"column_end":17},"name":"Region","qualname":"::rect::Region","value":"Region<T>","parent":null,"children":[{"krate":0,"index":1936}],"decl_id":null,"docs":" A geometrical representation of a set of 2D points with coordinate type T.\n","sig":null,"attributes":[{"value":"/ A geometrical representation of a set of 2D points with coordinate type T.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409393,"byte_end":409471,"line_start":32,"line_end":32,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409555,"byte_end":409563,"line_start":35,"line_end":35,"column_start":8,"column_end":16},"name":"contains","qualname":"::rect::Region::contains","value":"pub fn contains(&Self, T, T) -> bool","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Whether this region contains the given point.\n","sig":null,"attributes":[{"value":"/ Whether this region contains the given point.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409498,"byte_end":409547,"line_start":34,"line_end":34,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1938},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409802,"byte_end":409804,"line_start":43,"line_end":43,"column_start":12,"column_end":14},"name":"at","qualname":"<Rect>::at","value":"pub fn at(i32, i32) -> RectPosition","parent":null,"children":[],"decl_id":null,"docs":" Reduces possibility of confusing coordinates and dimensions\n when specifying rects.","sig":null,"attributes":[{"value":"/ Reduces possibility of confusing coordinates and dimensions","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409611,"byte_end":409674,"line_start":39,"line_end":39,"column_start":5,"column_end":68}},{"value":"/ when specifying rects.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409679,"byte_end":409705,"line_start":40,"line_end":40,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409710,"byte_end":409713,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409718,"byte_end":409790,"line_start":42,"line_end":42,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1939},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410030,"byte_end":410033,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"top","qualname":"<Rect>::top","value":"pub fn top(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Smallest y-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Smallest y-coordinate reached by rect.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409891,"byte_end":409933,"line_start":47,"line_end":47,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409938,"byte_end":409941,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409946,"byte_end":410018,"line_start":49,"line_end":49,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1940},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410217,"byte_end":410221,"line_start":57,"line_end":57,"column_start":12,"column_end":16},"name":"left","qualname":"<Rect>::left","value":"pub fn left(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Smallest x-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Smallest x-coordinate reached by rect.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410078,"byte_end":410120,"line_start":54,"line_end":54,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410125,"byte_end":410128,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410133,"byte_end":410205,"line_start":56,"line_end":56,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1941},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410406,"byte_end":410412,"line_start":64,"line_end":64,"column_start":12,"column_end":18},"name":"bottom","qualname":"<Rect>::bottom","value":"pub fn bottom(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Greatest y-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Greatest y-coordinate reached by rect.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410267,"byte_end":410309,"line_start":61,"line_end":61,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410314,"byte_end":410317,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410322,"byte_end":410394,"line_start":63,"line_end":63,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1942},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410623,"byte_end":410628,"line_start":71,"line_end":71,"column_start":12,"column_end":17},"name":"right","qualname":"<Rect>::right","value":"pub fn right(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Greatest x-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Greatest x-coordinate reached by rect.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410484,"byte_end":410526,"line_start":68,"line_end":68,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410531,"byte_end":410534,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410539,"byte_end":410611,"line_start":70,"line_end":70,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410730,"byte_end":410735,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"width","qualname":"<Rect>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Width of rect.\n","sig":null,"attributes":[{"value":"/ Width of rect.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410700,"byte_end":410718,"line_start":75,"line_end":75,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1944},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410813,"byte_end":410819,"line_start":81,"line_end":81,"column_start":12,"column_end":18},"name":"height","qualname":"<Rect>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Height of rect.\n","sig":null,"attributes":[{"value":"/ Height of rect.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410782,"byte_end":410801,"line_start":80,"line_end":80,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1945},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411675,"byte_end":411684,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"intersect","qualname":"<Rect>::intersect","value":"pub fn intersect(&Self, Rect) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" Returns the intersection of self and other, or none if they are are disjoint.","sig":null,"attributes":[{"value":"/ Returns the intersection of self and other, or none if they are are disjoint.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410867,"byte_end":410948,"line_start":85,"line_end":85,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410953,"byte_end":410956,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410961,"byte_end":410975,"line_start":87,"line_end":87,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410980,"byte_end":410987,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ use imageproc::rect::Rect;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":410992,"byte_end":411022,"line_start":89,"line_end":89,"column_start":5,"column_end":35}},{"value":"/ use imageproc::rect::Region;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411027,"byte_end":411059,"line_start":90,"line_end":90,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411064,"byte_end":411067,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ // Intersecting a rectangle with itself","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411072,"byte_end":411115,"line_start":92,"line_end":92,"column_start":5,"column_end":48}},{"value":"/ let r = Rect::at(4, 5).of_size(6, 7);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411120,"byte_end":411161,"line_start":93,"line_end":93,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(r.intersect(r), Some(r));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411166,"byte_end":411206,"line_start":94,"line_end":94,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411211,"byte_end":411214,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ // Intersecting overlapping but non-equal rectangles","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411219,"byte_end":411275,"line_start":96,"line_end":96,"column_start":5,"column_end":61}},{"value":"/ let r = Rect::at(0, 0).of_size(5, 5);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411280,"byte_end":411321,"line_start":97,"line_end":97,"column_start":5,"column_end":46}},{"value":"/ let s = Rect::at(1, 4).of_size(10, 12);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411326,"byte_end":411369,"line_start":98,"line_end":98,"column_start":5,"column_end":48}},{"value":"/ let i = Rect::at(1, 4).of_size(4, 1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411374,"byte_end":411415,"line_start":99,"line_end":99,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(r.intersect(s), Some(i));","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411420,"byte_end":411460,"line_start":100,"line_end":100,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411465,"byte_end":411468,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ // Intersecting disjoint rectangles","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411473,"byte_end":411512,"line_start":102,"line_end":102,"column_start":5,"column_end":44}},{"value":"/ let r = Rect::at(0, 0).of_size(5, 5);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411517,"byte_end":411558,"line_start":103,"line_end":103,"column_start":5,"column_end":46}},{"value":"/ let s = Rect::at(10, 10).of_size(100, 12);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411563,"byte_end":411609,"line_start":104,"line_end":104,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(r.intersect(s), None);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411614,"byte_end":411651,"line_start":105,"line_end":105,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":411656,"byte_end":411663,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2655},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412753,"byte_end":412765,"line_start":144,"line_end":144,"column_start":12,"column_end":24},"name":"RectPosition","qualname":"::rect::RectPosition","value":"RectPosition {  }","parent":null,"children":[{"krate":0,"index":2656},{"krate":0,"index":2657}],"decl_id":null,"docs":" Position of the top left of a rectangle.\n Only used when building a [`Rect`](struct.Rect.html).\n","sig":null,"attributes":[{"value":"/ Position of the top left of a rectangle.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412594,"byte_end":412638,"line_start":141,"line_end":141,"column_start":1,"column_end":45}},{"value":"/ Only used when building a [`Rect`](struct.Rect.html).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412639,"byte_end":412696,"line_start":142,"line_end":142,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1951},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":413029,"byte_end":413036,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"of_size","qualname":"<RectPosition>::of_size","value":"pub fn of_size(Self, u32, u32) -> Rect","parent":null,"children":[],"decl_id":null,"docs":" Construct a rectangle from a position and size. Width and height\n are required to be strictly positive.","sig":null,"attributes":[{"value":"/ Construct a rectangle from a position and size. Width and height","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412824,"byte_end":412892,"line_start":150,"line_end":150,"column_start":5,"column_end":73}},{"value":"/ are required to be strictly positive.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412897,"byte_end":412938,"line_start":151,"line_end":151,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412943,"byte_end":412946,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ See the [`Rect`](struct.Rect.html) documentation for examples.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412951,"byte_end":413017,"line_start":153,"line_end":153,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1952},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"region_labelling","qualname":"::region_labelling","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","parent":null,"children":[{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1957},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":2670},{"krate":0,"index":2675},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2683},{"krate":0,"index":2684},{"krate":0,"index":1975}],"decl_id":null,"docs":" Functions for finding and labelling connected components of an image.\n","sig":null,"attributes":[{"value":"/ Functions for finding and labelling connected components of an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":413934,"byte_end":414007,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2671},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414377,"byte_end":414381,"line_start":14,"line_end":14,"column_start":5,"column_end":9},"name":"Four","qualname":"::region_labelling::Connectivity::Four","value":"Connectivity::Four","parent":{"krate":0,"index":2670},"children":[],"decl_id":null,"docs":" A pixel is connected to its N, S, E and W neighbors.\n","sig":null,"attributes":[{"value":"/ A pixel is connected to its N, S, E and W neighbors.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414316,"byte_end":414372,"line_start":13,"line_end":13,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2673},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414441,"byte_end":414446,"line_start":16,"line_end":16,"column_start":5,"column_end":10},"name":"Eight","qualname":"::region_labelling::Connectivity::Eight","value":"Connectivity::Eight","parent":{"krate":0,"index":2670},"children":[],"decl_id":null,"docs":" A pixel is connected to all of its neighbors.\n","sig":null,"attributes":[{"value":"/ A pixel is connected to all of its neighbors.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414387,"byte_end":414436,"line_start":15,"line_end":15,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":2670},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414297,"byte_end":414309,"line_start":12,"line_end":12,"column_start":10,"column_end":22},"name":"Connectivity","qualname":"::region_labelling::Connectivity","value":"pub enum Connectivity { Four, Eight, }","parent":null,"children":[{"krate":0,"index":2671},{"krate":0,"index":2673}],"decl_id":null,"docs":" Determines which neighbors of a pixel we consider\n to be connected to it.\n","sig":null,"attributes":[{"value":"/ Determines which neighbors of a pixel we consider","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414162,"byte_end":414215,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"/ to be connected to it.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414216,"byte_end":414242,"line_start":10,"line_end":10,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":1975},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417564,"byte_end":417584,"line_start":121,"line_end":121,"column_start":8,"column_end":28},"name":"connected_components","qualname":"::region_labelling::connected_components","value":"pub fn connected_components<I>(&I, Connectivity, I::Pixel) -> Image<Luma<u32>>\nwhere I: GenericImage, I::Pixel: Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns an image of the same size as the input, where each pixel\n is labelled by the connected foreground component it belongs to,\n or 0 if it's in the background. Input pixels are treated as belonging\n to the background if and only if they are equal to the provided background pixel.","sig":null,"attributes":[{"value":"/ Returns an image of the same size as the input, where each pixel","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414451,"byte_end":414519,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ is labelled by the connected foreground component it belongs to,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414520,"byte_end":414588,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/ or 0 if it's in the background. Input pixels are treated as belonging","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414589,"byte_end":414662,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ to the background if and only if they are equal to the provided background pixel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414663,"byte_end":414748,"line_start":22,"line_end":22,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414749,"byte_end":414752,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414753,"byte_end":414765,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/ Panics if the image contains 2<sup>32</sup> or more pixels. If this limitation causes you","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414766,"byte_end":414859,"line_start":25,"line_end":25,"column_start":1,"column_end":94}},{"value":"/ problems then open an issue and we can rewrite this function to support larger images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414860,"byte_end":414950,"line_start":26,"line_end":26,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414951,"byte_end":414954,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414955,"byte_end":414969,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414970,"byte_end":414973,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414974,"byte_end":414981,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":414982,"byte_end":415007,"line_start":31,"line_end":31,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415008,"byte_end":415026,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415027,"byte_end":415056,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415057,"byte_end":415074,"line_start":34,"line_end":34,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415075,"byte_end":415095,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ use imageproc::region_labelling::{connected_components, Connectivity};","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415096,"byte_end":415170,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415171,"byte_end":415174,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let background_color = Luma([0u8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415175,"byte_end":415214,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415215,"byte_end":415218,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415219,"byte_end":415247,"line_start":40,"line_end":40,"column_start":1,"column_end":29}},{"value":"/     1, 0, 1, 1;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415248,"byte_end":415267,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"/     0, 1, 1, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415268,"byte_end":415287,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415288,"byte_end":415307,"line_start":43,"line_end":43,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415308,"byte_end":415328,"line_start":44,"line_end":44,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415329,"byte_end":415332,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // With four-way connectivity the foreground regions which","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415333,"byte_end":415395,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ // are only connected across diagonals belong to different","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415396,"byte_end":415458,"line_start":47,"line_end":47,"column_start":1,"column_end":63}},{"value":"/ // connected components.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415459,"byte_end":415487,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ let components_four = gray_image!(type: u32,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415488,"byte_end":415536,"line_start":49,"line_end":49,"column_start":1,"column_end":49}},{"value":"/     1, 0, 2, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415537,"byte_end":415556,"line_start":50,"line_end":50,"column_start":1,"column_end":20}},{"value":"/     0, 2, 2, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415557,"byte_end":415576,"line_start":51,"line_end":51,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415577,"byte_end":415596,"line_start":52,"line_end":52,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 3);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415597,"byte_end":415617,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415618,"byte_end":415621,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415622,"byte_end":415644,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/     connected_components(&image, Connectivity::Four, background_color),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415645,"byte_end":415720,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/     components_four);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415721,"byte_end":415746,"line_start":57,"line_end":57,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415747,"byte_end":415750,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // With eight-way connectivity all foreground pixels in the top two rows","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415751,"byte_end":415827,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/ // belong to the same connected component.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415828,"byte_end":415874,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/ let components_eight = gray_image!(type: u32,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415875,"byte_end":415924,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/     1, 0, 1, 1;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415925,"byte_end":415944,"line_start":62,"line_end":62,"column_start":1,"column_end":20}},{"value":"/     0, 1, 1, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415945,"byte_end":415964,"line_start":63,"line_end":63,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415965,"byte_end":415984,"line_start":64,"line_end":64,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 2);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":415985,"byte_end":416005,"line_start":65,"line_end":65,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416006,"byte_end":416009,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416010,"byte_end":416032,"line_start":67,"line_end":67,"column_start":1,"column_end":23}},{"value":"/     connected_components(&image, Connectivity::Eight, background_color),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416033,"byte_end":416109,"line_start":68,"line_end":68,"column_start":1,"column_end":77}},{"value":"/     components_eight);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416110,"byte_end":416136,"line_start":69,"line_end":69,"column_start":1,"column_end":27}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416137,"byte_end":416144,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416145,"byte_end":416152,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416153,"byte_end":416156,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416157,"byte_end":416164,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416165,"byte_end":416190,"line_start":74,"line_end":74,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416191,"byte_end":416209,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416210,"byte_end":416239,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416240,"byte_end":416257,"line_start":77,"line_end":77,"column_start":1,"column_end":18}},{"value":"/ // This example is like the first, except that not all of the input foreground","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416258,"byte_end":416340,"line_start":78,"line_end":78,"column_start":1,"column_end":83}},{"value":"/ // pixels are the same color. Pixels of different color are never counted","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416341,"byte_end":416418,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"/ // as belonging to the same connected component.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416419,"byte_end":416471,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416472,"byte_end":416475,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ use image::Luma;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416476,"byte_end":416496,"line_start":82,"line_end":82,"column_start":1,"column_end":21}},{"value":"/ use imageproc::region_labelling::{connected_components, Connectivity};","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416497,"byte_end":416571,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416572,"byte_end":416575,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ let background_color = Luma([0u8]);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416576,"byte_end":416615,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416616,"byte_end":416619,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416620,"byte_end":416648,"line_start":87,"line_end":87,"column_start":1,"column_end":29}},{"value":"/     1, 0, 1, 1;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416649,"byte_end":416668,"line_start":88,"line_end":88,"column_start":1,"column_end":20}},{"value":"/     0, 1, 2, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416669,"byte_end":416688,"line_start":89,"line_end":89,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416689,"byte_end":416708,"line_start":90,"line_end":90,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416709,"byte_end":416729,"line_start":91,"line_end":91,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416730,"byte_end":416733,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ let components_four = gray_image!(type: u32,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416734,"byte_end":416782,"line_start":93,"line_end":93,"column_start":1,"column_end":49}},{"value":"/     1, 0, 2, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416783,"byte_end":416802,"line_start":94,"line_end":94,"column_start":1,"column_end":20}},{"value":"/     0, 3, 4, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416803,"byte_end":416822,"line_start":95,"line_end":95,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416823,"byte_end":416842,"line_start":96,"line_end":96,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 5);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416843,"byte_end":416863,"line_start":97,"line_end":97,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416864,"byte_end":416867,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416868,"byte_end":416890,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/     connected_components(&image, Connectivity::Four, background_color),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416891,"byte_end":416966,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/     components_four);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416967,"byte_end":416992,"line_start":101,"line_end":101,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416993,"byte_end":416996,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ // If this behaviour is not what you want then you can first","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":416997,"byte_end":417061,"line_start":103,"line_end":103,"column_start":1,"column_end":65}},{"value":"/ // threshold the input image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417062,"byte_end":417095,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/ use imageproc::contrast::threshold;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417096,"byte_end":417135,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417136,"byte_end":417139,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ // Pixels equal to the threshold are treated as background.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417140,"byte_end":417203,"line_start":107,"line_end":107,"column_start":1,"column_end":64}},{"value":"/ let thresholded = threshold(&image, 0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417204,"byte_end":417247,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417248,"byte_end":417251,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ let thresholded_components_four = gray_image!(type: u32,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417252,"byte_end":417312,"line_start":110,"line_end":110,"column_start":1,"column_end":61}},{"value":"/     1, 0, 2, 2;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417313,"byte_end":417332,"line_start":111,"line_end":111,"column_start":1,"column_end":20}},{"value":"/     0, 2, 2, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417333,"byte_end":417352,"line_start":112,"line_end":112,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417353,"byte_end":417372,"line_start":113,"line_end":113,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 3);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417373,"byte_end":417393,"line_start":114,"line_end":114,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417394,"byte_end":417397,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417398,"byte_end":417420,"line_start":116,"line_end":116,"column_start":1,"column_end":23}},{"value":"/     connected_components(&thresholded, Connectivity::Four, background_color),","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417421,"byte_end":417502,"line_start":117,"line_end":117,"column_start":1,"column_end":82}},{"value":"/     thresholded_components_four);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417503,"byte_end":417540,"line_start":118,"line_end":118,"column_start":1,"column_end":38}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417541,"byte_end":417548,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/region_labelling.rs","byte_start":417549,"byte_end":417556,"line_start":120,"line_end":120,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1978},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seam_carving","qualname":"::seam_carving","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1983},{"krate":0,"index":1986},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1993},{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2003},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2009},{"krate":0,"index":2012},{"krate":0,"index":2015},{"krate":0,"index":2017},{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2023}],"decl_id":null,"docs":" An implementation of [seam carving]. Currently in a pretty rough state.\n See examples/seam_carving.rs for an example.","sig":null,"attributes":[{"value":"/ An implementation of [seam carving]. Currently in a pretty rough state.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":424347,"byte_end":424422,"line_start":1,"line_end":1,"column_start":1,"column_end":76}},{"value":"/ See examples/seam_carving.rs for an example.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":424423,"byte_end":424471,"line_start":2,"line_end":2,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":424472,"byte_end":424475,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ [seam carving]: https://en.wikipedia.org/wiki/Seam_carving","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":424476,"byte_end":424538,"line_start":4,"line_end":4,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2012},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":424821,"byte_end":424833,"line_start":13,"line_end":13,"column_start":12,"column_end":24},"name":"VerticalSeam","qualname":"::seam_carving::VerticalSeam","value":"","parent":null,"children":[],"decl_id":null,"docs":" An image seam connecting the bottom of an image to its top (in that order).\n","sig":null,"attributes":[{"value":"/ An image seam connecting the bottom of an image to its top (in that order).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":424730,"byte_end":424809,"line_start":12,"line_end":12,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":2015},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":425346,"byte_end":425358,"line_start":22,"line_end":22,"column_start":8,"column_end":20},"name":"shrink_width","qualname":"::seam_carving::shrink_width","value":"pub fn shrink_width<P>(&Image<P>, u32) -> Image<P> where P: Pixel<Subpixel =\nu8> + WithChannel<u16> + WithChannel<i16>,\n<P as WithChannel<u16>>::Pixel: HasBlack","parent":null,"children":[],"decl_id":null,"docs":" Reduces the width of an image using seam carving.","sig":null,"attributes":[{"value":"/ Reduces the width of an image using seam carving.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":424846,"byte_end":424899,"line_start":15,"line_end":15,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":424900,"byte_end":424903,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Warning: this is very slow! It implements the algorithm from","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":424904,"byte_end":424968,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/ https://inst.eecs.berkeley.edu/~cs194-26/fa16/hw/proj4-seamcarving/imret.pdf, with some","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":424969,"byte_end":425060,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ extra unnecessary allocations thrown in. Rather than attempting to optimise the implementation","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":425061,"byte_end":425159,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ of this inherently slow algorithm, the planned next step is to switch to the algorithm from","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":425160,"byte_end":425255,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ https://users.cs.cf.ac.uk/Paul.Rosin/resources/papers/seam-carving-ChinaF.pdf.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":425256,"byte_end":425338,"line_start":21,"line_end":21,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":2017},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":426136,"byte_end":426154,"line_start":46,"line_end":46,"column_start":8,"column_end":26},"name":"find_vertical_seam","qualname":"::seam_carving::find_vertical_seam","value":"pub fn find_vertical_seam<P>(&Image<P>) -> VerticalSeam where\nP: Pixel<Subpixel = u8> + WithChannel<u16> + WithChannel<i16>,\n<P as WithChannel<u16>>::Pixel: HasBlack","parent":null,"children":[],"decl_id":null,"docs":" Computes an 8-connected path from the bottom of the image to the top whose sum of\n gradient magnitudes is minimal.\n","sig":null,"attributes":[{"value":"/ Computes an 8-connected path from the bottom of the image to the top whose sum of","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":426007,"byte_end":426092,"line_start":44,"line_end":44,"column_start":1,"column_end":86}},{"value":"/ gradient magnitudes is minimal.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":426093,"byte_end":426128,"line_start":45,"line_end":45,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":2021},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":428906,"byte_end":428926,"line_start":135,"line_end":135,"column_start":8,"column_end":28},"name":"remove_vertical_seam","qualname":"::seam_carving::remove_vertical_seam","value":"pub fn remove_vertical_seam<P>(&Image<P>, &VerticalSeam) -> Image<P> where\nP: Pixel","parent":null,"children":[],"decl_id":null,"docs":" Returns the result of removing `seam` from `image`.\n","sig":null,"attributes":[{"value":"/ Returns the result of removing `seam` from `image`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":428561,"byte_end":428616,"line_start":130,"line_end":130,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":2023},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":429668,"byte_end":429687,"line_start":162,"line_end":162,"column_start":8,"column_end":27},"name":"draw_vertical_seams","qualname":"::seam_carving::draw_vertical_seams","value":"pub fn draw_vertical_seams(&GrayImage, &[VerticalSeam]) -> Image<Rgb<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Draws a series of `seams` on `image` in red. Assumes that the provided seams were\n removed in the given order from the input image.\n","sig":null,"attributes":[{"value":"/ Draws a series of `seams` on `image` in red. Assumes that the provided seams were","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":429522,"byte_end":429607,"line_start":160,"line_end":160,"column_start":1,"column_end":86}},{"value":"/ removed in the given order from the input image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/seam_carving.rs","byte_start":429608,"byte_end":429660,"line_start":161,"line_end":161,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":2025},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stats","qualname":"::stats","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","parent":null,"children":[{"krate":0,"index":2026},{"krate":0,"index":2029},{"krate":0,"index":2032},{"krate":0,"index":2035},{"krate":0,"index":2036},{"krate":0,"index":2039},{"krate":0,"index":2042},{"krate":0,"index":2045},{"krate":0,"index":2048},{"krate":0,"index":2051},{"krate":0,"index":2054},{"krate":0,"index":2056},{"krate":0,"index":2059},{"krate":0,"index":2061},{"krate":0,"index":2062},{"krate":0,"index":2066},{"krate":0,"index":2070}],"decl_id":null,"docs":" Statistical properties of images.\n","sig":null,"attributes":[{"value":"/ Statistical properties of images.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431046,"byte_end":431083,"line_start":1,"line_end":1,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2051},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431325,"byte_end":431341,"line_start":10,"line_end":10,"column_start":12,"column_end":28},"name":"ChannelHistogram","qualname":"::stats::ChannelHistogram","value":"ChannelHistogram { channels }","parent":null,"children":[{"krate":0,"index":2052}],"decl_id":null,"docs":" A set of per-channel histograms from an image with 8 bits per channel.\n","sig":null,"attributes":[{"value":"/ A set of per-channel histograms from an image with 8 bits per channel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431239,"byte_end":431313,"line_start":9,"line_end":9,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":2052},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431384,"byte_end":431392,"line_start":12,"line_end":12,"column_start":9,"column_end":17},"name":"channels","qualname":"::stats::ChannelHistogram::channels","value":"std::vec::Vec<[u32; 256]>","parent":{"krate":0,"index":2051},"children":[],"decl_id":null,"docs":" Per-channel histograms.\n","sig":null,"attributes":[{"value":"/ Per-channel histograms.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431348,"byte_end":431375,"line_start":11,"line_end":11,"column_start":5,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":2054},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431469,"byte_end":431478,"line_start":16,"line_end":16,"column_start":8,"column_end":17},"name":"histogram","qualname":"::stats::histogram","value":"pub fn histogram<P>(&Image<P>) -> ChannelHistogram where P: Pixel<Subpixel =\nu8>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of per-channel histograms.\n","sig":null,"attributes":[{"value":"/ Returns a vector of per-channel histograms.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431414,"byte_end":431461,"line_start":15,"line_end":15,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":2056},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431909,"byte_end":431935,"line_start":32,"line_end":32,"column_start":12,"column_end":38},"name":"CumulativeChannelHistogram","qualname":"::stats::CumulativeChannelHistogram","value":"CumulativeChannelHistogram { channels }","parent":null,"children":[{"krate":0,"index":2057}],"decl_id":null,"docs":" A set of per-channel cumulative histograms from an image with 8 bits per channel.\n","sig":null,"attributes":[{"value":"/ A set of per-channel cumulative histograms from an image with 8 bits per channel.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431812,"byte_end":431897,"line_start":31,"line_end":31,"column_start":1,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":2057},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431989,"byte_end":431997,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"name":"channels","qualname":"::stats::CumulativeChannelHistogram::channels","value":"std::vec::Vec<[u32; 256]>","parent":{"krate":0,"index":2056},"children":[],"decl_id":null,"docs":" Per-channel cumulative histograms.\n","sig":null,"attributes":[{"value":"/ Per-channel cumulative histograms.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":431942,"byte_end":431980,"line_start":33,"line_end":33,"column_start":5,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":2059},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432073,"byte_end":432093,"line_start":38,"line_end":38,"column_start":8,"column_end":28},"name":"cumulative_histogram","qualname":"::stats::cumulative_histogram","value":"pub fn cumulative_histogram<P>(&Image<P>) -> CumulativeChannelHistogram where\nP: Pixel<Subpixel = u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns per-channel cumulative histograms.\n","sig":null,"attributes":[{"value":"/ Returns per-channel cumulative histograms.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432019,"byte_end":432065,"line_start":37,"line_end":37,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":2061},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433380,"byte_end":433390,"line_start":89,"line_end":89,"column_start":8,"column_end":18},"name":"percentile","qualname":"::stats::percentile","value":"pub fn percentile(&GrayImage, u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `p`th percentile of the pixel intensities in an image.","sig":null,"attributes":[{"value":"/ Returns the `p`th percentile of the pixel intensities in an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432455,"byte_end":432525,"line_start":55,"line_end":55,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432526,"byte_end":432529,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ We define the `p`th percentile intensity to be the least `x` such","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432530,"byte_end":432599,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/ that at least `p`% of image pixels have intensity less than or","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432600,"byte_end":432666,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"/ equal to `x`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432667,"byte_end":432684,"line_start":59,"line_end":59,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432685,"byte_end":432688,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432689,"byte_end":432701,"line_start":61,"line_end":61,"column_start":1,"column_end":13}},{"value":"/ If `p > 100`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432702,"byte_end":432719,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432720,"byte_end":432723,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432724,"byte_end":432738,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432739,"byte_end":432746,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432747,"byte_end":432772,"line_start":66,"line_end":66,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432773,"byte_end":432791,"line_start":67,"line_end":67,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432792,"byte_end":432821,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432822,"byte_end":432839,"line_start":69,"line_end":69,"column_start":1,"column_end":18}},{"value":"/ use imageproc::stats::percentile;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432840,"byte_end":432877,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432878,"byte_end":432881,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432882,"byte_end":432910,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3, 4, 5;","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432911,"byte_end":432933,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/     6, 7, 8, 9, 10);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432934,"byte_end":432958,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432959,"byte_end":432962,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ // The 0th percentile is always 0","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":432963,"byte_end":433000,"line_start":76,"line_end":76,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(percentile(&image, 0), 0);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433001,"byte_end":433042,"line_start":77,"line_end":77,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433043,"byte_end":433046,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ // Exactly 10% of pixels have intensity <= 1.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433047,"byte_end":433096,"line_start":79,"line_end":79,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(percentile(&image, 10), 1);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433097,"byte_end":433139,"line_start":80,"line_end":80,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433140,"byte_end":433143,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Fewer than 15% of pixels have intensity <=1, so the 15th percentile is 2.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433144,"byte_end":433224,"line_start":82,"line_end":82,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(percentile(&image, 15), 2);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433225,"byte_end":433267,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433268,"byte_end":433271,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ // All pixels have intensity <= 10.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433272,"byte_end":433311,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(percentile(&image, 100), 10);","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433312,"byte_end":433356,"line_start":86,"line_end":86,"column_start":1,"column_end":45}},{"value":"/ # }","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433357,"byte_end":433364,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433365,"byte_end":433372,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2062},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433980,"byte_end":434003,"line_start":108,"line_end":108,"column_start":8,"column_end":31},"name":"root_mean_squared_error","qualname":"::stats::root_mean_squared_error","value":"pub fn root_mean_squared_error<I, J, P>(&I, &J) -> f64 where\nI: GenericImageView<Pixel = P>, J: GenericImageView<Pixel = P>, P: Pixel,\nP::Subpixel: ValueInto<f64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the square root of the mean of the squares of differences\n between all subpixels in left and right. All channels are considered\n equally. If you do not want this (e.g. if using RGBA) then change\n image formats first.\n","sig":null,"attributes":[{"value":"/ Returns the square root of the mean of the squares of differences","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433735,"byte_end":433804,"line_start":104,"line_end":104,"column_start":1,"column_end":70}},{"value":"/ between all subpixels in left and right. All channels are considered","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433805,"byte_end":433877,"line_start":105,"line_end":105,"column_start":1,"column_end":73}},{"value":"/ equally. If you do not want this (e.g. if using RGBA) then change","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433878,"byte_end":433947,"line_start":106,"line_end":106,"column_start":1,"column_end":70}},{"value":"/ image formats first.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":433948,"byte_end":433972,"line_start":107,"line_end":107,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2066},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":434546,"byte_end":434572,"line_start":122,"line_end":122,"column_start":8,"column_end":34},"name":"peak_signal_to_noise_ratio","qualname":"::stats::peak_signal_to_noise_ratio","value":"pub fn peak_signal_to_noise_ratio<I, J, P>(&I, &J) -> f64 where\nI: GenericImageView<Pixel = P>, J: GenericImageView<Pixel = P>, P: Pixel,\nP::Subpixel: ValueInto<f64> + Primitive","parent":null,"children":[],"decl_id":null,"docs":" Returns the peak signal to noise ratio for a clean image and its noisy\n aproximation. All channels are considered equally. If you do not want this\n (e.g. if using RGBA) then change image formats first.\n See also [peak signal-to-noise ratio (wikipedia)](https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio).\n","sig":null,"attributes":[{"value":"/ Returns the peak signal to noise ratio for a clean image and its noisy","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":434214,"byte_end":434288,"line_start":118,"line_end":118,"column_start":1,"column_end":75}},{"value":"/ aproximation. All channels are considered equally. If you do not want this","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":434289,"byte_end":434367,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/ (e.g. if using RGBA) then change image formats first.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":434368,"byte_end":434425,"line_start":120,"line_end":120,"column_start":1,"column_end":58}},{"value":"/ See also [peak signal-to-noise ratio (wikipedia)](https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio).","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/stats.rs","byte_start":434426,"byte_end":434538,"line_start":121,"line_end":121,"column_start":1,"column_end":113}}]},{"kind":"Mod","id":{"krate":0,"index":2074},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/suppress.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"suppress","qualname":"::suppress","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/suppress.rs","parent":null,"children":[{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2079},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2086},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2092},{"krate":0,"index":2095},{"krate":0,"index":2098},{"krate":0,"index":2101},{"krate":0,"index":2104}],"decl_id":null,"docs":" Functions for suppressing non-maximal values.\n","sig":null,"attributes":[{"value":"/ Functions for suppressing non-maximal values.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/suppress.rs","byte_start":439925,"byte_end":439974,"line_start":1,"line_end":1,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2098},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/suppress.rs","byte_start":440290,"byte_end":440310,"line_start":10,"line_end":10,"column_start":8,"column_end":28},"name":"suppress_non_maximum","qualname":"::suppress::suppress_non_maximum","value":"pub fn suppress_non_maximum<I, C>(&I, u32) -> ImageBuffer<Luma<C>, Vec<C>>\nwhere I: GenericImage<Pixel = Luma<C>>, C: Primitive + Ord","parent":null,"children":[],"decl_id":null,"docs":" Returned image has zeroes for all inputs pixels which do not have the greatest\n intensity in the (2 * radius + 1) square block centred on them.\n Ties are resolved lexicographically.\n","sig":null,"attributes":[{"value":"/ Returned image has zeroes for all inputs pixels which do not have the greatest","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/suppress.rs","byte_start":440091,"byte_end":440173,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/ intensity in the (2 * radius + 1) square block centred on them.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/suppress.rs","byte_start":440174,"byte_end":440241,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"/ Ties are resolved lexicographically.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/suppress.rs","byte_start":440242,"byte_end":440282,"line_start":9,"line_end":9,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":2104},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/suppress.rs","byte_start":443898,"byte_end":443910,"line_start":110,"line_end":110,"column_start":8,"column_end":20},"name":"local_maxima","qualname":"::suppress::local_maxima","value":"pub fn local_maxima<T>(&[T], u32) -> Vec<T> where T: Position + Score + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns all items which have the highest score in the\n (2 * radius + 1) square block centred on them. Ties are resolved lexicographically.\n","sig":null,"attributes":[{"value":"/ Returns all items which have the highest score in the","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/suppress.rs","byte_start":443745,"byte_end":443802,"line_start":108,"line_end":108,"column_start":1,"column_end":58}},{"value":"/ (2 * radius + 1) square block centred on them. Ties are resolved lexicographically.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/suppress.rs","byte_start":443803,"byte_end":443890,"line_start":109,"line_end":109,"column_start":1,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":2107},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"template_matching","qualname":"::template_matching","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","parent":null,"children":[{"krate":0,"index":2108},{"krate":0,"index":2111},{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2118},{"krate":0,"index":2121},{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2687},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2699},{"krate":0,"index":2701},{"krate":0,"index":2702},{"krate":0,"index":2704},{"krate":0,"index":2705},{"krate":0,"index":2131},{"krate":0,"index":2136},{"krate":0,"index":2138},{"krate":0,"index":2707},{"krate":0,"index":2713},{"krate":0,"index":2715},{"krate":0,"index":2718},{"krate":0,"index":2721},{"krate":0,"index":2723},{"krate":0,"index":2727},{"krate":0,"index":2729},{"krate":0,"index":2139}],"decl_id":null,"docs":" Functions for performing template matching.\n","sig":null,"attributes":[{"value":"/ Functions for performing template matching.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453081,"byte_end":453128,"line_start":1,"line_end":1,"column_start":1,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2688},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453615,"byte_end":453633,"line_start":15,"line_end":15,"column_start":5,"column_end":23},"name":"SumOfSquaredErrors","qualname":"::template_matching::MatchTemplateMethod::SumOfSquaredErrors","value":"MatchTemplateMethod::SumOfSquaredErrors","parent":{"krate":0,"index":2687},"children":[],"decl_id":null,"docs":" Sum of the squares of the difference between image and template pixel\n intensities.","sig":null,"attributes":[{"value":"/ Sum of the squares of the difference between image and template pixel","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453473,"byte_end":453546,"line_start":11,"line_end":11,"column_start":5,"column_end":78}},{"value":"/ intensities.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453551,"byte_end":453567,"line_start":12,"line_end":12,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453572,"byte_end":453575,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ Smaller values are better.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453580,"byte_end":453610,"line_start":14,"line_end":14,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2690},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453724,"byte_end":453752,"line_start":17,"line_end":17,"column_start":5,"column_end":33},"name":"SumOfSquaredErrorsNormalized","qualname":"::template_matching::MatchTemplateMethod::SumOfSquaredErrorsNormalized","value":"MatchTemplateMethod::SumOfSquaredErrorsNormalized","parent":{"krate":0,"index":2687},"children":[],"decl_id":null,"docs":" Divides the sum computed using `SumOfSquaredErrors` by a normalization term.\n","sig":null,"attributes":[{"value":"/ Divides the sum computed using `SumOfSquaredErrors` by a normalization term.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453639,"byte_end":453719,"line_start":16,"line_end":16,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2692},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453826,"byte_end":453842,"line_start":21,"line_end":21,"column_start":5,"column_end":21},"name":"CrossCorrelation","qualname":"::template_matching::MatchTemplateMethod::CrossCorrelation","value":"MatchTemplateMethod::CrossCorrelation","parent":{"krate":0,"index":2687},"children":[],"decl_id":null,"docs":" Cross Correlation","sig":null,"attributes":[{"value":"/ Cross Correlation","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453758,"byte_end":453779,"line_start":18,"line_end":18,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453784,"byte_end":453787,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ Higher values are better.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453792,"byte_end":453821,"line_start":20,"line_end":20,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2694},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453931,"byte_end":453957,"line_start":23,"line_end":23,"column_start":5,"column_end":31},"name":"CrossCorrelationNormalized","qualname":"::template_matching::MatchTemplateMethod::CrossCorrelationNormalized","value":"MatchTemplateMethod::CrossCorrelationNormalized","parent":{"krate":0,"index":2687},"children":[],"decl_id":null,"docs":" Divides the sum computed using `CrossCorrelation` by a normalization term.\n","sig":null,"attributes":[{"value":"/ Divides the sum computed using `CrossCorrelation` by a normalization term.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453848,"byte_end":453926,"line_start":22,"line_end":22,"column_start":5,"column_end":83}}]},{"kind":"Enum","id":{"krate":0,"index":2687},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453447,"byte_end":453466,"line_start":10,"line_end":10,"column_start":10,"column_end":29},"name":"MatchTemplateMethod","qualname":"::template_matching::MatchTemplateMethod","value":"pub enum MatchTemplateMethod {\n    SumOfSquaredErrors,\n    SumOfSquaredErrorsNormalized,\n    CrossCorrelation,\n    CrossCorrelationNormalized,\n}","parent":null,"children":[{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692},{"krate":0,"index":2694}],"decl_id":null,"docs":" Method used to compute the matching score between a template and an image region.\n","sig":null,"attributes":[{"value":"/ Method used to compute the matching score between a template and an image region.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453307,"byte_end":453392,"line_start":8,"line_end":8,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":2131},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":454337,"byte_end":454351,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"match_template","qualname":"::template_matching::match_template","value":"pub fn match_template(&GrayImage, &GrayImage, MatchTemplateMethod)\n-> Image<Luma<f32>>","parent":null,"children":[],"decl_id":null,"docs":" Slides a `template` over an `image` and scores the match at each point using\n the requested `method`.","sig":null,"attributes":[{"value":"/ Slides a `template` over an `image` and scores the match at each point using","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":453962,"byte_end":454042,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ the requested `method`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":454043,"byte_end":454070,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":454071,"byte_end":454074,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The returned image has dimensions `image.width() - template.width() + 1` by","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":454075,"byte_end":454154,"line_start":29,"line_end":29,"column_start":1,"column_end":80}},{"value":"/ `image.height() - template.height() + 1`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":454155,"byte_end":454200,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":454201,"byte_end":454204,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":454205,"byte_end":454217,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":454218,"byte_end":454221,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ If either dimension of `template` is not strictly less than the corresponding dimension","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":454222,"byte_end":454313,"line_start":34,"line_end":34,"column_start":1,"column_end":92}},{"value":"/ of `image`.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":454314,"byte_end":454329,"line_start":35,"line_end":35,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2707},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457504,"byte_end":457512,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"name":"Extremes","qualname":"::template_matching::Extremes","value":"Extremes { max_value, min_value, max_value_location, min_value_location }","parent":null,"children":[{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712}],"decl_id":null,"docs":" The largest and smallest values in an image,\n together with their locations.\n","sig":null,"attributes":[{"value":"/ The largest and smallest values in an image,","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457364,"byte_end":457412,"line_start":132,"line_end":132,"column_start":1,"column_end":49}},{"value":"/ together with their locations.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457413,"byte_end":457447,"line_start":133,"line_end":133,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":2709},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457565,"byte_end":457574,"line_start":137,"line_end":137,"column_start":9,"column_end":18},"name":"max_value","qualname":"::template_matching::Extremes::max_value","value":"T","parent":{"krate":0,"index":2707},"children":[],"decl_id":null,"docs":" The largest value in an image.\n","sig":null,"attributes":[{"value":"/ The largest value in an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457522,"byte_end":457556,"line_start":136,"line_end":136,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2710},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457627,"byte_end":457636,"line_start":139,"line_end":139,"column_start":9,"column_end":18},"name":"min_value","qualname":"::template_matching::Extremes::min_value","value":"T","parent":{"krate":0,"index":2707},"children":[],"decl_id":null,"docs":" The smallest value in an image.\n","sig":null,"attributes":[{"value":"/ The smallest value in an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457583,"byte_end":457618,"line_start":138,"line_end":138,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2711},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457707,"byte_end":457725,"line_start":141,"line_end":141,"column_start":9,"column_end":27},"name":"max_value_location","qualname":"::template_matching::Extremes::max_value_location","value":"(u32, u32)","parent":{"krate":0,"index":2707},"children":[],"decl_id":null,"docs":" The coordinates of the largest value in an image.\n","sig":null,"attributes":[{"value":"/ The coordinates of the largest value in an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457645,"byte_end":457698,"line_start":140,"line_end":140,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2712},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457806,"byte_end":457824,"line_start":143,"line_end":143,"column_start":9,"column_end":27},"name":"min_value_location","qualname":"::template_matching::Extremes::min_value_location","value":"(u32, u32)","parent":{"krate":0,"index":2707},"children":[],"decl_id":null,"docs":" The coordinates of the smallest value in an image.\n","sig":null,"attributes":[{"value":"/ The coordinates of the smallest value in an image.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457743,"byte_end":457797,"line_start":142,"line_end":142,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":2139},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":458010,"byte_end":458023,"line_start":148,"line_end":148,"column_start":8,"column_end":21},"name":"find_extremes","qualname":"::template_matching::find_extremes","value":"pub fn find_extremes<T>(&Image<Luma<T>>) -> Extremes<T> where T: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Finds the largest and smallest values in an image and their locations.\n If there are multiple such values then the lexicographically smallest is returned.\n","sig":null,"attributes":[{"value":"/ Finds the largest and smallest values in an image and their locations.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457841,"byte_end":457915,"line_start":146,"line_end":146,"column_start":1,"column_end":75}},{"value":"/ If there are multiple such values then the lexicographically smallest is returned.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/template_matching.rs","byte_start":457916,"byte_end":458002,"line_start":147,"line_end":147,"column_start":1,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":2141},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"union_find","qualname":"::union_find","value":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","parent":null,"children":[{"krate":0,"index":2142},{"krate":0,"index":2146}],"decl_id":null,"docs":" An implementation of disjoint set forests for union find.\n","sig":null,"attributes":[{"value":"/ An implementation of disjoint set forests for union find.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":464587,"byte_end":464648,"line_start":1,"line_end":1,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2142},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":464706,"byte_end":464723,"line_start":4,"line_end":4,"column_start":12,"column_end":29},"name":"DisjointSetForest","qualname":"::union_find::DisjointSetForest","value":"DisjointSetForest {  }","parent":null,"children":[{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145}],"decl_id":null,"docs":" Data structure for efficient union find.\n","sig":null,"attributes":[{"value":"/ Data structure for efficient union find.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":464650,"byte_end":464694,"line_start":3,"line_end":3,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":465114,"byte_end":465117,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<DisjointSetForest>::new","value":"pub fn new(usize) -> DisjointSetForest","parent":null,"children":[],"decl_id":null,"docs":" Constructs forest of singletons with count elements.\n","sig":null,"attributes":[{"value":"/ Constructs forest of singletons with count elements.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":465046,"byte_end":465102,"line_start":16,"line_end":16,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":465425,"byte_end":465434,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"num_trees","qualname":"<DisjointSetForest>::num_trees","value":"pub fn num_trees(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of trees in the forest.\n","sig":null,"attributes":[{"value":"/ Returns the number of trees in the forest.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":465367,"byte_end":465413,"line_start":27,"line_end":27,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2150},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":465728,"byte_end":465732,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"root","qualname":"<DisjointSetForest>::root","value":"pub fn root(&mut Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns index of the root of the tree containing i.\n Needs mutable reference to self for path compression.\n","sig":null,"attributes":[{"value":"/ Returns index of the root of the tree containing i.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":465599,"byte_end":465654,"line_start":35,"line_end":35,"column_start":5,"column_end":60}},{"value":"/ Needs mutable reference to self for path compression.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":465659,"byte_end":465716,"line_start":36,"line_end":36,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2151},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":466258,"byte_end":466262,"line_start":55,"line_end":55,"column_start":12,"column_end":16},"name":"find","qualname":"<DisjointSetForest>::find","value":"pub fn find(&mut Self, usize, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if i and j are in the same tree.\n Need mutable reference to self for path compression.\n","sig":null,"attributes":[{"value":"/ Returns true if i and j are in the same tree.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":466136,"byte_end":466185,"line_start":53,"line_end":53,"column_start":5,"column_end":54}},{"value":"/ Need mutable reference to self for path compression.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":466190,"byte_end":466246,"line_start":54,"line_end":54,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2152},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":466455,"byte_end":466460,"line_start":61,"line_end":61,"column_start":12,"column_end":17},"name":"union","qualname":"<DisjointSetForest>::union","value":"pub fn union(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Unions the trees containing i and j.\n","sig":null,"attributes":[{"value":"/ Unions the trees containing i and j.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":466403,"byte_end":466443,"line_start":60,"line_end":60,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2153},"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":467183,"byte_end":467188,"line_start":82,"line_end":82,"column_start":12,"column_end":17},"name":"trees","qualname":"<DisjointSetForest>::trees","value":"pub fn trees(&mut Self) -> Vec<Vec<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the elements of each tree.\n","sig":null,"attributes":[{"value":"/ Returns the elements of each tree.","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":467133,"byte_end":467171,"line_start":81,"line_end":81,"column_start":5,"column_end":43}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24996,"byte_end":25003,"line_start":31,"line_end":31,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57762,"byte_end":57768,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57940,"byte_end":57946,"line_start":26,"line_end":26,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58132,"byte_end":58138,"line_start":38,"line_end":38,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":87551,"byte_end":87564,"line_start":227,"line_end":227,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":88023,"byte_end":88026,"line_start":251,"line_end":251,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":88381,"byte_end":88390,"line_start":268,"line_end":268,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":88667,"byte_end":88670,"line_start":280,"line_end":280,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":89034,"byte_end":89040,"line_start":303,"line_end":303,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106658,"byte_end":106659,"line_start":76,"line_end":76,"column_start":20,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":107228,"byte_end":107233,"line_start":101,"line_end":101,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":123701,"byte_end":123718,"line_start":21,"line_end":21,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":124640,"byte_end":124657,"line_start":54,"line_end":54,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":125778,"byte_end":125800,"line_start":100,"line_end":100,"column_start":20,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":126452,"byte_end":126474,"line_start":117,"line_end":117,"column_start":33,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":126963,"byte_end":126988,"line_start":134,"line_end":134,"column_start":20,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":127960,"byte_end":127985,"line_start":157,"line_end":157,"column_start":33,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":132737,"byte_end":132744,"line_start":324,"line_end":324,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":204042,"byte_end":204049,"line_start":251,"line_end":251,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":931},{"krate":0,"index":933},{"krate":0,"index":935},{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":171180,"byte_end":171186,"line_start":223,"line_end":223,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212066,"byte_end":212076,"line_start":44,"line_end":44,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1124},{"krate":0,"index":1127},{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":217838,"byte_end":217848,"line_start":224,"line_end":224,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1155},{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":218713,"byte_end":218723,"line_start":256,"line_end":256,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1166},{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272814,"byte_end":272829,"line_start":84,"line_end":84,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1385}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":273313,"byte_end":273324,"line_start":97,"line_end":97,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":280871,"byte_end":280875,"line_start":318,"line_end":318,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296500,"byte_end":296510,"line_start":26,"line_end":26,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1449}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":297661,"byte_end":297668,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1461},{"krate":0,"index":1463}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":307847,"byte_end":307860,"line_start":338,"line_end":338,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1479},{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":311957,"byte_end":311964,"line_start":449,"line_end":449,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1505},{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":312345,"byte_end":312351,"line_start":462,"line_end":462,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1511},{"krate":0,"index":1513},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1517}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":343223,"byte_end":343227,"line_start":166,"line_end":166,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1617},{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":343573,"byte_end":343576,"line_start":182,"line_end":182,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":344087,"byte_end":344091,"line_start":202,"line_end":202,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370933,"byte_end":370936,"line_start":18,"line_end":18,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371108,"byte_end":371112,"line_start":28,"line_end":28,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371287,"byte_end":371291,"line_start":38,"line_end":38,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1703}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371398,"byte_end":371403,"line_start":46,"line_end":46,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1707}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404572,"byte_end":404577,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404719,"byte_end":404724,"line_start":22,"line_end":22,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1902},{"krate":0,"index":1903}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404901,"byte_end":404906,"line_start":30,"line_end":30,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1906}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":405050,"byte_end":405055,"line_start":37,"line_end":37,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1909},{"krate":0,"index":1910}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":405232,"byte_end":405237,"line_start":45,"line_end":45,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":405377,"byte_end":405382,"line_start":52,"line_end":52,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1916},{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":406436,"byte_end":406444,"line_start":84,"line_end":84,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1923}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":406677,"byte_end":406682,"line_start":95,"line_end":95,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1925},{"krate":0,"index":1926}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":407404,"byte_end":407408,"line_start":119,"line_end":119,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1928},{"krate":0,"index":1929}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409600,"byte_end":409604,"line_start":38,"line_end":38,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412213,"byte_end":412217,"line_start":126,"line_end":126,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1947}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412382,"byte_end":412386,"line_start":132,"line_end":132,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1949}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412805,"byte_end":412817,"line_start":149,"line_end":149,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1951}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":465022,"byte_end":465039,"line_start":15,"line_end":15,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":875,"byte_end":880,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":890,"byte_end":898,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":122}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":908,"byte_end":916,"line_start":35,"line_end":35,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":155}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":926,"byte_end":933,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":212}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":943,"byte_end":954,"line_start":37,"line_end":37,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":255}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":964,"byte_end":982,"line_start":38,"line_end":38,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":302}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":992,"byte_end":999,"line_start":39,"line_end":39,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":383}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1009,"byte_end":1014,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":855}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1024,"byte_end":1030,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":895}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1040,"byte_end":1065,"line_start":42,"line_end":42,"column_start":9,"column_end":34},"ref_id":{"krate":0,"index":1091}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1075,"byte_end":1083,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1238}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1093,"byte_end":1102,"line_start":44,"line_end":44,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1293}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1112,"byte_end":1116,"line_start":45,"line_end":45,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1351}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1126,"byte_end":1129,"line_start":46,"line_end":46,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1411}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1139,"byte_end":1144,"line_start":47,"line_end":47,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1521}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1154,"byte_end":1168,"line_start":48,"line_end":48,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":1562}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1178,"byte_end":1199,"line_start":49,"line_end":49,"column_start":9,"column_end":30},"ref_id":{"krate":0,"index":1638}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1209,"byte_end":1212,"line_start":50,"line_end":50,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1657}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1222,"byte_end":1226,"line_start":51,"line_end":51,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1769}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1236,"byte_end":1246,"line_start":52,"line_end":52,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1780}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1256,"byte_end":1261,"line_start":53,"line_end":53,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1808}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1271,"byte_end":1279,"line_start":54,"line_end":54,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1856}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1289,"byte_end":1294,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1876}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1378,"byte_end":1382,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1930}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1392,"byte_end":1408,"line_start":59,"line_end":59,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":1952}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1418,"byte_end":1430,"line_start":60,"line_end":60,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1978}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1440,"byte_end":1445,"line_start":61,"line_end":61,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2025}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1455,"byte_end":1463,"line_start":62,"line_end":62,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2074}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1473,"byte_end":1490,"line_start":63,"line_end":63,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":2107}},{"kind":"Mod","span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/lib.rs","byte_start":1500,"byte_end":1510,"line_start":64,"line_end":64,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":2141}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/contours.rs","byte_start":24996,"byte_end":25003,"line_start":31,"line_end":31,"column_start":9,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57762,"byte_end":57768,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":57940,"byte_end":57946,"line_start":26,"line_end":26,"column_start":19,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2182},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/corners.rs","byte_start":58132,"byte_end":58138,"line_start":38,"line_end":38,"column_start":16,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2182},"to":{"krate":0,"index":295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":87551,"byte_end":87564,"line_start":227,"line_end":227,"column_start":6,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":88023,"byte_end":88026,"line_start":251,"line_end":251,"column_start":19,"column_end":22},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":348},"to":{"krate":0,"index":342}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":88381,"byte_end":88390,"line_start":268,"line_end":268,"column_start":19,"column_end":28},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":356},"to":{"krate":0,"index":342}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":88667,"byte_end":88670,"line_start":280,"line_end":280,"column_start":17,"column_end":20},"kind":{"Impl":{"id":43}},"from":{"krate":5,"index":7080},"to":{"krate":0,"index":345}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/distance_transform.rs","byte_start":89034,"byte_end":89040,"line_start":303,"line_end":303,"column_start":21,"column_end":27},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":370},"to":{"krate":0,"index":345}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":106658,"byte_end":106659,"line_start":76,"line_end":76,"column_start":20,"column_end":21},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":439},"to":{"krate":0,"index":431}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/canvas.rs","byte_start":107228,"byte_end":107233,"line_start":101,"line_end":101,"column_start":34,"column_end":39},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":444},"to":{"krate":0,"index":431}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":123701,"byte_end":123718,"line_start":21,"line_end":21,"column_start":6,"column_end":23},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":124640,"byte_end":124657,"line_start":54,"line_end":54,"column_start":19,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":588},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":125778,"byte_end":125800,"line_start":100,"line_end":100,"column_start":20,"column_end":42},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":605},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":126452,"byte_end":126474,"line_start":117,"line_end":117,"column_start":33,"column_end":55},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":605},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":126963,"byte_end":126988,"line_start":134,"line_end":134,"column_start":20,"column_end":45},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":127960,"byte_end":127985,"line_start":157,"line_end":157,"column_start":33,"column_end":58},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":620},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/drawing/line.rs","byte_start":132737,"byte_end":132744,"line_start":324,"line_end":324,"column_start":19,"column_end":26},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/median.rs","byte_start":204042,"byte_end":204049,"line_start":251,"line_end":251,"column_start":6,"column_end":13},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/filter/mod.rs","byte_start":171180,"byte_end":171186,"line_start":223,"line_end":223,"column_start":30,"column_end":36},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":212066,"byte_end":212076,"line_start":44,"line_end":44,"column_start":6,"column_end":16},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":217838,"byte_end":217848,"line_start":224,"line_end":224,"column_start":26,"column_end":36},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2316},"to":{"krate":2,"index":3096}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/geometric_transformations.rs","byte_start":218713,"byte_end":218723,"line_start":256,"line_end":256,"column_start":26,"column_end":36},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2316},"to":{"krate":2,"index":3096}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":272814,"byte_end":272829,"line_start":84,"line_end":84,"column_start":6,"column_end":21},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":273313,"byte_end":273324,"line_start":97,"line_end":97,"column_start":6,"column_end":17},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/haar.rs","byte_start":280871,"byte_end":280875,"line_start":318,"line_end":318,"column_start":9,"column_end":13},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":296500,"byte_end":296510,"line_start":26,"line_end":26,"column_start":6,"column_end":16},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":297661,"byte_end":297668,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2529},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":307847,"byte_end":307860,"line_start":338,"line_end":338,"column_start":6,"column_end":19},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":311957,"byte_end":311964,"line_start":449,"line_end":449,"column_start":23,"column_end":30},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/hog.rs","byte_start":312345,"byte_end":312351,"line_start":462,"line_end":462,"column_start":13,"column_end":19},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":343223,"byte_end":343227,"line_start":166,"line_end":166,"column_start":34,"column_end":38},"kind":{"Impl":{"id":67}},"from":{"krate":20,"index":8211},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":343573,"byte_end":343576,"line_start":182,"line_end":182,"column_start":23,"column_end":26},"kind":{"Impl":{"id":68}},"from":{"krate":20,"index":8182},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/integral_image.rs","byte_start":344087,"byte_end":344091,"line_start":202,"line_end":202,"column_start":23,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":20,"index":8240},"to":{"krate":0,"index":1607}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370694,"byte_end":370699,"line_start":10,"line_end":10,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":20,"index":6103},"to":{"krate":0,"index":1686}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":370933,"byte_end":370936,"line_start":18,"line_end":18,"column_start":31,"column_end":34},"kind":{"Impl":{"id":70}},"from":{"krate":20,"index":8182},"to":{"krate":0,"index":1686}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371108,"byte_end":371112,"line_start":28,"line_end":28,"column_start":31,"column_end":35},"kind":{"Impl":{"id":71}},"from":{"krate":20,"index":8240},"to":{"krate":0,"index":1686}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371287,"byte_end":371291,"line_start":38,"line_end":38,"column_start":31,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":20,"index":8211},"to":{"krate":0,"index":1686}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/map.rs","byte_start":371398,"byte_end":371403,"line_start":46,"line_end":46,"column_start":31,"column_end":36},"kind":{"Impl":{"id":73}},"from":{"krate":20,"index":8269},"to":{"krate":0,"index":1686}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404572,"byte_end":404577,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404719,"byte_end":404724,"line_start":22,"line_end":22,"column_start":22,"column_end":27},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2590},"to":{"krate":2,"index":3086}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":404901,"byte_end":404906,"line_start":30,"line_end":30,"column_start":35,"column_end":40},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2590},"to":{"krate":2,"index":3117}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":405050,"byte_end":405055,"line_start":37,"line_end":37,"column_start":22,"column_end":27},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2590},"to":{"krate":2,"index":3091}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":405232,"byte_end":405237,"line_start":45,"line_end":45,"column_start":35,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2590},"to":{"krate":2,"index":3121}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":405377,"byte_end":405382,"line_start":52,"line_end":52,"column_start":18,"column_end":23},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":406436,"byte_end":406444,"line_start":84,"line_end":84,"column_start":6,"column_end":14},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2613},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":406677,"byte_end":406682,"line_start":95,"line_end":95,"column_start":6,"column_end":11},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/point.rs","byte_start":407404,"byte_end":407408,"line_start":119,"line_end":119,"column_start":6,"column_end":10},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":409600,"byte_end":409604,"line_start":38,"line_end":38,"column_start":6,"column_end":10},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412213,"byte_end":412217,"line_start":126,"line_end":126,"column_start":22,"column_end":26},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2638},"to":{"krate":0,"index":1934}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412382,"byte_end":412386,"line_start":132,"line_end":132,"column_start":22,"column_end":26},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2638},"to":{"krate":0,"index":1934}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/rect.rs","byte_start":412805,"byte_end":412817,"line_start":149,"line_end":149,"column_start":6,"column_end":18},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/utkarsh_arch/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.23.0/src/union_find.rs","byte_start":465022,"byte_end":465039,"line_start":15,"line_end":15,"column_start":6,"column_end":23},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2142},"to":{"krate":4294967295,"index":4294967295}}]}